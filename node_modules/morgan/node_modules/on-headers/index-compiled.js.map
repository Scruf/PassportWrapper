{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,IAAI,QAAQ,MAAM,SAAN,CAAgB,KAAhB;;;;;;;;;;AAUZ,OAAO,OAAP,GAAiB,SAAS,SAAT,CAAmB,GAAnB,EAAwB,QAAxB,EAAkC;AACjD,MAAI,CAAC,GAAD,EAAM;AACR,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN,CADQ;GAAV;;AAIA,MAAI,OAAO,QAAP,KAAoB,UAApB,EAAgC;AAClC,UAAM,IAAI,SAAJ,CAAc,sCAAd,CAAN,CADkC;GAApC;;AAIA,MAAI,SAAJ,GAAgB,gBAAgB,IAAI,SAAJ,EAAe,QAA/B,CAAhB,CATiD;CAAlC;;AAYjB,SAAS,eAAT,CAAyB,aAAzB,EAAwC,QAAxC,EAAkD;AAChD,MAAI,QAAQ,KAAR;;;AAD4C,SAIzC,SAAS,SAAT,CAAmB,UAAnB,EAA+B;;AAEpC,QAAI,OAAO,oBAAoB,KAApB,CAA0B,IAA1B,EAAgC,SAAhC,CAAP;;;AAFgC,QAKhC,CAAC,KAAD,EAAQ;AACV,cAAQ,IAAR,CADU;AAEV,eAAS,IAAT,CAAc,IAAd;;;AAFU,UAKN,OAAO,KAAK,CAAL,CAAP,KAAmB,QAAnB,IAA+B,KAAK,UAAL,KAAoB,KAAK,CAAL,CAApB,EAA6B;AAC9D,aAAK,CAAL,IAAU,KAAK,UAAL,CADoD;AAE9D,aAAK,MAAL,GAAc,CAAd,CAF8D;OAAhE;KALF;;AAWA,kBAAc,KAAd,CAAoB,IAApB,EAA0B,IAA1B,EAhBoC;GAA/B,CAJyC;CAAlD;;AAwBA,SAAS,mBAAT,CAA6B,UAA7B,EAAyC;AACvC,MAAI,SAAS,UAAU,MAAV,CAD0B;AAEvC,MAAI,cAAc,SAAS,CAAT,IAAc,OAAO,UAAU,CAAV,CAAP,KAAwB,QAAxB,GAC5B,CADc,GAEd,CAFc,CAFqB;;AAMvC,MAAI,UAAU,UAAU,cAAc,CAAd,GACpB,UAAU,WAAV,CADU,GAEV,SAFU,CANyB;;AAUvC,OAAK,UAAL,GAAkB,UAAlB;;;AAVuC,MAanC,MAAM,OAAN,CAAc,OAAd,CAAJ,EAA4B;;AAE1B,SAAK,IAAI,IAAI,CAAJ,EAAO,MAAM,QAAQ,MAAR,EAAgB,IAAI,GAAJ,EAAS,EAAE,CAAF,EAAK;AAClD,WAAK,SAAL,CAAe,QAAQ,CAAR,EAAW,CAAX,CAAf,EAA8B,QAAQ,CAAR,EAAW,CAAX,CAA9B,EADkD;KAApD;GAFF,MAKO,IAAI,OAAJ,EAAa;;AAElB,QAAI,OAAO,OAAO,IAAP,CAAY,OAAZ,CAAP,CAFc;AAGlB,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACpC,UAAI,IAAI,KAAK,CAAL,CAAJ,CADgC;AAEpC,UAAI,CAAJ,EAAO,KAAK,SAAL,CAAe,CAAf,EAAkB,QAAQ,CAAR,CAAlB,EAAP;KAFF;GAHK;;;AAlBgC,MA4BnC,OAAO,IAAI,KAAJ,CAAU,KAAK,GAAL,CAAS,MAAT,EAAiB,WAAjB,CAAV,CAAP,CA5BmC;AA6BvC,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACpC,SAAK,CAAL,IAAU,UAAU,CAAV,CAAV,CADoC;GAAtC;;AAIA,SAAO,IAAP,CAjCuC;CAAzC","file":"index-compiled.js","sourcesContent":["/*!\n * on-headers\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Reference to Array slice.\n */\n\nvar slice = Array.prototype.slice\n\n/**\n * Execute a listener when a response is about to write headers.\n *\n * @param {Object} res\n * @return {Function} listener\n * @api public\n */\n\nmodule.exports = function onHeaders(res, listener) {\n  if (!res) {\n    throw new TypeError('argument res is required')\n  }\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('argument listener must be a function')\n  }\n\n  res.writeHead = createWriteHead(res.writeHead, listener)\n}\n\nfunction createWriteHead(prevWriteHead, listener) {\n  var fired = false;\n\n  // return function with core name and argument list\n  return function writeHead(statusCode) {\n    // set headers from arguments\n    var args = setWriteHeadHeaders.apply(this, arguments);\n\n    // fire listener\n    if (!fired) {\n      fired = true\n      listener.call(this)\n\n      // pass-along an updated status code\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\n        args[0] = this.statusCode\n        args.length = 1\n      }\n    }\n\n    prevWriteHead.apply(this, args);\n  }\n}\n\nfunction setWriteHeadHeaders(statusCode) {\n  var length = arguments.length\n  var headerIndex = length > 1 && typeof arguments[1] === 'string'\n    ? 2\n    : 1\n\n  var headers = length >= headerIndex + 1\n    ? arguments[headerIndex]\n    : undefined\n\n  this.statusCode = statusCode\n\n  // the following block is from node.js core\n  if (Array.isArray(headers)) {\n    // handle array case\n    for (var i = 0, len = headers.length; i < len; ++i) {\n      this.setHeader(headers[i][0], headers[i][1])\n    }\n  } else if (headers) {\n    // handle object case\n    var keys = Object.keys(headers)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      if (k) this.setHeader(k, headers[k])\n    }\n  }\n\n  // copy leading arguments\n  var args = new Array(Math.min(length, headerIndex))\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i]\n  }\n\n  return args\n}\n"]}