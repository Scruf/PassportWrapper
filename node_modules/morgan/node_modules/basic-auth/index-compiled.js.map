{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;AAQA;;;;;;;AAOA,OAAO,OAAP,GAAiB,IAAjB;;;;;;;;;;;AAWA,IAAI,oBAAoB,4DAApB;;;;;;;;;;;AAWJ,IAAI,iBAAiB,gBAAjB;;;;;;;;;;AAUJ,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,MAAI,CAAC,GAAD,EAAM;AACR,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN,CADQ;GAAV;;;AADiB,MAMb,SAAS,CAAC,IAAI,GAAJ,IAAW,GAAX,CAAD,CAAiB,OAAjB,CAAyB,aAAzB;;;AANI,MASb,QAAQ,kBAAkB,IAAlB,CAAuB,UAAU,EAAV,CAA/B,CATa;;AAWjB,MAAI,CAAC,KAAD,EAAQ;AACV,WADU;GAAZ;;;AAXiB,MAgBb,WAAW,eAAe,IAAf,CAAoB,aAAa,MAAM,CAAN,CAAb,CAApB,CAAX,CAhBa;;AAkBjB,MAAI,CAAC,QAAD,EAAW;AACb,WADa;GAAf;;;AAlBiB,SAuBV,IAAI,WAAJ,CAAgB,SAAS,CAAT,CAAhB,EAA6B,SAAS,CAAT,CAA7B,CAAP,CAvBiB;CAAnB;;;;;;;AA+BA,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,SAAO,IAAI,MAAJ,CAAW,GAAX,EAAgB,QAAhB,EAA0B,QAA1B,EAAP,CADyB;CAA3B;;;;;;;AASA,SAAS,WAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC;AAC/B,OAAK,IAAL,GAAY,IAAZ,CAD+B;AAE/B,OAAK,IAAL,GAAY,IAAZ,CAF+B;CAAjC","file":"index-compiled.js","sourcesContent":["/*!\n * basic-auth\n * Copyright(c) 2013 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = auth\n\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\n\nvar credentialsRegExp = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9\\-\\._~\\+\\/]+=*) *$/\n\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar userPassRegExp = /^([^:]*):(.*)$/\n\n/**\n * Parse the Authorization header field of a request.\n *\n * @param {object} req\n * @return {object} with .name and .pass\n * @public\n */\n\nfunction auth(req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  // get header\n  var header = (req.req || req).headers.authorization\n\n  // parse header\n  var match = credentialsRegExp.exec(header || '')\n\n  if (!match) {\n    return\n  }\n\n  // decode user pass\n  var userPass = userPassRegExp.exec(decodeBase64(match[1]))\n\n  if (!userPass) {\n    return\n  }\n\n  // return credentials object\n  return new Credentials(userPass[1], userPass[2])\n}\n\n/**\n * Decode base64 string.\n * @private\n */\n\nfunction decodeBase64(str) {\n  return new Buffer(str, 'base64').toString()\n}\n\n/**\n * Object to represent user credentials.\n * @private\n */\n\nfunction Credentials(name, pass) {\n  this.name = name\n  this.pass = pass\n}\n"]}