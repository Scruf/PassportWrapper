{"version":3,"sources":["mapreduce.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,QAAQ,OAAR,CAAR;;;AAGJ,IAAI,WAAW,QAAQ,WAAR,CAAX;;AAEJ,QAAQ,aAAR;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAT;;;AAGJ,IAAI,OAAO,CACT;AACE,QAAM,MAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;AACA,UAAQ,MAAR;CALO,EAOT;AACE,QAAM,MAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;AACA,UAAQ,QAAR;CAXO,EAaT;AACE,QAAM,KAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;AACA,UAAQ,MAAR;CAjBO,EAmBT;AACE,QAAM,OAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;AACA,UAAQ,QAAR;CAvBO,EAyBT;AACE,QAAM,SAAN;AACA,OAAK,IAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,IAA3B,CAAlC;AACA,UAAQ,MAAR;CA7BO,CAAP;;AAkCJ,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D,MAAI,GAAJ,EAAS,MAAM,GAAN,CAAT;;;AAD4D,OAI5D,CAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,WAAO,MAAP,CAAc,IAAd,EAAoB,EAApB,EADkC;GAAnB,EAEd,UAAS,GAAT,EAAc;AACf,QAAI,GAAJ,EAAS;;;;;;;;AAAT,QAQI,IAAI,EAAJ,CATW;;AAWf,MAAE,GAAF,GAAQ,YAAW;;;;AAIjB,WAAK,KAAK,MAAL,EAAa,KAAK,GAAL,CAAlB,CAJiB;KAAX;;;;AAXO,KAoBf,CAAE,MAAF,GAAW,UAAS,EAAT,EAAa,IAAb,EAAmB;AAC5B,aAAO,MAAM,GAAN,CAAU,IAAV,CAAP,CAD4B;KAAnB;;;;;;;;;;AApBI,KAgCf,CAAE,OAAF,GAAY,IAAZ;;;;AAhCe,UAoCf,CAAO,SAAP,CAAiB,CAAjB,EAAoB,UAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,EAA8B;AAChD,cAAQ,GAAR,CAAY,uBAAZ,EAAqC,MAAM,WAAN,CAArC,CADgD;AAEhD,cAAQ,GAAR,CAAY,OAAZ,EAFgD;AAGhD,gBAHgD;KAA9B,CAApB,CApCe;GAAd,CAFH,CAJ4D;CAAd,CAAhD;;AAkDA,SAAS,OAAT,GAAmB;AACjB,SAAO,MAAP,CAAc,YAAW;AACvB,aAAS,UAAT,GADuB;GAAX,CAAd,CADiB;CAAnB","file":"mapreduce-compiled.js","sourcesContent":["// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25)),\n    gender: 'Male'\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30)),\n    gender: 'Female'\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21)),\n    gender: 'Male'\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26)),\n    gender: 'Female'\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000)),\n    gender: 'Male'\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) throw err;\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) {\n      // handle error\n    }\n\n    // alright, simple map reduce example. We will find the total ages of each\n    // gender\n\n    // create the options object\n    var o = {};\n\n    o.map = function() {\n      // in this function, 'this' refers to the current document being\n      // processed. Return the (gender, age) tuple using\n      /* global emit */\n      emit(this.gender, this.age);\n    };\n\n    // the reduce function receives the array of ages that are grouped by the\n    // id, which in this case is the gender\n    o.reduce = function(id, ages) {\n      return Array.sum(ages);\n    };\n\n    // other options that can be specified\n\n    // o.query = { age : { $lt : 1000 }}; // the query object\n    // o.limit = 3; // max number of documents\n    // o.keeptemp = true; // default is false, specifies whether to keep temp data\n    // o.finalize = someFunc; // function called after reduce\n    // o.scope = {}; // the scope variable exposed to map/reduce/finalize\n    // o.jsMode = true; // default is false, force execution to stay in JS\n    o.verbose = true; // default is false, provide stats on the job\n    // o.out = {}; // objects to specify where output goes, by default is\n                   // returned, but can also be stored in a new collection\n                   // see: http://mongoosejs.com/docs/api.html#model_Model.mapReduce\n    Person.mapReduce(o, function(err, results, stats) {\n      console.log('map reduce took %d ms', stats.processtime);\n      console.log(results);\n      cleanup();\n    });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}