{"version":3,"sources":["promise.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,QAAQ,OAAR,CAAR;;;AAGJ,IAAI,WAAW,QAAQ,WAAR,CAAX;;AAEJ,QAAQ,aAAR;;AAEA,IAAI,SAAS,SAAS,KAAT,CAAe,QAAf,CAAT;;;AAGJ,IAAI,OAAO,CACT;AACE,QAAM,MAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;CAJO,EAMT;AACE,QAAM,MAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;CATO,EAWT;AACE,QAAM,KAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;CAdO,EAgBT;AACE,QAAM,OAAN;AACA,OAAK,EAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,EAA3B,CAAlC;CAnBO,EAqBT;AACE,QAAM,SAAN;AACA,OAAK,IAAL;AACA,YAAU,IAAI,IAAJ,GAAW,WAAX,CAAwB,IAAI,IAAJ,GAAW,WAAX,KAA2B,IAA3B,CAAlC;CAxBO,CAAP;;AA6BJ,SAAS,OAAT,CAAiB,6BAAjB,EAAgD,UAAS,GAAT,EAAc;AAC5D,MAAI,GAAJ,EAAS;AACP,UAAM,GAAN,CADO;GAAT;;;AAD4D,OAM5D,CAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,WAAO,MAAP,CAAc,IAAd,EAAoB,EAApB,EADkC;GAAnB,EAEd,UAAS,GAAT,EAAc;AACf,QAAI,GAAJ,EAAS;;;;;AAAT,QAKI,OAAO,OAAO,IAAP,CAAY,EAAC,KAAK,EAAC,KAAK,IAAL,EAAN,EAAb,EAAgC,IAAhC,EAAP;;;;AANW,QAUf,CAAK,OAAL,CAAa,YAAW;AACtB,cAAQ,GAAR,CAAY,WAAZ,EADsB;KAAX,CAAb;;;AAVe,QAef,CAAK,WAAL,CAAiB,YAAW;AAC1B,cAAQ,GAAR,CAAY,wBAAZ,EAD0B;KAAX,CAAjB;;;AAfe,QAoBf,CAAK,UAAL,CAAgB,YAAW;AACzB,cAAQ,GAAR,CAAY,WAAZ,EADyB;KAAX,CAAhB;;;;;AApBe,QA2Bf,CAAK,IAAL,CAAU,UAAS,MAAT,EAAiB;;AAEzB,UAAI,MAAM,OAAO,GAAP,CAAW,UAAS,CAAT,EAAY;AAC/B,eAAO,EAAE,GAAF,CADwB;OAAZ,CAAjB;;;AAFqB,aAOlB,OAAO,IAAP,CAAY,EAAC,KAAK,EAAC,MAAM,GAAN,EAAN,EAAb,EAAgC,IAAhC,EAAP,CAPyB;KAAjB,CAAV,CAQG,IARH,CAQQ,UAAS,MAAT,EAAiB;AACvB,cAAQ,GAAR,CAAY,sBAAZ,EAAoC,MAApC,EADuB;KAAjB,CARR,CAUG,IAVH,CAUQ,OAVR,EA3Be;GAAd,CAFH,CAN4D;CAAd,CAAhD;;AAiDA,SAAS,OAAT,GAAmB;AACjB,SAAO,MAAP,CAAc,YAAW;AACvB,aAAS,UAAT,GADuB;GAAX,CAAd,CADiB;CAAnB","file":"promise-compiled.js","sourcesContent":["// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25))\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30))\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21))\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26))\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000))\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) {\n    throw err;\n  }\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) {\n      // handle error\n    }\n\n    // create a promise (get one from the query builder)\n    var prom = Person.find({age: {$lt: 1000}}).exec();\n\n    // add a callback on the promise. This will be called on both error and\n    // complete\n    prom.addBack(function() {\n      console.log('completed');\n    });\n\n    // add a callback that is only called on complete (success) events\n    prom.addCallback(function() {\n      console.log('Successful Completion!');\n    });\n\n    // add a callback that is only called on err (rejected) events\n    prom.addErrback(function() {\n      console.log('Fail Boat');\n    });\n\n    // you can chain things just like in the promise/A+ spec\n    // note: each then() is returning a new promise, so the above methods\n    // that we defined will all fire after the initial promise is fulfilled\n    prom.then(function(people) {\n      // just getting the stuff for the next query\n      var ids = people.map(function(p) {\n        return p._id;\n      });\n\n      // return the next promise\n      return Person.find({_id: {$nin: ids}}).exec();\n    }).then(function(oldest) {\n      console.log('Oldest person is: %s', oldest);\n    }).then(cleanup);\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}