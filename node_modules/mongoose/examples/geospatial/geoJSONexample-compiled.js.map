{"version":3,"sources":["geoJSONexample.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,QAAQ,OAAR,CAAR;;;AAGJ,IAAI,WAAW,QAAQ,WAAR,CAAX;;AAEJ,QAAQ,oBAAR;;AAEA,IAAI,WAAW,SAAS,KAAT,CAAe,UAAf,CAAX;;;;AAIJ,IAAI,OAAO,CACT,EAAC,KAAK,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,CAAC,IAAD,EAAO,GAAR,CAAb,EAArB,EADQ,EAET,EAAC,KAAK,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,GAAD,EAAM,IAAN,CAAb,EAArB,EAFQ,EAGT,EAAC,KAAK,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,IAAD,EAAO,CAAC,IAAD,CAApB,EAArB,EAHQ,EAIT,EAAC,KAAK,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,CAAC,KAAD,EAAQ,IAAT,CAAb,EAArB,EAJQ,EAKT,EAAC,KAAK,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,IAAD,EAAO,IAAP,CAAb,EAArB,EALQ,CAAP;;AASJ,SAAS,OAAT,CAAiB,+BAAjB,EAAkD,UAAS,GAAT,EAAc;AAC9D,MAAI,GAAJ,EAAS;AACP,UAAM,GAAN,CADO;GAAT;;AAIA,WAAS,EAAT,CAAY,OAAZ,EAAqB,UAAS,GAAT,EAAc;AACjC,QAAI,GAAJ,EAAS;AACP,YAAM,GAAN,CADO;KAAT;;AADiC,SAKjC,CAAM,IAAN,CAAW,IAAX,EAAiB,UAAS,IAAT,EAAe,EAAf,EAAmB;AAClC,eAAS,MAAT,CAAgB,IAAhB,EAAsB,EAAtB,EADkC;KAAnB,EAEd,UAAS,GAAT,EAAc;AACf,UAAI,GAAJ,EAAS;AACP,cAAM,GAAN,CADO;OAAT;;AADe,UAKX,SAAS,EAAC,MAAM,OAAN,EAAe,aAAa,CAAC,CAAC,CAAD,EAAI,CAAL,CAAb,EAAzB;;AALW,cAOf,CAAS,IAAT,CAAc,EAAC,KAAK,EAAC,OAAO,MAAP,EAAN,EAAf,EAAsC,KAAtC,CAA4C,CAA5C,EAA+C,IAA/C,CAAoD,UAAS,GAAT,EAAc,GAAd,EAAmB;AACrE,YAAI,GAAJ,EAAS;AACP,gBAAM,GAAN,CADO;SAAT;AAGA,gBAAQ,GAAR,CAAY,qBAAZ,EAAmC,KAAK,SAAL,CAAe,MAAf,CAAnC,EAA2D,GAA3D,EAJqE;AAKrE,kBALqE;OAAnB,CAApD,CAPe;KAAd,CAFH,CALiC;GAAd,CAArB,CAL8D;CAAd,CAAlD;;AA8BA,SAAS,OAAT,GAAmB;AACjB,WAAS,MAAT,CAAgB,YAAW;AACzB,aAAS,UAAT,GADyB;GAAX,CAAhB,CADiB;CAAnB","file":"geoJSONexample-compiled.js","sourcesContent":["// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./geoJSONSchema.js')();\n\nvar Location = mongoose.model('Location');\n\n// define some dummy data\n// note: the type can be Point, LineString, or Polygon\nvar data = [\n  {loc: {type: 'Point', coordinates: [-20.0, 5.0]}},\n  {loc: {type: 'Point', coordinates: [6.0, 10.0]}},\n  {loc: {type: 'Point', coordinates: [34.0, -50.0]}},\n  {loc: {type: 'Point', coordinates: [-100.0, 70.0]}},\n  {loc: {type: 'Point', coordinates: [38.0, 38.0]}}\n];\n\n\nmongoose.connect('mongodb://localhost/locations', function(err) {\n  if (err) {\n    throw err;\n  }\n\n  Location.on('index', function(err) {\n    if (err) {\n      throw err;\n    }\n    // create all of the dummy locations\n    async.each(data, function(item, cb) {\n      Location.create(item, cb);\n    }, function(err) {\n      if (err) {\n        throw err;\n      }\n      // create the location we want to search for\n      var coords = {type: 'Point', coordinates: [-5, 5]};\n      // search for it\n      Location.find({loc: {$near: coords}}).limit(1).exec(function(err, res) {\n        if (err) {\n          throw err;\n        }\n        console.log('Closest to %s is %s', JSON.stringify(coords), res);\n        cleanup();\n      });\n    });\n  });\n});\n\nfunction cleanup() {\n  Location.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}