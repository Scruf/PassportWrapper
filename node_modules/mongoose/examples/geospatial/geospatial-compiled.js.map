{"version":3,"sources":["geospatial.js"],"names":[],"mappings":"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","file":"geospatial-compiled.js","sourcesContent":["// import async to make control flow simplier\nvar async = require('async');\n\n// import the rest of the normal stuff\nvar mongoose = require('../../lib');\n\nrequire('./person.js')();\n\nvar Person = mongoose.model('Person');\n\n// define some dummy data\nvar data = [\n  {\n    name: 'bill',\n    age: 25,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 25)),\n    gender: 'Male',\n    likes: ['movies', 'games', 'dogs'],\n    loc: [0, 0]\n  },\n  {\n    name: 'mary',\n    age: 30,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 30)),\n    gender: 'Female',\n    likes: ['movies', 'birds', 'cats'],\n    loc: [1, 1]\n  },\n  {\n    name: 'bob',\n    age: 21,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 21)),\n    gender: 'Male',\n    likes: ['tv', 'games', 'rabbits'],\n    loc: [3, 3]\n  },\n  {\n    name: 'lilly',\n    age: 26,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 26)),\n    gender: 'Female',\n    likes: ['books', 'cats', 'dogs'],\n    loc: [6, 6]\n  },\n  {\n    name: 'alucard',\n    age: 1000,\n    birthday: new Date().setFullYear((new Date().getFullYear() - 1000)),\n    gender: 'Male',\n    likes: ['glasses', 'wine', 'the night'],\n    loc: [10, 10]\n  }\n];\n\n\nmongoose.connect('mongodb://localhost/persons', function(err) {\n  if (err) {\n    throw err;\n  }\n\n  // create all of the dummy people\n  async.each(data, function(item, cb) {\n    Person.create(item, cb);\n  }, function(err) {\n    if (err) {\n      // handler error\n    }\n\n    // let's find the closest person to bob\n    Person.find({name: 'bob'}, function(err, res) {\n      if (err) {\n        throw err;\n      }\n\n      res[0].findClosest(function(err, closest) {\n        if (err) {\n          throw err;\n        }\n\n        console.log('%s is closest to %s', res[0].name, closest);\n\n\n        // we can also just query straight off of the model. For more\n        // information about geospatial queries and indexes, see\n        // http://docs.mongodb.org/manual/applications/geospatial-indexes/\n        var coords = [7, 7];\n        Person.find({loc: {$nearSphere: coords}}).limit(1).exec(function(err, res) {\n          console.log('Closest to %s is %s', coords, res);\n          cleanup();\n        });\n      });\n    });\n  });\n});\n\nfunction cleanup() {\n  Person.remove(function() {\n    mongoose.disconnect();\n  });\n}\n"]}