{"version":3,"sources":["person.js"],"names":[],"mappings":";AACA,IAAI,WAAW,QAAQ,WAAR,CAAX;AACJ,IAAI,SAAS,SAAS,MAAT;;;AAGb,OAAO,OAAP,GAAiB,YAAW;;AAE1B,MAAI,eAAe,IAAI,MAAJ,CAAW;AAC5B,UAAM,MAAN;AACA,SAAK,MAAL;AACA,cAAU,IAAV;AACA,YAAQ,MAAR;AACA,WAAO,CAAC,MAAD,CAAP;;AAEA,SAAK,EAAC,MAAM,CAAC,MAAD,CAAN,EAAgB,OAAO,IAAP,EAAtB;GAPiB,CAAf;;;AAFsB,cAa1B,CAAa,OAAb,CAAqB,WAArB,GAAmC,UAAS,EAAT,EAAa;AAC9C,WAAO,KAAK,KAAL,CAAW,QAAX,EAAqB,IAArB,CAA0B;AAC/B,WAAK,EAAC,aAAa,KAAK,GAAL,EAAnB;AACA,YAAM,EAAC,KAAK,KAAK,IAAL,EAAZ;KAFK,EAGJ,KAHI,CAGE,CAHF,EAGK,IAHL,CAGU,EAHV,CAAP,CAD8C;GAAb,CAbT;;AAoB1B,WAAS,KAAT,CAAe,QAAf,EAAyB,YAAzB,EApB0B;CAAX","file":"person-compiled.js","sourcesContent":["// import the necessary modules\nvar mongoose = require('../../lib');\nvar Schema = mongoose.Schema;\n\n// create an export function to encapsulate the model creation\nmodule.exports = function() {\n  // define schema\n  var PersonSchema = new Schema({\n    name: String,\n    age: Number,\n    birthday: Date,\n    gender: String,\n    likes: [String],\n    // define the geospatial field\n    loc: {type: [Number], index: '2d'}\n  });\n\n  // define a method to find the closest person\n  PersonSchema.methods.findClosest = function(cb) {\n    return this.model('Person').find({\n      loc: {$nearSphere: this.loc},\n      name: {$ne: this.name}\n    }).limit(1).exec(cb);\n  };\n\n  mongoose.model('Person', PersonSchema);\n};\n"]}