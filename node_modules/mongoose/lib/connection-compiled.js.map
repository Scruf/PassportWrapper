{"version":3,"sources":["connection.js"],"names":[],"mappings":"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","file":"connection-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('./utils'),\n    EventEmitter = require('events').EventEmitter,\n    driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native',\n    Schema = require('./schema'),\n    Collection = require(driver + '/collection'),\n    STATES = require('./connectionstate'),\n    MongooseError = require('./error'),\n    muri = require('muri'),\n    PromiseProvider = require('./promise_provider');\n\n/*!\n * Protocol prefix regexp.\n *\n * @api private\n */\n\nvar rgxProtocol = /^(?:.)+:\\/\\//;\n\n/*!\n * A list of authentication mechanisms that don't require a password for authentication.\n * This is used by the authMechanismDoesNotRequirePassword method.\n *\n * @api private\n */\nvar authMechanismsWhichDontRequirePassword = [\n  'MONGODB-X509'\n];\n\n/**\n * Connection constructor\n *\n * For practical reasons, a Connection equals a Db.\n *\n * @param {Mongoose} base a mongoose instance\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `connecting`: Emitted when `connection.{open,openSet}()` is executed on this connection.\n * @event `connected`: Emitted when this connection successfully connects to the db. May be emitted _multiple_ times in `reconnected` scenarios.\n * @event `open`: Emitted after we `connected` and `onOpen` is executed on all of this connections models.\n * @event `disconnecting`: Emitted when `connection.close()` was executed.\n * @event `disconnected`: Emitted after getting disconnected from the db.\n * @event `close`: Emitted after we `disconnected` and `onClose` executed on all of this connections models.\n * @event `reconnected`: Emitted after we `connected` and subsequently `disconnected`, followed by successfully another successfull connection.\n * @event `error`: Emitted when an error occurs on this connection.\n * @event `fullsetup`: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.\n * @event `all`: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.\n * @api public\n */\n\nfunction Connection(base) {\n  this.base = base;\n  this.collections = {};\n  this.models = {};\n  this.config = {autoIndex: true};\n  this.replica = false;\n  this.hosts = null;\n  this.host = null;\n  this.port = null;\n  this.user = null;\n  this.pass = null;\n  this.name = null;\n  this.options = null;\n  this.otherDbs = [];\n  this._readyState = STATES.disconnected;\n  this._closeCalled = false;\n  this._hasOpened = false;\n}\n\n/*!\n * Inherit from EventEmitter\n */\n\nConnection.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Connection ready state\n *\n * - 0 = disconnected\n * - 1 = connected\n * - 2 = connecting\n * - 3 = disconnecting\n *\n * Each state change emits its associated event name.\n *\n * ####Example\n *\n *     conn.on('connected', callback);\n *     conn.on('disconnected', callback);\n *\n * @property readyState\n * @api public\n */\n\nObject.defineProperty(Connection.prototype, 'readyState', {\n  get: function() {\n    return this._readyState;\n  },\n  set: function(val) {\n    if (!(val in STATES)) {\n      throw new Error('Invalid connection state: ' + val);\n    }\n\n    if (this._readyState !== val) {\n      this._readyState = val;\n      // loop over the otherDbs on this connection and change their state\n      for (var i = 0; i < this.otherDbs.length; i++) {\n        this.otherDbs[i].readyState = val;\n      }\n\n      if (STATES.connected === val) {\n        this._hasOpened = true;\n      }\n\n      this.emit(STATES[val]);\n    }\n  }\n});\n\n/**\n * A hash of the collections associated with this connection\n *\n * @property collections\n */\n\nConnection.prototype.collections;\n\n/**\n * The mongodb.Db instance, set when the connection is opened\n *\n * @property db\n */\n\nConnection.prototype.db;\n\n/**\n * A hash of the global options that are associated with this connection\n *\n * @property global\n */\n\nConnection.prototype.config;\n\n/**\n * Opens the connection to MongoDB.\n *\n * `options` is a hash with the following possible properties:\n *\n *     config  - passed to the connection config instance\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSet instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *\n * ####Notes:\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} connection_string mongodb://uri or the host to which you are connecting\n * @param {String} [database] database name\n * @param {Number} [port] database port\n * @param {Object} [options] options\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.open = function(host, database, port, options, callback) {\n  var parsed;\n\n  if (typeof database === 'string') {\n    switch (arguments.length) {\n      case 2:\n        port = 27017;\n        break;\n      case 3:\n        switch (typeof port) {\n          case 'function':\n            callback = port;\n            port = 27017;\n            break;\n          case 'object':\n            options = port;\n            port = 27017;\n            break;\n        }\n        break;\n      case 4:\n        if (typeof options === 'function') {\n          callback = options;\n          options = {};\n        }\n    }\n  } else {\n    switch (typeof database) {\n      case 'function':\n        callback = database;\n        database = undefined;\n        break;\n      case 'object':\n        options = database;\n        database = undefined;\n        callback = port;\n        break;\n    }\n\n    if (!rgxProtocol.test(host)) {\n      host = 'mongodb://' + host;\n    }\n\n    try {\n      parsed = muri(host);\n    } catch (err) {\n      this.error(err, callback);\n      return this;\n    }\n\n    database = parsed.db;\n    host = parsed.hosts[0].host || parsed.hosts[0].ipc;\n    port = parsed.hosts[0].port || 27017;\n  }\n\n  this.options = this.parseOptions(options, parsed && parsed.options);\n\n  // make sure we can open\n  if (STATES.disconnected !== this.readyState) {\n    var err = new Error('Trying to open unclosed connection.');\n    err.state = this.readyState;\n    this.error(err, callback);\n    return this;\n  }\n\n  if (!host) {\n    this.error(new Error('Missing hostname.'), callback);\n    return this;\n  }\n\n  if (!database) {\n    this.error(new Error('Missing database name.'), callback);\n    return this;\n  }\n\n  // authentication\n  if (this.optionsProvideAuthenticationData(options)) {\n    this.user = options.user;\n    this.pass = options.pass;\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n\n    // Check hostname for user/pass\n  } else if (/@/.test(host) && /:/.test(host.split('@')[0])) {\n    host = host.split('@');\n    var auth = host.shift().split(':');\n    host = host.pop();\n    this.user = auth[0];\n    this.pass = auth[1];\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    this.config.autoIndex = options.config.autoIndex !== false;\n  }\n\n  this.name = database;\n  this.host = host;\n  this.port = port;\n\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve, reject) {\n    _this._open(!!callback, function(error) {\n      callback && callback(error);\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Opens the connection to a replica set.\n *\n * ####Example:\n *\n *     var db = mongoose.createConnection();\n *     db.openSet(\"mongodb://user:pwd@localhost:27020/testing,mongodb://example.com:27020,mongodb://localhost:27019\");\n *\n * The database name and/or auth need only be included in one URI.\n * The `options` is a hash which is passed to the internal driver connection object.\n *\n * Valid `options`\n *\n *     db      - passed to the connection db instance\n *     server  - passed to the connection server instance(s)\n *     replset - passed to the connection ReplSetServer instance\n *     user    - username for authentication\n *     pass    - password for authentication\n *     auth    - options for authentication (see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate)\n *     mongos  - Boolean - if true, enables High Availability support for mongos\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Notes:\n *\n * _If connecting to multiple mongos servers, set the `mongos` option to true._\n *\n *     conn.open('mongodb://mongosA:27501,mongosB:27501', { mongos: true }, cb);\n *\n * Mongoose forces the db option `forceServerObjectId` false and cannot be overridden.\n * Mongoose defaults the server `auto_reconnect` options to true which can be overridden.\n * See the node-mongodb-native driver instance for options that it understands.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * @param {String} uris comma-separated mongodb:// `URI`s\n * @param {String} [database] database name if not included in `uris`\n * @param {Object} [options] passed to the internal driver\n * @param {Function} [callback]\n * @see node-mongodb-native https://github.com/mongodb/node-mongodb-native\n * @see http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\n * @api public\n */\n\nConnection.prototype.openSet = function(uris, database, options, callback) {\n  if (!rgxProtocol.test(uris)) {\n    uris = 'mongodb://' + uris;\n  }\n\n  switch (arguments.length) {\n    case 3:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'object':\n          callback = options;\n          options = database;\n          database = null;\n          break;\n      }\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      switch (typeof database) {\n        case 'string':\n          this.name = database;\n          break;\n        case 'function':\n          callback = database;\n          database = null;\n          break;\n        case 'object':\n          options = database;\n          database = null;\n          break;\n      }\n  }\n\n  var parsed;\n  try {\n    parsed = muri(uris);\n  } catch (err) {\n    this.error(err, callback);\n    return this;\n  }\n\n  if (!this.name) {\n    this.name = parsed.db;\n  }\n\n  this.hosts = parsed.hosts;\n  this.options = this.parseOptions(options, parsed && parsed.options);\n  this.replica = true;\n\n  if (!this.name) {\n    this.error(new Error('No database name provided for replica set'), callback);\n    return this;\n  }\n\n  // authentication\n  if (this.optionsProvideAuthenticationData(options)) {\n    this.user = options.user;\n    this.pass = options.pass;\n  } else if (parsed && parsed.auth) {\n    this.user = parsed.auth.user;\n    this.pass = parsed.auth.pass;\n  } else {\n    this.user = this.pass = undefined;\n  }\n\n  // global configuration options\n  if (options && options.config) {\n    this.config.autoIndex = options.config.autoIndex !== false;\n  }\n\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve, reject) {\n    _this._open(!!callback, function(error) {\n      callback && callback(error);\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * error\n *\n * Graceful error handling, passes error to callback\n * if available, else emits error on the connection.\n *\n * @param {Error} err\n * @param {Function} callback optional\n * @api private\n */\n\nConnection.prototype.error = function(err, callback) {\n  if (callback) {\n    return callback(err);\n  }\n  this.emit('error', err);\n};\n\n/**\n * Handles opening the connection with the appropriate method based on connection type.\n *\n * @param {Function} callback\n * @api private\n */\n\nConnection.prototype._open = function(emit, callback) {\n  this.readyState = STATES.connecting;\n  this._closeCalled = false;\n\n  var _this = this;\n\n  var method = this.replica\n      ? 'doOpenSet'\n      : 'doOpen';\n\n  // open connection\n  this[method](function(err) {\n    if (err) {\n      _this.readyState = STATES.disconnected;\n      if (_this._hasOpened) {\n        if (callback) {\n          callback(err);\n        }\n      } else {\n        _this.error(err, emit && callback);\n      }\n      return;\n    }\n\n    _this.onOpen(callback);\n  });\n};\n\n/**\n * Called when the connection is opened\n *\n * @api private\n */\n\nConnection.prototype.onOpen = function(callback) {\n  var _this = this;\n\n  function open(err, isAuth) {\n    if (err) {\n      _this.readyState = isAuth ? STATES.unauthorized : STATES.disconnected;\n      if (_this._hasOpened) {\n        if (callback) {\n          callback(err);\n        }\n      } else {\n        _this.error(err, callback);\n      }\n      return;\n    }\n\n    _this.readyState = STATES.connected;\n\n    // avoid having the collection subscribe to our event emitter\n    // to prevent 0.3 warning\n    for (var i in _this.collections) {\n      _this.collections[i].onOpen();\n    }\n\n    callback && callback();\n    _this.emit('open');\n  }\n\n  // re-authenticate if we're not already connected #3871\n  if (this._readyState !== STATES.connected && this.shouldAuthenticate()) {\n    _this.db.authenticate(_this.user, _this.pass, _this.options.auth, function(err) {\n      open(err, true);\n    });\n  } else {\n    open();\n  }\n};\n\n/**\n * Closes the connection\n *\n * @param {Function} [callback] optional\n * @return {Connection} self\n * @api public\n */\n\nConnection.prototype.close = function(callback) {\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve, reject) {\n    _this._close(function(error) {\n      callback && callback(error);\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve();\n    });\n  });\n};\n\n/**\n * Handles closing the connection\n *\n * @param {Function} callback\n * @api private\n */\nConnection.prototype._close = function(callback) {\n  var _this = this;\n  this._closeCalled = true;\n\n  switch (this.readyState) {\n    case 0: // disconnected\n      callback && callback();\n      break;\n\n    case 1: // connected\n    case 4: // unauthorized\n      this.readyState = STATES.disconnecting;\n      this.doClose(function(err) {\n        if (err) {\n          _this.error(err, callback);\n        } else {\n          _this.onClose();\n          callback && callback();\n        }\n      });\n      break;\n\n    case 2: // connecting\n      this.once('open', function() {\n        _this.close(callback);\n      });\n      break;\n\n    case 3: // disconnecting\n      if (!callback) {\n        break;\n      }\n      this.once('close', function() {\n        callback();\n      });\n      break;\n  }\n\n  return this;\n};\n\n/**\n * Called when the connection closes\n *\n * @api private\n */\n\nConnection.prototype.onClose = function() {\n  this.readyState = STATES.disconnected;\n\n  // avoid having the collection subscribe to our event emitter\n  // to prevent 0.3 warning\n  for (var i in this.collections) {\n    this.collections[i].onClose();\n  }\n\n  this.emit('close');\n};\n\n/**\n * Retrieves a collection, creating it if not cached.\n *\n * Not typically needed by applications. Just talk to your collection through your model.\n *\n * @param {String} name of the collection\n * @param {Object} [options] optional collection options\n * @return {Collection} collection instance\n * @api public\n */\n\nConnection.prototype.collection = function(name, options) {\n  if (!(name in this.collections)) {\n    this.collections[name] = new Collection(name, this, options);\n  }\n  return this.collections[name];\n};\n\n/**\n * Defines or retrieves a model.\n *\n *     var mongoose = require('mongoose');\n *     var db = mongoose.createConnection(..);\n *     db.model('Venue', new Schema(..));\n *     var Ticket = db.model('Ticket', new Schema(..));\n *     var Venue = db.model('Venue');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = conn.model('Actor', schema, collectionName)\n *\n * @param {String} name the model name\n * @param {Schema} [schema] a schema. necessary when defining a model\n * @param {String} [collection] name of mongodb collection (optional) if not given it will be induced from model name\n * @see Mongoose#model #index_Mongoose-model\n * @return {Model} The compiled model\n * @api public\n */\n\nConnection.prototype.model = function(name, schema, collection) {\n  // collection name discovery\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !schema.instanceOfSchema) {\n    schema = new Schema(schema);\n  }\n\n  if (this.models[name] && !collection) {\n    // model exists but we are not subclassing with custom collection\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new MongooseError.OverwriteModelError(name);\n    }\n    return this.models[name];\n  }\n\n  var opts = {cache: false, connection: this};\n  var model;\n\n  if (schema && schema.instanceOfSchema) {\n    // compile a model\n    model = this.base.model(name, schema, collection, opts);\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    model.init();\n    return model;\n  }\n\n  if (this.models[name] && collection) {\n    // subclassing current model with alternate collection\n    model = this.models[name];\n    schema = model.prototype.schema;\n    var sub = model.__subclass(this, schema, collection);\n    // do not cache the sub model\n    return sub;\n  }\n\n  // lookup model in mongoose module\n  model = this.base.models[name];\n\n  if (!model) {\n    throw new MongooseError.MissingSchemaError(name);\n  }\n\n  if (this === model.prototype.db\n      && (!collection || collection === model.collection.name)) {\n    // model already uses this connection.\n\n    // only the first model with this name is cached to allow\n    // for one-offs with custom collection names etc.\n    if (!this.models[name]) {\n      this.models[name] = model;\n    }\n\n    return model;\n  }\n  this.models[name] = model.__subclass(this, schema, collection);\n  return this.models[name];\n};\n\n/**\n * Returns an array of model names created on this connection.\n * @api public\n * @return {Array}\n */\n\nConnection.prototype.modelNames = function() {\n  return Object.keys(this.models);\n};\n\n/**\n * @brief Returns if the connection requires authentication after it is opened. Generally if a\n * username and password are both provided than authentication is needed, but in some cases a\n * password is not required.\n * @api private\n * @return {Boolean} true if the connection should be authenticated after it is opened, otherwise false.\n */\nConnection.prototype.shouldAuthenticate = function() {\n  return (this.user !== null && this.user !== void 0) &&\n      ((this.pass !== null || this.pass !== void 0) || this.authMechanismDoesNotRequirePassword());\n};\n\n/**\n * @brief Returns a boolean value that specifies if the current authentication mechanism needs a\n * password to authenticate according to the auth objects passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the authentication mechanism specified in the options object requires\n *  a password, otherwise false.\n */\nConnection.prototype.authMechanismDoesNotRequirePassword = function() {\n  if (this.options && this.options.auth) {\n    return authMechanismsWhichDontRequirePassword.indexOf(this.options.auth.authMechanism) >= 0;\n  }\n  return true;\n};\n\n/**\n * @brief Returns a boolean value that specifies if the provided objects object provides enough\n * data to authenticate with. Generally this is true if the username and password are both specified\n * but in some authentication methods, a password is not required for authentication so only a username\n * is required.\n * @param {Object} [options] the options object passed into the open/openSet methods.\n * @api private\n * @return {Boolean} true if the provided options object provides enough data to authenticate with,\n *   otherwise false.\n */\nConnection.prototype.optionsProvideAuthenticationData = function(options) {\n  return (options) &&\n      (options.user) &&\n      ((options.pass) || this.authMechanismDoesNotRequirePassword());\n};\n\n/*!\n * Module exports.\n */\n\nConnection.STATES = STATES;\nmodule.exports = Connection;\n"]}