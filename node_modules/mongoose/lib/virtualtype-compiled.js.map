{"version":3,"sources":["virtualtype.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA,SAAS,WAAT,CAAqB,OAArB,EAA8B,IAA9B,EAAoC;AAClC,OAAK,IAAL,GAAY,IAAZ,CADkC;AAElC,OAAK,OAAL,GAAe,EAAf,CAFkC;AAGlC,OAAK,OAAL,GAAe,EAAf,CAHkC;AAIlC,OAAK,OAAL,GAAe,WAAW,EAAX,CAJmB;CAApC;;;;;;;;;;;;;;;;;AAsBA,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,UAAS,EAAT,EAAa;AACvC,OAAK,OAAL,CAAa,IAAb,CAAkB,EAAlB,EADuC;AAEvC,SAAO,IAAP,CAFuC;CAAb;;;;;;;;;;;;;;;;;;;AAsB5B,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,UAAS,EAAT,EAAa;AACvC,OAAK,OAAL,CAAa,IAAb,CAAkB,EAAlB,EADuC;AAEvC,SAAO,IAAP,CAFuC;CAAb;;;;;;;;;;;AAc5B,YAAY,SAAZ,CAAsB,YAAtB,GAAqC,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AAC1D,MAAI,IAAI,KAAJ,CADsD;AAE1D,OAAK,IAAI,IAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,EAAyB,KAAK,CAAL,EAAQ,GAA9C,EAAmD;AACjD,QAAI,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,CAAqB,KAArB,EAA4B,CAA5B,EAA+B,IAA/B,CAAJ,CADiD;GAAnD;AAGA,SAAO,CAAP,CAL0D;CAAvB;;;;;;;;;;;AAiBrC,YAAY,SAAZ,CAAsB,YAAtB,GAAqC,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AAC1D,MAAI,IAAI,KAAJ,CADsD;AAE1D,OAAK,IAAI,IAAI,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB,EAAyB,KAAK,CAAL,EAAQ,GAA9C,EAAmD;AACjD,QAAI,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,CAAqB,KAArB,EAA4B,CAA5B,EAA+B,IAA/B,CAAJ,CADiD;GAAnD;AAGA,SAAO,CAAP,CAL0D;CAAvB;;;;;;AAYrC,OAAO,OAAP,GAAiB,WAAjB","file":"virtualtype-compiled.js","sourcesContent":["\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     var fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @parma {Object} options\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = options || {};\n}\n\n/**\n * Defines a getter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function () {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Defines a setter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.set(function (v) {\n *       var parts = v.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, scope) {\n  var v = value;\n  for (var l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, scope) {\n  var v = value;\n  for (var l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n"]}