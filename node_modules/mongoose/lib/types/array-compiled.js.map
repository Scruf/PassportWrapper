{"version":3,"sources":["array.js"],"names":[],"mappings":";;;;AAIA,IAAI,mBAAmB,QAAQ,YAAR,CAAnB;AACJ,IAAI,WAAW,QAAQ,aAAR,CAAX;AACJ,IAAI,WAAW,QAAQ,YAAR,CAAX;AACJ,IAAI,QAAQ,QAAQ,UAAR,CAAR;AACJ,IAAI,mBAAmB,MAAM,gBAAN;;;;;;;;;;;;;;;;;AAiBvB,SAAS,aAAT,CAAuB,MAAvB,EAA+B,IAA/B,EAAqC,GAArC,EAA0C;AACxC,MAAI,MAAM,GAAG,MAAH,CAAU,MAAV,CAAN,CADoC;AAExC,MAAI,QAAQ;AACV,qBAAiB,IAAjB;AACA,gBAAY,EAAZ;AACA,WAAO,IAAP;AACA,cAAU,EAAV;AACA,aAAS,KAAK,CAAL;GALP,CAFoC;AASxC,MAAI,MAAM,EAAN,CAToC;;AAWxC,MAAI,SAAS,OAAO,IAAP,CAAY,cAAc,KAAd,CAArB,CAXoC;AAYxC,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,OAAO,MAAP,EAAe,EAAE,CAAF,EAAK;AACtC,QAAI,OAAO,CAAP,CAAJ,IAAiB,EAAC,YAAY,KAAZ,EAAmB,cAAc,IAAd,EAAoB,UAAU,IAAV,EAAgB,OAAO,cAAc,KAAd,CAAoB,OAAO,CAAP,CAApB,CAAP,EAAzE,CADsC;GAAxC;;AAIA,MAAI,QAAQ,OAAO,IAAP,CAAY,KAAZ,CAAR,CAhBoC;AAiBxC,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,EAAE,CAAF,EAAK;AACrC,QAAI,MAAM,CAAN,CAAJ,IAAgB,EAAC,YAAY,KAAZ,EAAmB,cAAc,IAAd,EAAoB,UAAU,IAAV,EAAgB,OAAO,MAAM,MAAM,CAAN,CAAN,CAAP,EAAxE,CADqC;GAAvC;;AAIA,SAAO,gBAAP,CAAwB,GAAxB,EAA6B,GAA7B;;;;;;AArBwC,MA2BpC,OAAO,eAAe,QAAf,EAAyB;AAClC,QAAI,OAAJ,GAAc,GAAd,CADkC;AAElC,QAAI,OAAJ,GAAc,IAAI,MAAJ,CAAW,IAAX,CAAgB,IAAhB,CAAd,CAFkC;GAApC;;AAKA,SAAO,GAAP,CAhCwC;CAA1C;;AAmCA,cAAc,KAAd,GAAsB;;;;;;;;;AASpB,YAAU,SAAV;;;;;;;;;;AAUA,WAAS,SAAT;;;;;;;;;;;;AAYA,SAAO,UAAS,KAAT,EAAgB;AACrB,QAAI,QAAQ,KAAK,MAAL,CADS;AAErB,QAAI,YAAY,KAAZ,CAFiB;AAGrB,QAAI,KAAJ,CAHqB;;AAKrB,QAAI,KAAK,OAAL,EAAc;;;AAGhB,UAAI,CAAC,KAAD,EAAQ;AACV,gBAAQ,KAAK,MAAL,GAAc,KAAK,OAAL,CAAa,aAAb,GAChB,KAAK,OAAL,CAAa,aAAb,EADgB,GAEhB,KAAK,OAAL,CAHI;OAAZ;;AAMA,kBAAY,MAAM,SAAN,CAAgB,KAAK,KAAL,EAAY,IAA5B,CAAZ,CATgB;KAAlB;;AAYA,QAAI,aAAa,UAAU,IAAV,IAAkB,UAAU,SAAV,EAAqB;;AAEtD,cAAQ,UAAU,OAAV,CAAkB,KAAlB;;;;AAF8C,UAMlD,OAAO,QAAP,CAAgB,KAAhB,KACA,iBAAiB,QAAjB,IAA6B,CAAC,MAAM,QAAN,CAAe,KAAf,CAAD,EAAwB;AACvD,gBAAQ,EAAC,KAAK,KAAL,EAAT,CADuD;OADzD;;;;AANsD,UAalD,SAAS,MAAM,MAAN,IAAgB,MAAM,MAAN,CAAa,oBAAb,IACzB,MAAM,MAAN,CAAa,oBAAb,CAAkC,GAAlC,KAA0C,SAA1C,CAdkD;AAetD,UAAI,CAAC,MAAD,EAAS;AACX,gBAAQ,IAAI,KAAJ,CAAU,KAAV,CAAR,CADW;OAAb;AAGA,aAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,KAAzB,EAAgC,KAAK,OAAL,EAAc,IAA9C,CAAP,CAlBsD;KAAxD;;AAqBA,WAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,KAAzB,EAAgC,KAAK,OAAL,EAAc,KAA9C,CAAP,CAtCqB;GAAhB;;;;;;;;;;;;;;AAqDP,iBAAe,UAAS,IAAT,EAAe,YAAf,EAA6B;AAC1C,QAAI,SAAS,KAAK,OAAL;QACT,SADJ,CAD0C;;AAI1C,QAAI,MAAJ,EAAY;AACV,kBAAY,KAAK,KAAL,CADF;;AAGV,UAAI,UAAU,MAAV,EAAkB;AACpB,YAAI,gBAAgB,IAAhB,EAAsB;;AAExB,sBAAY,YAAY,GAAZ,GAAkB,KAAK,OAAL,CAAa,IAAb,CAAlB,GAAuC,GAAvC,GAA6C,YAA7C,CAFY;SAA1B,MAGO;;AAEL,sBAAY,YAAY,GAAZ,GAAkB,IAAlB,CAFP;SAHP;OADF;;AAUA,aAAO,YAAP,CAAoB,SAApB,EAbU;KAAZ;;AAgBA,WAAO,IAAP,CApB0C;GAA7B;;;;;;;;;;;;AAiCf,mBAAiB,UAAS,EAAT,EAAa,GAAb,EAAkB;AACjC,QAAI,OAAO,MAAP,EAAe;;;AAGjB,WAAK,QAAL,GAAgB,EAAC,MAAM,GAAN,EAAjB,CAHiB;AAIjB,aAAO,IAAP,CAJiB;KAAnB;;AAOA,QAAI,UAAU,KAAK,QAAL;;;AARmB,QAW7B,OAAO,MAAP,IAAiB,EAAE,UAAU,OAAV,CAAF,EAAsB;AACzC,UAAI,QAAQ,IAAR,CADqC;AAEzC,WAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB,EAA0B,YAAW;AACnC,cAAM,OAAN,GAAgB,MAAM,QAAN,GAAiB,IAAjB,CADmB;OAAX,CAA1B,CAFyC;KAA3C;;;;AAXiC,QAoB7B,KAAK,QAAL,CAAc,IAAd,IACA,OAAO,IAAP,CAAY,OAAZ,EAAqB,MAArB,IAA+B,EAAE,MAAM,OAAN,CAAF,EAAkB;;;AAGnD,WAAK,QAAL,GAAgB,EAAC,MAAM,IAAN,EAAjB,CAHmD;AAInD,aAAO,IAAP,CAJmD;KADrD;;AAQA,QAAI,QAAJ,CA5BiC;;AA8BjC,QAAI,OAAO,UAAP,IAAqB,OAAO,UAAP,IAAqB,OAAO,WAAP,EAAoB;AAChE,cAAQ,EAAR,MAAgB,QAAQ,EAAR,IAAc,EAAd,CAAhB,CADgE;AAEhE,cAAQ,EAAR,IAAc,QAAQ,EAAR,EAAY,MAAZ,CAAmB,GAAnB,CAAd,CAFgE;KAAlE,MAGO,IAAI,OAAO,WAAP,EAAoB;AAC7B,UAAI,SAAS,QAAQ,OAAR,MAAqB,QAAQ,OAAR,IAAmB,EAAnB,CAArB,CADgB;AAE7B,UAAI,IAAI,CAAJ,aAAkB,gBAAlB,EAAoC;AACtC,mBAAW,OAAO,KAAP,MAAkB,OAAO,KAAP,IAAgB,EAAhB,CAAlB,CAD2B;AAEtC,cAAM,SAAN,CAAgB,IAAhB,CAAqB,KAArB,CAA2B,QAA3B,EAAqC,IAAI,GAAJ,CAAQ,UAAS,CAAT,EAAY;AACvD,iBAAO,EAAE,QAAF,CAAW,EAAC,UAAU,KAAV,EAAZ,CAAP,CADuD;SAAZ,CAA7C,EAFsC;OAAxC,MAKO;AACL,mBAAW,OAAO,KAAP,MAAkB,OAAO,KAAP,IAAgB,EAAC,KAAK,EAAL,EAAjB,CAAlB,CADN;AAEL,iBAAS,KAAT,IAAkB,SAAS,KAAT,EAAgB,MAAhB,CAAuB,GAAvB,CAAlB,CAFK;OALP;KAFK,MAWA;AACL,cAAQ,EAAR,IAAc,GAAd,CADK;KAXA;;AAeP,WAAO,IAAP,CAhDiC;GAAlB;;;;;;;;;;;;;AA8DjB,iBAAe,YAAW;AACxB,QAAI,MAAM,EAAN,CADoB;AAExB,QAAI,OAAO,OAAO,IAAP,CAAY,KAAK,QAAL,CAAnB,CAFoB;AAGxB,QAAI,IAAI,KAAK,MAAL,CAHgB;;AAKxB,QAAI,MAAM,CAAN,EAAS;AACX,UAAI,CAAJ,IAAS,CAAC,MAAD,EAAS,KAAK,QAAL,CAAc,EAAC,YAAY,CAAZ,EAAe,WAAW,KAAX,EAA9B,CAAT,CAAT,CADW;AAEX,aAAO,GAAP,CAFW;KAAb;;AAKA,WAAO,GAAP,EAAY;AACV,UAAI,KAAK,KAAK,CAAL,CAAL,CADM;AAEV,UAAI,MAAM,KAAK,QAAL,CAAc,EAAd,CAAN;;;;;AAFM,UAON,iBAAiB,GAAjB,CAAJ,EAA2B;AACzB,cAAM,IAAI,QAAJ,CAAa,EAAC,YAAY,CAAZ,EAAe,WAAW,KAAX,EAA7B,CAAN,CADyB;OAA3B,MAEO,IAAI,MAAM,OAAN,CAAc,GAAd,CAAJ,EAAwB;AAC7B,cAAM,KAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB,EAAwB,EAAC,YAAY,CAAZ,EAAe,WAAW,KAAX,EAAxC,CAAN,CAD6B;OAAxB,MAEA,IAAI,IAAI,OAAJ,EAAa;AACtB,cAAM,IAAI,OAAJ,EAAN,CADsB;OAAjB;;AAIP,UAAI,OAAO,WAAP,EAAoB;AACtB,cAAM,EAAC,OAAO,GAAP,EAAP,CADsB;OAAxB;;AAIA,UAAI,IAAJ,CAAS,CAAC,EAAD,EAAK,GAAL,CAAT,EAnBU;KAAZ;;AAsBA,WAAO,GAAP,CAhCwB;GAAX;;;;;;;;;;;AA4Cf,cAAY,SAAS,UAAT,GAAsB;AAChC,QAAI,EAAE,KAAK,QAAL,IAAiB,KAAK,QAAL,CAAc,WAAd,CAA0B,IAA1B,KAAmC,QAAnC,CAAnB,EAAiE;AACnE,aAAO,CAAP,CADmE;KAArE;;AAIA,WAAO,OAAO,IAAP,CAAY,KAAK,QAAL,CAAZ,CAA2B,MAA3B,CALyB;GAAtB;;;;;;;;;;AAgBZ,YAAU,UAAS,GAAT,EAAc,KAAd,EAAqB;AAC7B,WAAO,KAAK,KAAL,CAAW,GAAX,EAAgB,KAAK,MAAL,GAAc,KAAd,CAAvB,CAD6B;GAArB;;;;;;;;;;;AAaV,QAAM,YAAW;AACf,QAAI,SAAS,GAAG,GAAH,CAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,QAAL,EAAe,IAAtC,CAAT,CADW;AAEf,aAAS,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,EAAkC,KAAK,OAAL,EAAc,SAAhD,EACL,SADK,EACM,EAAC,uBAAuB,IAAvB,EADP,CAAT,CAFe;AAIf,QAAI,MAAM,GAAG,IAAH,CAAQ,KAAR,CAAc,IAAd,EAAoB,MAApB,CAAN;;;;AAJW,QAQf,CAAK,eAAL,CAAqB,UAArB,EAAiC,MAAjC,EARe;AASf,SAAK,aAAL,GATe;AAUf,WAAO,GAAP,CAVe;GAAX;;;;;;;;;;;;;;;AA0BN,iBAAe,YAAW;AACxB,QAAI,SAAS,GAAG,GAAH,CAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,QAAL,EAAe,IAAtC,CAAT,CADoB;AAExB,QAAI,MAAM,GAAG,IAAH,CAAQ,KAAR,CAAc,IAAd,EAAoB,MAApB,CAAN,CAFoB;AAGxB,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAHwB;AAIxB,SAAK,aAAL,GAJwB;AAKxB,WAAO,GAAP,CALwB;GAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2Cf,QAAM,YAAW;AACf,SAAK,eAAL,CAAqB,MAArB,EAA6B,CAA7B,EADe;AAEf,SAAK,aAAL;;;AAFe,QAKX,KAAK,OAAL,EAAc;AAChB,aADgB;KAAlB;AAGA,SAAK,OAAL,GAAe,IAAf,CARe;;AAUf,WAAO,GAAG,GAAH,CAAO,IAAP,CAAY,IAAZ,CAAP,CAVe;GAAX;;;;;;;;;;;;;;;AA0BN,OAAK,YAAW;AACd,QAAI,MAAM,GAAG,GAAH,CAAO,IAAP,CAAY,IAAZ,CAAN,CADU;AAEd,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAFc;AAGd,SAAK,aAAL,GAHc;AAId,WAAO,GAAP,CAJc;GAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCL,UAAQ,SAAS,MAAT,GAAkB;AACxB,SAAK,eAAL,CAAqB,MAArB,EAA6B,CAAC,CAAD,CAA7B,CADwB;AAExB,SAAK,aAAL;;;AAFwB,QAKpB,KAAK,QAAL,EAAe;AACjB,aADiB;KAAnB;AAGA,SAAK,QAAL,GAAgB,IAAhB,CARwB;;AAUxB,WAAO,GAAG,KAAH,CAAS,IAAT,CAAc,IAAd,CAAP,CAVwB;GAAlB;;;;;;;;;;;;;;;;;;;;;AAgCR,SAAO,YAAW;AAChB,QAAI,MAAM,GAAG,KAAH,CAAS,IAAT,CAAc,IAAd,CAAN,CADY;AAEhB,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAFgB;AAGhB,SAAK,aAAL,GAHgB;AAIhB,WAAO,GAAP,CAJgB;GAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCP,QAAM,YAAW;AACf,QAAI,SAAS,GAAG,GAAH,CAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,KAAL,EAAY,IAAnC,CAAT;QACA,MAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,KAAL,CAAvB;QACA,IAAI,IAAI,MAAJ;QACJ,GAHJ,CADe;;AAMf,WAAO,GAAP,EAAY;AACV,YAAM,IAAI,CAAJ,CAAN,CADU;AAEV,UAAI,eAAe,QAAf,EAAyB;AAC3B,YAAI,OAAO,OAAO,IAAP,CAAY,UAAS,CAAT,EAAY;AACjC,iBAAO,EAAE,MAAF,CAAS,GAAT,CAAP,CADiC;SAAZ,CAAnB,CADuB;AAI3B,YAAI,IAAJ,EAAU;AACR,aAAG,MAAH,CAAU,IAAV,CAAe,GAAf,EAAoB,CAApB,EAAuB,CAAvB,EADQ;SAAV;OAJF,MAOO,IAAI,CAAC,IAAI,OAAJ,CAAY,IAAZ,CAAiB,MAAjB,EAAyB,GAAzB,CAAD,EAAgC;AACzC,WAAG,MAAH,CAAU,IAAV,CAAe,GAAf,EAAoB,CAApB,EAAuB,CAAvB,EADyC;OAApC;KATT;;AAcA,QAAI,OAAO,CAAP,aAAqB,gBAArB,EAAuC;AACzC,WAAK,eAAL,CAAqB,WAArB,EAAkC,OAAO,GAAP,CAAW,UAAS,CAAT,EAAY;AACvD,eAAO,EAAE,GAAF,IAAS,CAAT,CADgD;OAAZ,CAA7C,EADyC;KAA3C,MAIO;AACL,WAAK,eAAL,CAAqB,UAArB,EAAiC,MAAjC,EADK;KAJP;;AAQA,SAAK,aAAL,GA5Be;AA6Bf,WAAO,IAAP,CA7Be;GAAX;;;;;;;;;;;;;;AA4CN,UAAQ,SAAS,MAAT,GAAkB;AACxB,QAAI,GAAJ,EAAS,IAAT,EAAe,CAAf,CADwB;;AAGxB,QAAI,UAAU,MAAV,EAAkB;AACpB,aAAO,EAAP,CADoB;AAEpB,WAAK,IAAI,CAAJ,EAAO,IAAI,UAAU,MAAV,EAAkB,EAAE,CAAF,EAAK;AACrC,aAAK,CAAL,IAAU,IAAI,CAAJ,GACJ,UAAU,CAAV,CADI,GAEJ,KAAK,KAAL,CAAW,UAAU,CAAV,CAAX,EAAyB,UAAU,CAAV,KAAgB,IAAI,CAAJ,CAAhB,CAFrB,CAD2B;OAAvC;AAKA,YAAM,GAAG,MAAH,CAAU,KAAV,CAAgB,IAAhB,EAAsB,IAAtB,CAAN,CAPoB;AAQpB,WAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EARoB;AASpB,WAAK,aAAL,GAToB;KAAtB;;AAYA,WAAO,GAAP,CAfwB;GAAlB;;;;;;;;;;;;;;AA8BR,WAAS,YAAW;AAClB,QAAI,SAAS,GAAG,GAAH,CAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,KAAL,EAAY,IAAnC,CAAT,CADc;AAElB,aAAS,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,EAAkC,KAAK,OAAL,CAA3C,CAFkB;AAGlB,OAAG,OAAH,CAAW,KAAX,CAAiB,IAAjB,EAAuB,MAAvB,EAHkB;AAIlB,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAJkB;AAKlB,SAAK,aAAL,GALkB;AAMlB,WAAO,KAAK,MAAL,CANW;GAAX;;;;;;;;;;;;;;AAqBT,QAAM,YAAW;AACf,QAAI,MAAM,GAAG,IAAH,CAAQ,KAAR,CAAc,IAAd,EAAoB,SAApB,CAAN,CADW;AAEf,SAAK,eAAL,CAAqB,MAArB,EAA6B,IAA7B,EAFe;AAGf,SAAK,aAAL,GAHe;AAIf,WAAO,GAAP,CAJe;GAAX;;;;;;;;;;;;;;;;;;;AAwBN,YAAU,SAAS,QAAT,GAAoB;AAC5B,QAAI,SAAS,GAAG,GAAH,CAAO,IAAP,CAAY,SAAZ,EAAuB,KAAK,QAAL,EAAe,IAAtC,CAAT,CADwB;AAE5B,aAAS,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,EAAkC,KAAK,OAAL,CAA3C,CAF4B;AAG5B,QAAI,QAAQ,EAAR,CAHwB;AAI5B,QAAI,OAAO,EAAP,CAJwB;AAK5B,QAAI,OAAO,CAAP,aAAqB,gBAArB,EAAuC;AACzC,aAAO,KAAP,CADyC;KAA3C,MAEO,IAAI,OAAO,CAAP,aAAqB,IAArB,EAA2B;AACpC,aAAO,MAAP,CADoC;KAA/B;;AAIP,WAAO,OAAP,CAAe,UAAS,CAAT,EAAY;AACzB,UAAI,KAAJ,CADyB;AAEzB,cAAQ,IAAR;AACE,aAAK,KAAL;AACE,kBAAQ,KAAK,IAAL,CAAU,UAAS,GAAT,EAAc;AAC9B,mBAAO,IAAI,MAAJ,CAAW,CAAX,CAAP,CAD8B;WAAd,CAAlB,CADF;AAIE,gBAJF;AADF,aAMO,MAAL;AACE,cAAI,MAAM,CAAC,CAAD,CADZ;AAEE,kBAAQ,KAAK,IAAL,CAAU,UAAS,CAAT,EAAY;AAC5B,mBAAO,CAAC,CAAD,KAAO,GAAP,CADqB;WAAZ,CAAlB,CAFF;AAKE,gBALF;AANF;AAaI,kBAAQ,CAAC,KAAK,OAAL,CAAa,CAAb,CAAD,CADV;AAZF,OAFyB;;AAkBzB,UAAI,CAAC,KAAD,EAAQ;AACV,WAAG,IAAH,CAAQ,IAAR,CAAa,IAAb,EAAmB,CAAnB,EADU;AAEV,aAAK,eAAL,CAAqB,WAArB,EAAkC,CAAlC,EAFU;AAGV,aAAK,aAAL,GAHU;AAIV,WAAG,IAAH,CAAQ,IAAR,CAAa,KAAb,EAAoB,CAApB,EAJU;OAAZ;KAlBa,EAwBZ,IAxBH,EAX4B;;AAqC5B,WAAO,KAAP,CArC4B;GAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEV,OAAK,SAAS,GAAT,CAAa,CAAb,EAAgB,GAAhB,EAAqB;AACxB,QAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAR,CADoB;AAExB,YAAQ,KAAK,OAAL,CAAa,MAAb,YAA+B,gBAA/B,GACJ,KADI,GAEJ,KAAK,OAAL,CAAa,MAAb,CAAoB,YAApB,CAAiC,GAAjC,EAAsC,KAAK,OAAL,CAFlC,CAFgB;AAMxB,SAAK,CAAL,IAAU,KAAV,CANwB;AAOxB,SAAK,aAAL,CAAmB,CAAnB,EAPwB;AAQxB,WAAO,IAAP,CARwB;GAArB;;;;;;;;;;;;AAqBL,YAAU,UAAS,OAAT,EAAkB;AAC1B,QAAI,WAAW,QAAQ,UAAR,EAAoB;AACjC,aAAO,KAAK,GAAL,CAAS,UAAS,GAAT,EAAc;AAC5B,eAAO,eAAe,QAAf,GACD,IAAI,QAAJ,CAAa,OAAb,CADC,GAED,GAFC,CADqB;OAAd,CAAhB,CADiC;KAAnC;;AAQA,WAAO,KAAK,KAAL,EAAP,CAT0B;GAAlB;;;;;;;;;;AAoBV,WAAS,YAAW;AAClB,WAAO,KAAK,SAAL,CAAe,IAAf,CAAP,CADkB;GAAX;;;;;;;;;;;;AAcT,WAAS,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC7B,QAAI,eAAe,QAAf,EAAyB;AAC3B,YAAM,IAAI,QAAJ,EAAN,CAD2B;KAA7B;AAGA,SAAK,IAAI,IAAI,CAAJ,EAAO,MAAM,KAAK,MAAL,EAAa,IAAI,GAAJ,EAAS,EAAE,CAAF,EAAK;AAC/C,UAAI,OAAO,KAAK,CAAL,CAAP,EAAgB;AAClB,eAAO,CAAP,CADkB;OAApB;KADF;AAKA,WAAO,CAAC,CAAD,CATsB;GAAtB;CA1rBX;;;;;;;;;;;;AAitBA,cAAc,KAAd,CAAoB,MAApB,GAA6B,cAAc,KAAd,CAAoB,IAApB;;;;;;AAM7B,OAAO,OAAP,GAAiB,UAAU,aAAV","file":"array-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar EmbeddedDocument = require('./embedded');\nvar Document = require('../document');\nvar ObjectId = require('./objectid');\nvar utils = require('../utils');\nvar isMongooseObject = utils.isMongooseObject;\n\n/**\n * Mongoose Array constructor.\n *\n * ####NOTE:\n *\n * _Values always have to be passed to the constructor to initialize, otherwise `MongooseArray#push` will mark the array as modified._\n *\n * @param {Array} values\n * @param {String} path\n * @param {Document} doc parent document\n * @api private\n * @inherits Array\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseArray(values, path, doc) {\n  var arr = [].concat(values);\n  var props = {\n    isMongooseArray: true,\n    validators: [],\n    _path: path,\n    _atomics: {},\n    _schema: void 0\n  };\n  var tmp = {};\n\n  var keysMA = Object.keys(MongooseArray.mixin);\n  for (var i = 0; i < keysMA.length; ++i) {\n    tmp[keysMA[i]] = {enumerable: false, configurable: true, writable: true, value: MongooseArray.mixin[keysMA[i]]};\n  }\n\n  var keysP = Object.keys(props);\n  for (var j = 0; j < keysP.length; ++j) {\n    tmp[keysP[j]] = {enumerable: false, configurable: true, writable: true, value: props[keysP[j]]};\n  }\n\n  Object.defineProperties(arr, tmp);\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n  }\n\n  return arr;\n}\n\nMongooseArray.mixin = {\n\n  /**\n   * Stores a queue of atomic operations to perform\n   *\n   * @property _atomics\n   * @api private\n   */\n\n  _atomics: undefined,\n\n  /**\n   * Parent owner document\n   *\n   * @property _parent\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _parent: undefined,\n\n  /**\n   * Casts a member based on this arrays schema.\n   *\n   * @param {any} value\n   * @return value the casted value\n   * @method _cast\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _cast: function(value) {\n    var owner = this._owner;\n    var populated = false;\n    var Model;\n\n    if (this._parent) {\n      // if a populated array, we must cast to the same model\n      // instance as specified in the original query.\n      if (!owner) {\n        owner = this._owner = this._parent.ownerDocument\n            ? this._parent.ownerDocument()\n            : this._parent;\n      }\n\n      populated = owner.populated(this._path, true);\n    }\n\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options.model;\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) ||\n          value instanceof ObjectId || !utils.isObject(value)) {\n        value = {_id: value};\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      var isDisc = value.schema && value.schema.discriminatorMapping &&\n          value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this._schema.caster.cast(value, this._parent, true);\n    }\n\n    return this._schema.caster.cast(value, this._parent, false);\n  },\n\n  /**\n   * Marks this array as modified.\n   *\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\n   *\n   * @param {EmbeddedDocument} embeddedDoc the embedded doc that invoked this method on the Array\n   * @param {String} embeddedPath the path which changed in the embeddedDoc\n   * @method _markModified\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _markModified: function(elem, embeddedPath) {\n    var parent = this._parent,\n        dirtyPath;\n\n    if (parent) {\n      dirtyPath = this._path;\n\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          dirtyPath = dirtyPath + '.' + this.indexOf(elem) + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n\n      parent.markModified(dirtyPath);\n    }\n\n    return this;\n  },\n\n  /**\n   * Register an atomic operation with the parent.\n   *\n   * @param {Array} op operation\n   * @param {any} val\n   * @method _registerAtomic\n   * @api private\n   * @receiver MongooseArray\n   */\n\n  _registerAtomic: function(op, val) {\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this._atomics = {$set: val};\n      return this;\n    }\n\n    var atomics = this._atomics;\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      var _this = this;\n      this._parent.once('save', function() {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (this._atomics.$set ||\n        Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this._atomics = {$set: this};\n      return this;\n    }\n\n    var selector;\n\n    if (op === '$pullAll' || op === '$pushAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      var pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof EmbeddedDocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(function(v) {\n          return v.toObject({virtuals: false});\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {$in: []});\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n\n    return this;\n  },\n\n  /**\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\n   *\n   * If no atomics exist, we return all array values after conversion.\n   *\n   * @return {Array}\n   * @method $__getAtomics\n   * @memberOf MongooseArray\n   * @api private\n   */\n\n  $__getAtomics: function() {\n    var ret = [];\n    var keys = Object.keys(this._atomics);\n    var i = keys.length;\n\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject({depopulate: 1, transform: false})];\n      return ret;\n    }\n\n    while (i--) {\n      var op = keys[i];\n      var val = this._atomics[op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (isMongooseObject(val)) {\n        val = val.toObject({depopulate: 1, transform: false});\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, {depopulate: 1, transform: false});\n      } else if (val.valueOf) {\n        val = val.valueOf();\n      }\n\n      if (op === '$addToSet') {\n        val = {$each: val};\n      }\n\n      ret.push([op, val]);\n    }\n\n    return ret;\n  },\n\n  /**\n   * Returns the number of pending atomic operations to send to the db for this array.\n   *\n   * @api private\n   * @return {Number}\n   * @method hasAtomics\n   * @receiver MongooseArray\n   */\n\n  hasAtomics: function hasAtomics() {\n    if (!(this._atomics && this._atomics.constructor.name === 'Object')) {\n      return 0;\n    }\n\n    return Object.keys(this._atomics).length;\n  },\n\n  /**\n   * Internal helper for .map()\n   *\n   * @api private\n   * @return {Number}\n   * @method _mapCast\n   * @receiver MongooseArray\n   */\n  _mapCast: function(val, index) {\n    return this._cast(val, this.length + index);\n  },\n\n  /**\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\n   *\n   * @param {Object} [args...]\n   * @api public\n   * @method push\n   * @receiver MongooseArray\n   */\n\n  push: function() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent, undefined,\n        undefined, {skipDocumentArrayCast: true});\n    var ret = [].push.apply(this, values);\n\n    // $pushAll might be fibbed (could be $push). But it makes it easier to\n    // handle what could have been $push, $pushAll combos\n    this._registerAtomic('$pushAll', values);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pushes items to the array non-atomically.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @param {any} [args...]\n   * @api public\n   * @method nonAtomicPush\n   * @receiver MongooseArray\n   */\n\n  nonAtomicPush: function() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    var ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pops the array atomically at most one time per document `save()`.\n   *\n   * #### NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var popped = doc.array.$pop();\n   *      console.log(popped); // 3\n   *      console.log(doc.array); // [1,2]\n   *\n   *      // no affect\n   *      popped = doc.array.$pop();\n   *      console.log(doc.array); // [1,2]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $pop works again\n   *        popped = doc.array.$pop();\n   *        console.log(popped); // 2\n   *        console.log(doc.array); // [1]\n   *      })\n   *\n   * @api public\n   * @method $pop\n   * @memberOf MongooseArray\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   * @method $pop\n   * @receiver MongooseArray\n   */\n\n  $pop: function() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n\n    return [].pop.call(this);\n  },\n\n  /**\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\n   * @api public\n   * @method pop\n   * @receiver MongooseArray\n   */\n\n  pop: function() {\n    var ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Atomically shifts the array at most one time per document `save()`.\n   *\n   * ####NOTE:\n   *\n   * _Calling this mulitple times on an array before saving sends the same command as calling it once._\n   * _This update is implemented using the MongoDB [$pop](http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\n   *\n   *      doc.array = [1,2,3];\n   *\n   *      var shifted = doc.array.$shift();\n   *      console.log(shifted); // 1\n   *      console.log(doc.array); // [2,3]\n   *\n   *      // no affect\n   *      shifted = doc.array.$shift();\n   *      console.log(doc.array); // [2,3]\n   *\n   *      doc.save(function (err) {\n   *        if (err) return handleError(err);\n   *\n   *        // we saved, now $shift works again\n   *        shifted = doc.array.$shift();\n   *        console.log(shifted ); // 2\n   *        console.log(doc.array); // [3]\n   *      })\n   *\n   * @api public\n   * @memberOf MongooseArray\n   * @method $shift\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\n   */\n\n  $shift: function $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n\n    return [].shift.call(this);\n  },\n\n  /**\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Example:\n   *\n   *     doc.array = [2,3];\n   *     var res = doc.array.shift();\n   *     console.log(res) // 2\n   *     console.log(doc.array) // [3]\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method shift\n   * @receiver MongooseArray\n   */\n\n  shift: function() {\n    var ret = [].shift.call(this);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Pulls items from the array atomically. Equality is determined by casting\n   * the provided value to an embedded document and comparing using\n   * [the `Document.equals()` function.](./api.html#document_Document-equals)\n   *\n   * ####Examples:\n   *\n   *     doc.array.pull(ObjectId)\n   *     doc.array.pull({ _id: 'someId' })\n   *     doc.array.pull(36)\n   *     doc.array.pull('tag 1', 'tag 2')\n   *\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\n   *\n   * Or we may passing the _id directly and let mongoose take care of it.\n   *\n   *     doc.subdocs.push({ _id: 4815162342 })\n   *     doc.subdocs.pull(4815162342); // works\n   *\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\n   *\n   * @param {any} [args...]\n   * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n   * @api public\n   * @method pull\n   * @receiver MongooseArray\n   */\n\n  pull: function() {\n    var values = [].map.call(arguments, this._cast, this),\n        cur = this._parent.get(this._path),\n        i = cur.length,\n        mem;\n\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        var some = values.some(function(v) {\n          return v.equals(mem);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n\n    if (values[0] instanceof EmbeddedDocument) {\n      this._registerAtomic('$pullDocs', values.map(function(v) {\n        return v._id || v;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    this._markModified();\n    return this;\n  },\n\n  /**\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method splice\n   * @receiver MongooseArray\n   */\n\n  splice: function splice() {\n    var ret, vals, i;\n\n    if (arguments.length) {\n      vals = [];\n      for (i = 0; i < arguments.length; ++i) {\n        vals[i] = i < 2\n            ? arguments[i]\n            : this._cast(arguments[i], arguments[0] + (i - 2));\n      }\n      ret = [].splice.apply(this, vals);\n      this._registerAtomic('$set', this);\n      this._markModified();\n    }\n\n    return ret;\n  },\n\n  /**\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\n   *\n   * ####Note:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method unshift\n   * @receiver MongooseArray\n   */\n\n  unshift: function() {\n    var values = [].map.call(arguments, this._cast, this);\n    values = this._schema.applySetters(values, this._parent);\n    [].unshift.apply(this, values);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return this.length;\n  },\n\n  /**\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\n   *\n   * ####NOTE:\n   *\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\n   *\n   * @api public\n   * @method sort\n   * @receiver MongooseArray\n   */\n\n  sort: function() {\n    var ret = [].sort.apply(this, arguments);\n    this._registerAtomic('$set', this);\n    this._markModified();\n    return ret;\n  },\n\n  /**\n   * Adds values to the array if not already present.\n   *\n   * ####Example:\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *     var added = doc.array.addToSet(4,5);\n   *     console.log(doc.array) // [2,3,4,5]\n   *     console.log(added)     // [5]\n   *\n   * @param {any} [args...]\n   * @return {Array} the values that were added\n   * @receiver MongooseArray\n   * @api public\n   * @method addToSet\n   */\n\n  addToSet: function addToSet() {\n    var values = [].map.call(arguments, this._mapCast, this);\n    values = this._schema.applySetters(values, this._parent);\n    var added = [];\n    var type = '';\n    if (values[0] instanceof EmbeddedDocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n\n    values.forEach(function(v) {\n      var found;\n      switch (type) {\n        case 'doc':\n          found = this.some(function(doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          var val = +v;\n          found = this.some(function(d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n\n      if (!found) {\n        [].push.call(this, v);\n        this._registerAtomic('$addToSet', v);\n        this._markModified();\n        [].push.call(added, v);\n      }\n    }, this);\n\n    return added;\n  },\n\n  /**\n   * Sets the casted `val` at index `i` and marks the array modified.\n   *\n   * ####Example:\n   *\n   *     // given documents based on the following\n   *     var Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\n   *\n   *     var doc = new Doc({ array: [2,3,4] })\n   *\n   *     console.log(doc.array) // [2,3,4]\n   *\n   *     doc.array.set(1,\"5\");\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\n   *     doc.save() // the change is saved\n   *\n   *     // VS not using array#set\n   *     doc.array[1] = \"5\";\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\n   *     doc.save() // change is not saved\n   *\n   * @return {Array} this\n   * @api public\n   * @method set\n   * @receiver MongooseArray\n   */\n\n  set: function set(i, val) {\n    var value = this._cast(val, i);\n    value = this._schema.caster instanceof EmbeddedDocument ?\n        value :\n        this._schema.caster.applySetters(val, this._parent)\n    ;\n    this[i] = value;\n    this._markModified(i);\n    return this;\n  },\n\n  /**\n   * Returns a native js Array.\n   *\n   * @param {Object} options\n   * @return {Array}\n   * @api public\n   * @method toObject\n   * @receiver MongooseArray\n   */\n\n  toObject: function(options) {\n    if (options && options.depopulate) {\n      return this.map(function(doc) {\n        return doc instanceof Document\n            ? doc.toObject(options)\n            : doc;\n      });\n    }\n\n    return this.slice();\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @api public\n   * @method inspect\n   * @receiver MongooseArray\n   */\n\n  inspect: function() {\n    return JSON.stringify(this);\n  },\n\n  /**\n   * Return the index of `obj` or `-1` if not found.\n   *\n   * @param {Object} obj the item to look for\n   * @return {Number}\n   * @api public\n   * @method indexOf\n   * @receiver MongooseArray\n   */\n\n  indexOf: function indexOf(obj) {\n    if (obj instanceof ObjectId) {\n      obj = obj.toString();\n    }\n    for (var i = 0, len = this.length; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  }\n};\n\n/**\n * Alias of [pull](#types_array_MongooseArray-pull)\n *\n * @see MongooseArray#pull #types_array_MongooseArray-pull\n * @see mongodb http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\n * @api public\n * @memberOf MongooseArray\n * @method remove\n */\n\nMongooseArray.mixin.remove = MongooseArray.mixin.pull;\n\n/*!\n * Module exports.\n */\n\nmodule.exports = exports = MongooseArray;\n"]}