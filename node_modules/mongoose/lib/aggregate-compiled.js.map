{"version":3,"sources":["aggregate.js"],"names":[],"mappings":"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","file":"aggregate-compiled.js","sourcesContent":["/*!\n * Module dependencies\n */\n\nvar util = require('util');\nvar utils = require('./utils');\nvar PromiseProvider = require('./promise_provider');\nvar Query = require('./query');\nvar read = Query.prototype.read;\n\n/**\n * Aggregate constructor used for building aggregation pipelines.\n *\n * ####Example:\n *\n *     new Aggregate();\n *     new Aggregate({ $project: { a: 1, b: 1 } });\n *     new Aggregate({ $project: { a: 1, b: 1 } }, { $skip: 5 });\n *     new Aggregate([{ $project: { a: 1, b: 1 } }, { $skip: 5 }]);\n *\n * Returned when calling Model.aggregate().\n *\n * ####Example:\n *\n *     Model\n *     .aggregate({ $match: { age: { $gte: 21 }}})\n *     .unwind('tags')\n *     .exec(callback)\n *\n * ####Note:\n *\n * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).\n * - Requires MongoDB >= 2.1\n * - Mongoose does **not** cast pipeline stages. `new Aggregate({ $match: { _id: '00000000000000000000000a' } });` will not work unless `_id` is a string in the database. Use `new Aggregate({ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } });` instead.\n *\n * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/\n * @see driver http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\n * @param {Object|Array} [ops] aggregation operator(s) or operator array\n * @api public\n */\n\nfunction Aggregate() {\n  this._pipeline = [];\n  this._model = undefined;\n  this.options = undefined;\n\n  if (arguments.length === 1 && util.isArray(arguments[0])) {\n    this.append.apply(this, arguments[0]);\n  } else {\n    this.append.apply(this, arguments);\n  }\n}\n\n/**\n * Binds this aggregate to a model.\n *\n * @param {Model} model the model to which the aggregate is to be bound\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.model = function(model) {\n  this._model = model;\n  return this;\n};\n\n/**\n * Appends new operators to this aggregate pipeline\n *\n * ####Examples:\n *\n *     aggregate.append({ $project: { field: 1 }}, { $limit: 2 });\n *\n *     // or pass an array\n *     var pipeline = [{ $match: { daw: 'Logic Audio X' }} ];\n *     aggregate.append(pipeline);\n *\n * @param {Object} ops operator(s) to append\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.append = function() {\n  var args = (arguments.length === 1 && util.isArray(arguments[0]))\n      ? arguments[0]\n      : utils.args(arguments);\n\n  if (!args.every(isOperator)) {\n    throw new Error('Arguments must be aggregate pipeline operators');\n  }\n\n  this._pipeline = this._pipeline.concat(args);\n\n  return this;\n};\n\n/**\n * Appends a new $project operator to this aggregate pipeline.\n *\n * Mongoose query [selection syntax](#query_Query-select) is also supported.\n *\n * ####Examples:\n *\n *     // include a, include b, exclude _id\n *     aggregate.project(\"a b -_id\");\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     aggregate.project({a: 1, b: 1, _id: 0});\n *\n *     // reshaping documents\n *     aggregate.project({\n *         newField: '$b.nested'\n *       , plusTen: { $add: ['$val', 10]}\n *       , sub: {\n *            name: '$a'\n *         }\n *     })\n *\n *     // etc\n *     aggregate.project({ salary_k: { $divide: [ \"$salary\", 1000 ] } });\n *\n * @param {Object|String} arg field specification\n * @see projection http://docs.mongodb.org/manual/reference/aggregation/project/\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.project = function(arg) {\n  var fields = {};\n\n  if (typeof arg === 'object' && !util.isArray(arg)) {\n    Object.keys(arg).forEach(function(field) {\n      fields[field] = arg[field];\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      var include = field[0] === '-' ? 0 : 1;\n      if (include === 0) {\n        field = field.substring(1);\n      }\n      fields[field] = include;\n    });\n  } else {\n    throw new Error('Invalid project() argument. Must be string or object');\n  }\n\n  return this.append({$project: fields});\n};\n\n/**\n * Appends a new custom $group operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.group({ _id: \"$department\" });\n *\n * @see $group http://docs.mongodb.org/manual/reference/aggregation/group/\n * @method group\n * @memberOf Aggregate\n * @param {Object} arg $group operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new custom $match operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.match({ department: { $in: [ \"sales\", \"engineering\" } } });\n *\n * @see $match http://docs.mongodb.org/manual/reference/aggregation/match/\n * @method match\n * @memberOf Aggregate\n * @param {Object} arg $match operator contents\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $skip operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.skip(10);\n *\n * @see $skip http://docs.mongodb.org/manual/reference/aggregation/skip/\n * @method skip\n * @memberOf Aggregate\n * @param {Number} num number of records to skip before next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $limit operator to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.limit(10);\n *\n * @see $limit http://docs.mongodb.org/manual/reference/aggregation/limit/\n * @method limit\n * @memberOf Aggregate\n * @param {Number} num maximum number of records to pass to the next stage\n * @return {Aggregate}\n * @api public\n */\n\n/**\n * Appends a new $geoNear operator to this aggregate pipeline.\n *\n * ####NOTE:\n *\n * **MUST** be used as the first operator in the pipeline.\n *\n * ####Examples:\n *\n *     aggregate.near({\n *       near: [40.724, -73.997],\n *       distanceField: \"dist.calculated\", // required\n *       maxDistance: 0.008,\n *       query: { type: \"public\" },\n *       includeLocs: \"dist.location\",\n *       uniqueDocs: true,\n *       num: 5\n *     });\n *\n * @see $geoNear http://docs.mongodb.org/manual/reference/aggregation/geoNear/\n * @method near\n * @memberOf Aggregate\n * @param {Object} parameters\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.near = function(arg) {\n  var op = {};\n  op.$geoNear = arg;\n  return this.append(op);\n};\n\n/*!\n * define methods\n */\n\n'group match skip limit out'.split(' ').forEach(function($operator) {\n  Aggregate.prototype[$operator] = function(arg) {\n    var op = {};\n    op['$' + $operator] = arg;\n    return this.append(op);\n  };\n});\n\n/**\n * Appends new custom $unwind operator(s) to this aggregate pipeline.\n *\n * Note that the `$unwind` operator requires the path name to start with '$'.\n * Mongoose will prepend '$' if the specified field doesn't start '$'.\n *\n * ####Examples:\n *\n *     aggregate.unwind(\"tags\");\n *     aggregate.unwind(\"a\", \"b\", \"c\");\n *\n * @see $unwind http://docs.mongodb.org/manual/reference/aggregation/unwind/\n * @param {String} fields the field(s) to unwind\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.unwind = function() {\n  var args = utils.args(arguments);\n\n  return this.append.apply(this, args.map(function(arg) {\n    return {$unwind: (arg && arg.charAt(0) === '$') ? arg : '$' + arg};\n  }));\n};\n\n/**\n * Appends new custom $lookup operator(s) to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.lookup({ from: 'users', localField: 'userId', foreignField: '_id', as: 'users' });\n *\n * @see $lookup https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\n * @param {Object} options to $lookup as described in the above link\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.lookup = function(options) {\n  return this.append({$lookup: options});\n};\n\n/**\n * Appends new custom $sample operator(s) to this aggregate pipeline.\n *\n * ####Examples:\n *\n *     aggregate.sample(3); // Add a pipeline that picks 3 random documents\n *\n * @see $sample https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\n * @param {Number} size number of random documents to pick\n * @return {Aggregate}\n * @api public\n */\n\nAggregate.prototype.sample = function(size) {\n  return this.append({$sample: {size: size}});\n};\n\n/**\n * Appends a new $sort operator to this aggregate pipeline.\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n *\n * ####Examples:\n *\n *     // these are equivalent\n *     aggregate.sort({ field: 'asc', test: -1 });\n *     aggregate.sort('field -test');\n *\n * @see $sort http://docs.mongodb.org/manual/reference/aggregation/sort/\n * @param {Object|String} arg\n * @return {Aggregate} this\n * @api public\n */\n\nAggregate.prototype.sort = function(arg) {\n  // TODO refactor to reuse the query builder logic\n\n  var sort = {};\n\n  if (arg.constructor.name === 'Object') {\n    var desc = ['desc', 'descending', -1];\n    Object.keys(arg).forEach(function(field) {\n      sort[field] = desc.indexOf(arg[field]) === -1 ? 1 : -1;\n    });\n  } else if (arguments.length === 1 && typeof arg === 'string') {\n    arg.split(/\\s+/).forEach(function(field) {\n      if (!field) {\n        return;\n      }\n      var ascend = field[0] === '-' ? -1 : 1;\n      if (ascend === -1) {\n        field = field.substring(1);\n      }\n      sort[field] = ascend;\n    });\n  } else {\n    throw new TypeError('Invalid sort() argument. Must be a string or object.');\n  }\n\n  return this.append({$sort: sort});\n};\n\n/**\n * Sets the readPreference option for the aggregation query.\n *\n * ####Example:\n *\n *     Model.aggregate(..).read('primaryPreferred').exec(callback)\n *\n * @param {String} pref one of the listed preference options or their aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n */\n\nAggregate.prototype.read = function(pref, tags) {\n  if (!this.options) {\n    this.options = {};\n  }\n  read.call(this, pref, tags);\n  return this;\n};\n\n/**\n * Execute the aggregation with explain\n *\n * ####Example:\n *\n *     Model.aggregate(..).explain(callback)\n *\n * @param {Function} callback\n * @return {Promise}\n */\n\nAggregate.prototype.explain = function(callback) {\n  var _this = this;\n  var Promise = PromiseProvider.get();\n  return new Promise.ES6(function(resolve, reject) {\n    if (!_this._pipeline.length) {\n      var err = new Error('Aggregate has empty pipeline');\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n      return;\n    }\n\n    prepareDiscriminatorPipeline(_this);\n\n    _this._model\n        .collection\n        .aggregate(_this._pipeline, _this.options || {})\n        .explain(function(error, result) {\n          if (error) {\n            if (callback) {\n              callback(error);\n            }\n            reject(error);\n            return;\n          }\n\n          if (callback) {\n            callback(null, result);\n          }\n          resolve(result);\n        });\n  });\n};\n\n/**\n * Sets the allowDiskUse option for the aggregation query (ignored for < 2.6.0)\n *\n * ####Example:\n *\n *     Model.aggregate(..).allowDiskUse(true).exec(callback)\n *\n * @param {Boolean} value Should tell server it can use hard drive to store data during aggregation.\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/reference/command/aggregate/\n */\n\nAggregate.prototype.allowDiskUse = function(value) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.allowDiskUse = value;\n  return this;\n};\n\n/**\n * Sets the cursor option option for the aggregation query (ignored for < 2.6.0).\n * Note the different syntax below: .exec() returns a cursor object, and no callback\n * is necessary.\n *\n * ####Example:\n *\n *     var cursor = Model.aggregate(..).cursor({ batchSize: 1000 }).exec();\n *     cursor.each(function(error, doc) {\n *       // use doc\n *     });\n *\n * @param {Object} options set the cursor batch size\n * @see mongodb http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\n */\n\nAggregate.prototype.cursor = function(options) {\n  if (!this.options) {\n    this.options = {};\n  }\n  this.options.cursor = options || {};\n  return this;\n};\n\n/**\n * Executes the aggregate pipeline on the currently bound Model.\n *\n * ####Example:\n *\n *     aggregate.exec(callback);\n *\n *     // Because a promise is returned, the `callback` is optional.\n *     var promise = aggregate.exec();\n *     promise.then(..);\n *\n * @see Promise #promise_Promise\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nAggregate.prototype.exec = function(callback) {\n  if (!this._model) {\n    throw new Error('Aggregate not bound to any Model');\n  }\n  var _this = this;\n  var Promise = PromiseProvider.get();\n\n  if (this.options && this.options.cursor) {\n    if (this.options.cursor.async) {\n      return new Promise.ES6(function(resolve) {\n        if (!_this._model.collection.buffer) {\n          process.nextTick(function() {\n            var cursor = _this._model.collection.\n            aggregate(_this._pipeline, _this.options || {});\n            resolve(cursor);\n            callback && callback(cursor);\n          });\n          return;\n        }\n        _this._model.collection.emitter.once('queue', function() {\n          var cursor = _this._model.collection.\n          aggregate(_this._pipeline, _this.options || {});\n          resolve(cursor);\n          callback && callback(null, cursor);\n        });\n      });\n    }\n    return this._model.collection.\n      aggregate(this._pipeline, this.options || {});\n  }\n\n  return new Promise.ES6(function(resolve, reject) {\n    if (!_this._pipeline.length) {\n      var err = new Error('Aggregate has empty pipeline');\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n      return;\n    }\n\n    prepareDiscriminatorPipeline(_this);\n\n    _this._model\n        .collection\n        .aggregate(_this._pipeline, _this.options || {}, function(error, result) {\n          if (error) {\n            if (callback) {\n              callback(error);\n            }\n            reject(error);\n            return;\n          }\n\n          if (callback) {\n            callback(null, result);\n          }\n          resolve(result);\n        });\n  });\n};\n\n/*!\n * Helpers\n */\n\n/**\n * Checks whether an object is likely a pipeline operator\n *\n * @param {Object} obj object to check\n * @return {Boolean}\n * @api private\n */\n\nfunction isOperator(obj) {\n  var k;\n\n  if (typeof obj !== 'object') {\n    return false;\n  }\n\n  k = Object.keys(obj);\n\n  return k.length === 1 && k\n          .some(function(key) {\n            return key[0] === '$';\n          });\n}\n\n/*!\n * Adds the appropriate `$match` pipeline step to the top of an aggregate's\n * pipeline, should it's model is a non-root discriminator type. This is\n * analogous to the `prepareDiscriminatorCriteria` function in `lib/query.js`.\n *\n * @param {Aggregate} aggregate Aggregate to prepare\n */\n\nfunction prepareDiscriminatorPipeline(aggregate) {\n  var schema = aggregate._model.schema,\n      discriminatorMapping = schema && schema.discriminatorMapping;\n\n  if (discriminatorMapping && !discriminatorMapping.isRoot) {\n    var originalPipeline = aggregate._pipeline,\n        discriminatorKey = discriminatorMapping.key,\n        discriminatorValue = discriminatorMapping.value;\n\n    // If the first pipeline stage is a match and it doesn't specify a `__t`\n    // key, add the discriminator key to it. This allows for potential\n    // aggregation query optimizations not to be disturbed by this feature.\n    if (originalPipeline[0] && originalPipeline[0].$match && !originalPipeline[0].$match[discriminatorKey]) {\n      originalPipeline[0].$match[discriminatorKey] = discriminatorValue;\n      // `originalPipeline` is a ref, so there's no need for\n      // aggregate._pipeline = originalPipeline\n    } else if (originalPipeline[0] && originalPipeline[0].$geoNear) {\n      originalPipeline[0].$geoNear.query =\n          originalPipeline[0].$geoNear.query || {};\n      originalPipeline[0].$geoNear.query[discriminatorKey] = discriminatorValue;\n    } else {\n      var match = {};\n      match[discriminatorKey] = discriminatorValue;\n      aggregate._pipeline = [{$match: match}].concat(originalPipeline);\n    }\n  }\n}\n\n\n/*!\n * Exports\n */\n\nmodule.exports = Aggregate;\n"]}