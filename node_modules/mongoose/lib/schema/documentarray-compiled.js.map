{"version":3,"sources":["documentarray.js"],"names":[],"mappings":"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","file":"documentarray-compiled.js","sourcesContent":["/* eslint no-empty: 1 */\n\n/*!\n * Module dependencies.\n */\n\nvar ArrayType = require('./array');\nvar CastError = require('../error/cast');\nvar MongooseDocumentArray = require('../types/documentarray');\nvar SchemaType = require('../schematype');\nvar Subdocument = require('../types/embedded');\n\n/**\n * SubdocsArray SchemaType constructor\n *\n * @param {String} key\n * @param {Schema} schema\n * @param {Object} options\n * @inherits SchemaArray\n * @api public\n */\n\nfunction DocumentArray(key, schema, options) {\n  // compile an embedded document for this schema\n  function EmbeddedDocument() {\n    Subdocument.apply(this, arguments);\n  }\n\n  EmbeddedDocument.prototype = Object.create(Subdocument.prototype);\n  EmbeddedDocument.prototype.$__setSchema(schema);\n  EmbeddedDocument.schema = schema;\n\n  // apply methods\n  for (var i in schema.methods) {\n    EmbeddedDocument.prototype[i] = schema.methods[i];\n  }\n\n  // apply statics\n  for (i in schema.statics) {\n    EmbeddedDocument[i] = schema.statics[i];\n  }\n\n  EmbeddedDocument.options = options;\n\n  ArrayType.call(this, key, EmbeddedDocument, options);\n\n  this.schema = schema;\n  var path = this.path;\n  var fn = this.defaultValue;\n\n  this.default(function() {\n    var arr = fn.call(this);\n    if (!Array.isArray(arr)) {\n      arr = [arr];\n    }\n    return new MongooseDocumentArray(arr, path, this);\n  });\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nDocumentArray.schemaName = 'DocumentArray';\n\n/*!\n * Inherits from ArrayType.\n */\nDocumentArray.prototype = Object.create(ArrayType.prototype);\nDocumentArray.prototype.constructor = DocumentArray;\n\n/**\n * Performs local validations first, then validations on each embedded doc\n *\n * @api private\n */\n\nDocumentArray.prototype.doValidate = function(array, fn, scope, options) {\n  SchemaType.prototype.doValidate.call(this, array, function(err) {\n    if (err) {\n      return fn(err);\n    }\n\n    var count = array && array.length;\n    var error;\n\n    if (!count) {\n      return fn();\n    }\n    if (options && options.updateValidator) {\n      return fn();\n    }\n\n    // handle sparse arrays, do not use array.forEach which does not\n    // iterate over sparse elements yet reports array.length including\n    // them :(\n\n    function callback(err) {\n      if (err) {\n        error = err;\n      }\n      --count || fn(error);\n    }\n\n    for (var i = 0, len = count; i < len; ++i) {\n      // sidestep sparse entries\n      var doc = array[i];\n      if (!doc) {\n        --count || fn(error);\n        continue;\n      }\n\n      // HACK: use $__original_validate to avoid promises so bluebird doesn't\n      // complain\n      if (doc.$__original_validate) {\n        doc.$__original_validate({__noPromise: true}, callback);\n      } else {\n        doc.validate({__noPromise: true}, callback);\n      }\n    }\n  }, scope);\n};\n\n/**\n * Performs local validations first, then validations on each embedded doc.\n *\n * ####Note:\n *\n * This method ignores the asynchronous validators.\n *\n * @return {MongooseError|undefined}\n * @api private\n */\n\nDocumentArray.prototype.doValidateSync = function(array, scope) {\n  var schemaTypeError = SchemaType.prototype.doValidateSync.call(this, array, scope);\n  if (schemaTypeError) {\n    return schemaTypeError;\n  }\n\n  var count = array && array.length,\n      resultError = null;\n\n  if (!count) {\n    return;\n  }\n\n  // handle sparse arrays, do not use array.forEach which does not\n  // iterate over sparse elements yet reports array.length including\n  // them :(\n\n  for (var i = 0, len = count; i < len; ++i) {\n    // only first error\n    if (resultError) {\n      break;\n    }\n    // sidestep sparse entries\n    var doc = array[i];\n    if (!doc) {\n      continue;\n    }\n\n    var subdocValidateError = doc.validateSync();\n\n    if (subdocValidateError) {\n      resultError = subdocValidateError;\n    }\n  }\n\n  return resultError;\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} document that triggers the casting\n * @api private\n */\n\nDocumentArray.prototype.cast = function(value, doc, init, prev, options) {\n  var selected,\n      subdoc,\n      i;\n\n  if (!Array.isArray(value)) {\n    // gh-2442 mark whole array as modified if we're initializing a doc from\n    // the db and the path isn't an array in the document\n    if (!!doc && init) {\n      doc.markModified(this.path);\n    }\n    return this.cast([value], doc, init, prev);\n  }\n\n  if (!(value && value.isMongooseDocumentArray) &&\n      (!options || !options.skipDocumentArrayCast)) {\n    value = new MongooseDocumentArray(value, this.path, doc);\n    if (prev && prev._handlers) {\n      for (var key in prev._handlers) {\n        doc.removeListener(key, prev._handlers[key]);\n      }\n    }\n  }\n\n  i = value.length;\n\n  while (i--) {\n    if (!value[i]) {\n      continue;\n    }\n    // Check if the document has a different schema (re gh-3701)\n    if ((value[i] instanceof Subdocument) &&\n        value[i].schema !== this.casterConstructor.schema) {\n      value[i] = value[i].toObject({virtuals: false});\n    }\n    if (!(value[i] instanceof Subdocument) && value[i]) {\n      if (init) {\n        selected || (selected = scopePaths(this, doc.$__.selected, init));\n        subdoc = new this.casterConstructor(null, value, true, selected, i);\n        value[i] = subdoc.init(value[i]);\n      } else {\n        try {\n          subdoc = prev.id(value[i]._id);\n        } catch (e) {\n        }\n\n        if (prev && subdoc) {\n          // handle resetting doc with existing id but differing data\n          // doc.array = [{ doc: 'val' }]\n          subdoc.set(value[i]);\n          // if set() is hooked it will have no return value\n          // see gh-746\n          value[i] = subdoc;\n        } else {\n          try {\n            subdoc = new this.casterConstructor(value[i], value, undefined,\n                undefined, i);\n            // if set() is hooked it will have no return value\n            // see gh-746\n            value[i] = subdoc;\n          } catch (error) {\n            throw new CastError('embedded', value[i], value._path, error);\n          }\n        }\n      }\n    }\n  }\n\n  return value;\n};\n\n/*!\n * Scopes paths selected in a query to this array.\n * Necessary for proper default application of subdocument values.\n *\n * @param {DocumentArray} array - the array to scope `fields` paths\n * @param {Object|undefined} fields - the root fields selected in the query\n * @param {Boolean|undefined} init - if we are being created part of a query result\n */\n\nfunction scopePaths(array, fields, init) {\n  if (!(init && fields)) {\n    return undefined;\n  }\n\n  var path = array.path + '.',\n      keys = Object.keys(fields),\n      i = keys.length,\n      selected = {},\n      hasKeys,\n      key;\n\n  while (i--) {\n    key = keys[i];\n    if (key.indexOf(path) === 0) {\n      hasKeys || (hasKeys = true);\n      selected[key.substring(path.length)] = fields[key];\n    }\n  }\n\n  return hasKeys && selected || undefined;\n}\n\n/*!\n * Module exports.\n */\n\nmodule.exports = DocumentArray;\n"]}