{"version":3,"sources":["string.js"],"names":[],"mappings":"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","file":"string-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar errorMessages = require('../error').messages;\nvar utils = require('../utils');\nvar Document;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = 'opening open closing closed'.split(' ')\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enu = {\n *       values: 'opening open closing closed'.split(' '),\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enu })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = errorMessages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase setter.\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function() {\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase setter.\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function() {\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim setter.\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function() {\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     var minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || errorMessages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     var maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || errorMessages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  var msg = message || errorMessages.String.match;\n\n  var matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    var ret = ((v != null && v !== '')\n        ? regExp.test(v)\n        : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return (value instanceof String || typeof value === 'string') && value.length;\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // If null or undefined\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value !== 'undefined') {\n    // handle documents being passed\n    if (value._id && typeof value._id === 'string') {\n      return value._id;\n    }\n\n    // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n    // **unless** its the default Object.toString, because \"[object Object]\"\n    // doesn't really qualify as useful data\n    if (value.toString && value.toString !== Object.prototype.toString) {\n      return value.toString();\n    }\n  }\n\n  throw new CastError('string', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $all: handleArray,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $options: handleSingle,\n      $regex: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n  return this.cast(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"]}