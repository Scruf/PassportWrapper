{"version":3,"sources":["mixed.js"],"names":[],"mappings":";;;;AAIA,IAAI,aAAa,QAAQ,eAAR,CAAb;AACJ,IAAI,QAAQ,QAAQ,UAAR,CAAR;;;;;;;;;;;AAWJ,SAAS,KAAT,CAAe,IAAf,EAAqB,OAArB,EAA8B;AAC5B,MAAI,WAAW,QAAQ,OAAR,EAAiB;AAC9B,QAAI,MAAM,QAAQ,OAAR,CADoB;AAE9B,QAAI,MAAM,OAAN,CAAc,GAAd,KAAsB,IAAI,MAAJ,KAAe,CAAf,EAAkB;;AAE1C,cAAQ,OAAR,GAAkB,KAAlB,CAF0C;KAA5C,MAGO,IAAI,CAAC,QAAQ,MAAR,IAAkB,MAAM,QAAN,CAAe,GAAf,CAAnB,IAA0C,OAAO,IAAP,CAAY,GAAZ,EAAiB,MAAjB,KAA4B,CAA5B,EAA+B;;AAElF,cAAQ,OAAR,GAAkB,YAAW;AAC3B,eAAO,EAAP,CAD2B;OAAX,CAFgE;KAA7E;GALT;;AAaA,aAAW,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,EAAqC,OAArC,EAd4B;CAA9B;;;;;;;;AAuBA,MAAM,UAAN,GAAmB,OAAnB;;;;;AAKA,MAAM,SAAN,GAAkB,OAAO,MAAP,CAAc,WAAW,SAAX,CAAhC;AACA,MAAM,SAAN,CAAgB,WAAhB,GAA8B,KAA9B;;;;;;;;;;;AAWA,MAAM,SAAN,CAAgB,IAAhB,GAAuB,UAAS,GAAT,EAAc;AACnC,SAAO,GAAP,CADmC;CAAd;;;;;;;;;;AAYvB,MAAM,SAAN,CAAgB,YAAhB,GAA+B,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AAClD,MAAI,UAAU,MAAV,KAAqB,CAArB,EAAwB;AAC1B,WAAO,GAAP,CAD0B;GAA5B;AAGA,SAAO,KAAP,CAJkD;CAArB;;;;;;AAW/B,OAAO,OAAP,GAAiB,KAAjB","file":"mixed-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    var def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nMixed.schemaName = 'Mixed';\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n"]}