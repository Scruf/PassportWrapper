{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar Schema = require('./schema'),\n    SchemaType = require('./schematype'),\n    VirtualType = require('./virtualtype'),\n    STATES = require('./connectionstate'),\n    Types = require('./types'),\n    Query = require('./query'),\n    Model = require('./model'),\n    Document = require('./document'),\n    utils = require('./utils'),\n    format = utils.toCollectionName,\n    pkg = require('../package.json');\n\nvar querystring = require('querystring');\n\nvar Aggregate = require('./aggregate');\nvar PromiseProvider = require('./promise_provider');\n\n/**\n * Mongoose constructor.\n *\n * The exports object of the `mongoose` module is an instance of this class.\n * Most apps will only use this one instance.\n *\n * @api public\n */\n\nfunction Mongoose() {\n  this.connections = [];\n  this.plugins = [];\n  this.models = {};\n  this.modelSchemas = {};\n  // default global options\n  this.options = {\n    pluralization: true\n  };\n  var conn = this.createConnection(); // default connection\n  conn.models = this.models;\n}\n\n/**\n * Expose connection states for user-land\n *\n */\nMongoose.prototype.STATES = STATES;\n\n/**\n * Sets mongoose options\n *\n * ####Example:\n *\n *     mongoose.set('test', value) // sets the 'test' option to `value`\n *\n *     mongoose.set('debug', true) // enable logging collection methods + arguments to the console\n *\n *     mongoose.set('debug', function(collectionName, methodName, arg1, arg2...) {}); // use custom function to log collection methods + arguments\n *\n * @param {String} key\n * @param {String|Function} value\n * @api public\n */\n\nMongoose.prototype.set = function(key, value) {\n  if (arguments.length === 1) {\n    return this.options[key];\n  }\n\n  this.options[key] = value;\n  return this;\n};\nMongoose.prototype.set.$hasSideEffects = true;\n\n/**\n * Gets mongoose options\n *\n * ####Example:\n *\n *     mongoose.get('test') // returns the 'test' value\n *\n * @param {String} key\n * @method get\n * @api public\n */\n\nMongoose.prototype.get = Mongoose.prototype.set;\n\n/*!\n * ReplSet connection string check.\n */\n\nvar rgxReplSet = /^.+,.+$/;\n\n/**\n * Checks if ?replicaSet query parameter is specified in URI\n *\n * ####Example:\n *\n *     checkReplicaSetInUri('localhost:27000?replicaSet=rs0'); // true\n *\n * @param {String} uri\n * @return {boolean}\n * @api private\n */\n\nvar checkReplicaSetInUri = function(uri) {\n  if (!uri) {\n    return false;\n  }\n\n  var queryStringStart = uri.indexOf('?');\n  var isReplicaSet = false;\n  if (queryStringStart !== -1) {\n    try {\n      var obj = querystring.parse(uri.substr(queryStringStart + 1));\n      if (obj && obj.replicaSet) {\n        isReplicaSet = true;\n      }\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return isReplicaSet;\n};\n\n/**\n * Creates a Connection instance.\n *\n * Each `connection` instance maps to a single database. This method is helpful when mangaging multiple db connections.\n *\n * If arguments are passed, they are proxied to either [Connection#open](#connection_Connection-open) or [Connection#openSet](#connection_Connection-openSet) appropriately. This means we can pass `db`, `server`, and `replset` options to the driver. _Note that the `safe` option specified in your schema will overwrite the `safe` db option specified here unless you set your schemas `safe` option to `undefined`. See [this](/docs/guide.html#safe) for more information._\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     // with mongodb:// URI\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database');\n *\n *     // and options\n *     var opts = { db: { native_parser: true }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port/database', opts);\n *\n *     // replica sets\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database');\n *\n *     // and options\n *     var opts = { replset: { strategy: 'ping', rs_name: 'testSet' }}\n *     db = mongoose.createConnection('mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database', opts);\n *\n *     // with [host, database_name[, port] signature\n *     db = mongoose.createConnection('localhost', 'database', port)\n *\n *     // and options\n *     var opts = { server: { auto_reconnect: false }, user: 'username', pass: 'mypassword' }\n *     db = mongoose.createConnection('localhost', 'database', port, opts)\n *\n *     // initialize now, connect later\n *     db = mongoose.createConnection();\n *     db.open('localhost', 'database', port, [opts]);\n *\n * @param {String} [uri] a mongodb:// URI\n * @param {Object} [options] options to pass to the driver\n * @param {Object} [options.config] mongoose-specific options\n * @param {Boolean} [options.config.autoIndex] set to false to disable automatic index creation for all models associated with this connection.\n * @see Connection#open #connection_Connection-open\n * @see Connection#openSet #connection_Connection-openSet\n * @return {Connection} the created Connection object\n * @api public\n */\n\nMongoose.prototype.createConnection = function(uri, options) {\n  var conn = new Connection(this);\n  this.connections.push(conn);\n\n  if (arguments.length) {\n    if (rgxReplSet.test(arguments[0]) || checkReplicaSetInUri(arguments[0])) {\n      conn.openSet.apply(conn, arguments);\n    } else if (options && options.replset &&\n        (options.replset.replicaSet || options.replset.rs_name)) {\n      conn.openSet.apply(conn, arguments);\n    } else {\n      conn.open.apply(conn, arguments);\n    }\n  }\n\n  return conn;\n};\nMongoose.prototype.createConnection.$hasSideEffects = true;\n\n/**\n * Opens the default mongoose connection.\n *\n * If arguments are passed, they are proxied to either\n * [Connection#open](#connection_Connection-open) or\n * [Connection#openSet](#connection_Connection-openSet) appropriately.\n *\n * _Options passed take precedence over options included in connection strings._\n *\n * ####Example:\n *\n *     mongoose.connect('mongodb://user:pass@localhost:port/database');\n *\n *     // replica sets\n *     var uri = 'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase';\n *     mongoose.connect(uri);\n *\n *     // with options\n *     mongoose.connect(uri, options);\n *\n *     // connecting to multiple mongos\n *     var uri = 'mongodb://hostA:27501,hostB:27501';\n *     var opts = { mongos: true };\n *     mongoose.connect(uri, opts);\n *\n *     // optional callback that gets fired when initial connection completed\n *     var uri = 'mongodb://nonexistent.domain:27000';\n *     mongoose.connect(uri, function(error) {\n *       // if error is truthy, the initial connection failed.\n *     })\n *\n * @param {String} uri(s)\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see Mongoose#createConnection #index_Mongoose-createConnection\n * @api public\n * @return {MongooseThenable} pseudo-promise wrapper around this\n */\n\nMongoose.prototype.connect = function() {\n  var conn = this.connection;\n  if (rgxReplSet.test(arguments[0]) || checkReplicaSetInUri(arguments[0])) {\n    return new MongooseThenable(this, conn.openSet.apply(conn, arguments));\n  }\n\n  return new MongooseThenable(this, conn.open.apply(conn, arguments));\n};\nMongoose.prototype.connect.$hasSideEffects = true;\n\n/**\n * Disconnects all connections.\n *\n * @param {Function} [fn] called after all connection close.\n * @return {MongooseThenable} pseudo-promise wrapper around this\n * @api public\n */\n\nMongoose.prototype.disconnect = function(fn) {\n  var error;\n  this.connections.forEach(function(conn) {\n    conn.close(function(err) {\n      if (error) {\n        return;\n      }\n      if (err) {\n        error = err;\n      }\n    });\n  });\n\n  var Promise = PromiseProvider.get();\n  return new MongooseThenable(this, new Promise.ES6(function(resolve, reject) {\n    fn && fn(error);\n    if (error) {\n      reject(error);\n      return;\n    }\n    resolve();\n  }));\n};\nMongoose.prototype.disconnect.$hasSideEffects = true;\n\n/**\n * Defines a model or retrieves it.\n *\n * Models defined on the `mongoose` instance are available to all connection created by the same `mongoose` instance.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *\n *     // define an Actor model with this mongoose instance\n *     mongoose.model('Actor', new Schema({ name: String }));\n *\n *     // create a new connection\n *     var conn = mongoose.createConnection(..);\n *\n *     // retrieve the Actor model\n *     var Actor = conn.model('Actor');\n *\n * _When no `collection` argument is passed, Mongoose produces a collection name by passing the model `name` to the [utils.toCollectionName](#utils_exports.toCollectionName) method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option._\n *\n * ####Example:\n *\n *     var schema = new Schema({ name: String }, { collection: 'actor' });\n *\n *     // or\n *\n *     schema.set('collection', 'actor');\n *\n *     // or\n *\n *     var collectionName = 'actor'\n *     var M = mongoose.model('Actor', schema, collectionName)\n *\n * @param {String} name model name\n * @param {Schema} [schema]\n * @param {String} [collection] name (optional, induced from model name)\n * @param {Boolean} [skipInit] whether to skip initialization (defaults to false)\n * @api public\n */\n\nMongoose.prototype.model = function(name, schema, collection, skipInit) {\n  if (typeof schema === 'string') {\n    collection = schema;\n    schema = false;\n  }\n\n  if (utils.isObject(schema) && !(schema.instanceOfSchema)) {\n    schema = new Schema(schema);\n  }\n\n  if (typeof collection === 'boolean') {\n    skipInit = collection;\n    collection = null;\n  }\n\n  // handle internal options from connection.model()\n  var options;\n  if (skipInit && utils.isObject(skipInit)) {\n    options = skipInit;\n    skipInit = true;\n  } else {\n    options = {};\n  }\n\n  // look up schema for the collection.\n  if (!this.modelSchemas[name]) {\n    if (schema) {\n      // cache it so we only apply plugins once\n      this.modelSchemas[name] = schema;\n      this._applyPlugins(schema);\n    } else {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  var model;\n  var sub;\n\n  // connection.model() may be passing a different schema for\n  // an existing model name. in this case don't read from cache.\n  if (this.models[name] && options.cache !== false) {\n    if (schema && schema.instanceOfSchema && schema !== this.models[name].schema) {\n      throw new mongoose.Error.OverwriteModelError(name);\n    }\n\n    if (collection) {\n      // subclass current model with alternate collection\n      model = this.models[name];\n      schema = model.prototype.schema;\n      sub = model.__subclass(this.connection, schema, collection);\n      // do not cache the sub model\n      return sub;\n    }\n\n    return this.models[name];\n  }\n\n  // ensure a schema exists\n  if (!schema) {\n    schema = this.modelSchemas[name];\n    if (!schema) {\n      throw new mongoose.Error.MissingSchemaError(name);\n    }\n  }\n\n  // Apply relevant \"global\" options to the schema\n  if (!('pluralization' in schema.options)) schema.options.pluralization = this.options.pluralization;\n\n\n  if (!collection) {\n    collection = schema.get('collection') || format(name, schema.options);\n  }\n\n  var connection = options.connection || this.connection;\n  model = Model.compile(name, schema, collection, connection, this);\n\n  if (!skipInit) {\n    model.init();\n  }\n\n  if (options.cache === false) {\n    return model;\n  }\n\n  this.models[name] = model;\n  return this.models[name];\n};\nMongoose.prototype.model.$hasSideEffects = true;\n\n/**\n * Returns an array of model names created on this instance of Mongoose.\n *\n * ####Note:\n *\n * _Does not include names of models created using `connection.model()`._\n *\n * @api public\n * @return {Array}\n */\n\nMongoose.prototype.modelNames = function() {\n  var names = Object.keys(this.models);\n  return names;\n};\nMongoose.prototype.modelNames.$hasSideEffects = true;\n\n/**\n * Applies global plugins to `schema`.\n *\n * @param {Schema} schema\n * @api private\n */\n\nMongoose.prototype._applyPlugins = function(schema) {\n  for (var i = 0, l = this.plugins.length; i < l; i++) {\n    schema.plugin(this.plugins[i][0], this.plugins[i][1]);\n  }\n};\nMongoose.prototype._applyPlugins.$hasSideEffects = true;\n\n/**\n * Declares a global plugin executed on all Schemas.\n *\n * Equivalent to calling `.plugin(fn)` on each Schema you create.\n *\n * @param {Function} fn plugin callback\n * @param {Object} [opts] optional options\n * @return {Mongoose} this\n * @see plugins ./plugins.html\n * @api public\n */\n\nMongoose.prototype.plugin = function(fn, opts) {\n  this.plugins.push([fn, opts]);\n  return this;\n};\nMongoose.prototype.plugin.$hasSideEffects = true;\n\n/**\n * The default connection of the mongoose module.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     mongoose.connect(...);\n *     mongoose.connection.on('error', cb);\n *\n * This is the connection used by default for every model created using [mongoose.model](#index_Mongoose-model).\n *\n * @property connection\n * @return {Connection}\n * @api public\n */\n\nMongoose.prototype.__defineGetter__('connection', function() {\n  return this.connections[0];\n});\n\nMongoose.prototype.__defineSetter__('connection', function(v) {\n  this.connections[0] = v;\n});\n\n/*!\n * Driver depentend APIs\n */\n\nvar driver = global.MONGOOSE_DRIVER_PATH || './drivers/node-mongodb-native';\n\n/*!\n * Connection\n */\n\nvar Connection = require(driver + '/connection');\n\n/*!\n * Collection\n */\n\nvar Collection = require(driver + '/collection');\n\n/**\n * The Mongoose Aggregate constructor\n *\n * @method Aggregate\n * @api public\n */\n\nMongoose.prototype.Aggregate = Aggregate;\n\n/**\n * The Mongoose Collection constructor\n *\n * @method Collection\n * @api public\n */\n\nMongoose.prototype.Collection = Collection;\n\n/**\n * The Mongoose [Connection](#connection_Connection) constructor\n *\n * @method Connection\n * @api public\n */\n\nMongoose.prototype.Connection = Connection;\n\n/**\n * The Mongoose version\n *\n * @property version\n * @api public\n */\n\nMongoose.prototype.version = pkg.version;\n\n/**\n * The Mongoose constructor\n *\n * The exports of the mongoose module is an instance of this class.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var mongoose2 = new mongoose.Mongoose();\n *\n * @method Mongoose\n * @api public\n */\n\nMongoose.prototype.Mongoose = Mongoose;\n\n/**\n * The Mongoose [Schema](#schema_Schema) constructor\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var Schema = mongoose.Schema;\n *     var CatSchema = new Schema(..);\n *\n * @method Schema\n * @api public\n */\n\nMongoose.prototype.Schema = Schema;\n\n/**\n * The Mongoose [SchemaType](#schematype_SchemaType) constructor\n *\n * @method SchemaType\n * @api public\n */\n\nMongoose.prototype.SchemaType = SchemaType;\n\n/**\n * The various Mongoose SchemaTypes.\n *\n * ####Note:\n *\n * _Alias of mongoose.Schema.Types for backwards compatibility._\n *\n * @property SchemaTypes\n * @see Schema.SchemaTypes #schema_Schema.Types\n * @api public\n */\n\nMongoose.prototype.SchemaTypes = Schema.Types;\n\n/**\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\n *\n * @method VirtualType\n * @api public\n */\n\nMongoose.prototype.VirtualType = VirtualType;\n\n/**\n * The various Mongoose Types.\n *\n * ####Example:\n *\n *     var mongoose = require('mongoose');\n *     var array = mongoose.Types.Array;\n *\n * ####Types:\n *\n * - [ObjectId](#types-objectid-js)\n * - [Buffer](#types-buffer-js)\n * - [SubDocument](#types-embedded-js)\n * - [Array](#types-array-js)\n * - [DocumentArray](#types-documentarray-js)\n *\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\n *\n *     var ObjectId = mongoose.Types.ObjectId;\n *     var id1 = new ObjectId;\n *\n * @property Types\n * @api public\n */\n\nMongoose.prototype.Types = Types;\n\n/**\n * The Mongoose [Query](#query_Query) constructor.\n *\n * @method Query\n * @api public\n */\n\nMongoose.prototype.Query = Query;\n\n/**\n * The Mongoose [Promise](#promise_Promise) constructor.\n *\n * @method Promise\n * @api public\n */\n\nObject.defineProperty(Mongoose.prototype, 'Promise', {\n  get: function() {\n    return PromiseProvider.get();\n  },\n  set: function(lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\n * Storage layer for mongoose promises\n *\n * @method PromiseProvider\n * @api public\n */\n\nMongoose.prototype.PromiseProvider = PromiseProvider;\n\n/**\n * The Mongoose [Model](#model_Model) constructor.\n *\n * @method Model\n * @api public\n */\n\nMongoose.prototype.Model = Model;\n\n/**\n * The Mongoose [Document](#document-js) constructor.\n *\n * @method Document\n * @api public\n */\n\nMongoose.prototype.Document = Document;\n\n/**\n * The Mongoose DocumentProvider constructor.\n *\n * @method DocumentProvider\n * @api public\n */\n\nMongoose.prototype.DocumentProvider = require('./document_provider');\n\n/**\n * The [MongooseError](#error_MongooseError) constructor.\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.Error = require('./error');\n\n/**\n * The Mongoose CastError constructor\n *\n * @method Error\n * @api public\n */\n\nMongoose.prototype.CastError = require('./error/cast');\n\n/**\n * The [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) driver Mongoose uses.\n *\n * @property mongo\n * @api public\n */\n\nMongoose.prototype.mongo = require('mongodb');\n\n/**\n * The [mquery](https://github.com/aheckmann/mquery) query builder Mongoose uses.\n *\n * @property mquery\n * @api public\n */\n\nMongoose.prototype.mquery = require('mquery');\n\n/**\n * Wraps the given Mongoose instance into a thenable (pseudo-promise). This\n * is so `connect()` and `disconnect()` can return a thenable while maintaining\n * backwards compatibility.\n *\n * @api private\n */\n\nfunction MongooseThenable(mongoose, promise) {\n  var _this = this;\n  for (var key in mongoose) {\n    if (typeof mongoose[key] === 'function' && mongoose[key].$hasSideEffects) {\n      (function(key) {\n        _this[key] = function() {\n          return mongoose[key].apply(mongoose, arguments);\n        };\n      })(key);\n    } else if (['connection', 'connections'].indexOf(key) !== -1) {\n      _this[key] = mongoose[key];\n    }\n  }\n  this.$opPromise = promise;\n}\n\nMongooseThenable.prototype = new Mongoose;\n\n/**\n * Ability to use mongoose object as a pseudo-promise so `.connect().then()`\n * and `.disconnect().then()` are viable.\n *\n * @param {Function} onFulfilled\n * @param {Function} onRejected\n * @return {Promise}\n * @api private\n */\n\nMongooseThenable.prototype.then = function(onFulfilled, onRejected) {\n  var Promise = PromiseProvider.get();\n  if (!this.$opPromise) {\n    return new Promise.ES6(function(resolve, reject) {\n      reject(new Error('Can only call `.then()` if connect() or disconnect() ' +\n        'has been called'));\n    }).then(onFulfilled, onRejected);\n  }\n  return this.$opPromise.then(onFulfilled, onRejected);\n};\n\n/**\n * Ability to use mongoose object as a pseudo-promise so `.connect().then()`\n * and `.disconnect().then()` are viable.\n *\n * @param {Function} onFulfilled\n * @param {Function} onRejected\n * @return {Promise}\n * @api private\n */\n\nMongooseThenable.prototype.catch = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\n/*!\n * The exports object is an instance of Mongoose.\n *\n * @api public\n */\n\nvar mongoose = module.exports = exports = new Mongoose;\n"]}