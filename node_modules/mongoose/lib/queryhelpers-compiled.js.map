{"version":3,"sources":["queryhelpers.js"],"names":[],"mappings":";;;;;AAKA,IAAI,QAAQ,QAAQ,SAAR,CAAR;;;;;;;;;;AAUJ,QAAQ,wBAAR,GAAmC,SAAS,wBAAT,CAAkC,KAAlC,EAAyC,OAAzC,EAAkD;AACnF,MAAI,MAAM,MAAM,MAAN,CAAa,IAAb,CAAkB,MAAM,OAAN,CAAc,QAAd,CAAxB;;;AAD+E,MAI/E,QAAQ,IAAR,EAAc,IAAI,OAAJ,CAAY,QAAZ,EAAlB;;AAEA,SAAO,GAAP,CANmF;CAAlD;;;;;;;;;;;AAkBnC,QAAQ,0BAAR,GAAqC,SAAS,0BAAT,CAAoC,KAApC,EAA2C,OAA3C,EAAoD;AACvF,MAAI,MAAM,MAAM,MAAN,CAAa,IAAb,CAAkB,MAAM,gBAAN,CAAuB,QAAvB,CAAxB;;;AADmF,MAInF,QAAQ,IAAR,EAAc,IAAI,OAAJ,CAAY,QAAZ,EAAlB;;AAEA,SAAO,GAAP,CANuF;CAApD;;;;;;;;;;;;AAmBrC,QAAQ,WAAR,GAAsB,SAAS,WAAT,CAAqB,KAArB,EAA4B,GAA5B,EAAiC,MAAjC,EAAyC;AAC7D,MAAI,uBAAuB,MAAM,MAAN,GACvB,MAAM,MAAN,CAAa,oBAAb,GACA,IAFuB,CADkC;;AAK7D,MAAI,MAAM,wBAAwB,qBAAqB,MAArB,GAC9B,qBAAqB,GAArB,GACA,IAFM,CALmD;;AAS7D,MAAI,OAAO,IAAI,GAAJ,CAAP,IAAmB,MAAM,cAAN,IAAwB,MAAM,cAAN,CAAqB,IAAI,GAAJ,CAArB,CAA3C,EAA2E;AAC7E,WAAO,IAAI,MAAM,cAAN,CAAqB,IAAI,GAAJ,CAArB,CAAJ,CAAmC,SAAnC,EAA8C,MAA9C,EAAsD,IAAtD,CAAP,CAD6E;GAA/E;;AAIA,SAAO,IAAI,KAAJ,CAAU,SAAV,EAAqB,MAArB,EAA6B,IAA7B,CAAP,CAb6D;CAAzC;;;;;;;;AAsBtB,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,SAAO,OAAP,KAAmB,OAAO,OAAP,GAAiB,EAAjB,CAAnB,CADwB;AAExB,SAAO,OAAP,CAAe,IAAf,GAAsB,IAAtB,CAFwB;CAA1B","file":"queryhelpers-compiled.js","sourcesContent":["\n/*!\n * Module dependencies\n */\n\nvar utils = require('./utils');\n\n/*!\n * Prepare a set of path options for query population.\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptions = function preparePopulationOptions(query, options) {\n  var pop = utils.object.vals(query.options.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) pop.forEach(makeLean);\n\n  return pop;\n};\n\n/*!\n * Prepare a set of path options for query population. This is the MongooseQuery\n * version\n *\n * @param {Query} query\n * @param {Object} options\n * @return {Array}\n */\n\nexports.preparePopulationOptionsMQ = function preparePopulationOptionsMQ(query, options) {\n  var pop = utils.object.vals(query._mongooseOptions.populate);\n\n  // lean options should trickle through all queries\n  if (options.lean) pop.forEach(makeLean);\n\n  return pop;\n};\n\n/*!\n * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,\n * it returns an instance of the given model.\n *\n * @param {Model}  model\n * @param {Object} doc\n * @param {Object} fields\n *\n * @return {Model}\n */\nexports.createModel = function createModel(model, doc, fields) {\n  var discriminatorMapping = model.schema\n    ? model.schema.discriminatorMapping\n    : null;\n\n  var key = discriminatorMapping && discriminatorMapping.isRoot\n    ? discriminatorMapping.key\n    : null;\n\n  if (key && doc[key] && model.discriminators && model.discriminators[doc[key]]) {\n    return new model.discriminators[doc[key]](undefined, fields, true);\n  }\n\n  return new model(undefined, fields, true);\n};\n\n/*!\n * Set each path query option to lean\n *\n * @param {Object} option\n */\n\nfunction makeLean(option) {\n  option.options || (option.options = {});\n  option.options.lean = true;\n}\n"]}