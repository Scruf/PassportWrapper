{"version":3,"sources":["query.js"],"names":[],"mappings":"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","file":"query-compiled.js","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar mquery = require('mquery');\nvar util = require('util');\nvar readPref = require('./drivers').ReadPreference;\nvar PromiseProvider = require('./promise_provider');\nvar updateValidators = require('./services/updateValidators');\nvar utils = require('./utils');\nvar helpers = require('./queryhelpers');\nvar QueryStream = require('./querystream');\nvar StrictModeError = require('./error/strict');\nvar cast = require('./cast');\n\n/**\n * Query constructor used for building queries.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.setOptions({ lean : true });\n *     query.collection(model.collection);\n *     query.where('age').gte(21).exec(callback);\n *\n * @param {Object} [options]\n * @param {Object} [model]\n * @param {Object} [conditions]\n * @param {Object} [collection] Mongoose collection\n * @api private\n */\n\nfunction Query(conditions, options, model, collection) {\n  // this stuff is for dealing with custom queries created by #toConstructor\n  if (!this._mongooseOptions) {\n    this._mongooseOptions = {};\n  }\n\n  // this is the case where we have a CustomQuery, we need to check if we got\n  // options passed in, and if we did, merge them in\n  if (options) {\n    var keys = Object.keys(options);\n    for (var i = 0; i < keys.length; ++i) {\n      var k = keys[i];\n      this._mongooseOptions[k] = options[k];\n    }\n  }\n\n  if (collection) {\n    this.mongooseCollection = collection;\n  }\n\n  if (model) {\n    this.model = model;\n    this.schema = model.schema;\n  }\n\n  // this is needed because map reduce returns a model that can be queried, but\n  // all of the queries on said model should be lean\n  if (this.model && this.model._mapreduce) {\n    this.lean();\n  }\n\n  // inherit mquery\n  mquery.call(this, this.mongooseCollection, options);\n\n  if (conditions) {\n    this.find(conditions);\n  }\n\n  if (this.schema) {\n    this._count = this.model.hooks.createWrapper('count',\n        Query.prototype._count, this);\n    this._execUpdate = this.model.hooks.createWrapper('update',\n        Query.prototype._execUpdate, this);\n    this._find = this.model.hooks.createWrapper('find',\n        Query.prototype._find, this);\n    this._findOne = this.model.hooks.createWrapper('findOne',\n        Query.prototype._findOne, this);\n    this._findOneAndRemove = this.model.hooks.createWrapper('findOneAndRemove',\n        Query.prototype._findOneAndRemove, this);\n    this._findOneAndUpdate = this.model.hooks.createWrapper('findOneAndUpdate',\n        Query.prototype._findOneAndUpdate, this);\n  }\n}\n\n/*!\n * inherit mquery\n */\n\nQuery.prototype = new mquery;\nQuery.prototype.constructor = Query;\nQuery.base = mquery.prototype;\n\n/**\n * Flag to opt out of using `$geoWithin`.\n *\n *     mongoose.Query.use$geoWithin = false;\n *\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\n *\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @default true\n * @property use$geoWithin\n * @memberOf Query\n * @receiver Query\n * @api public\n */\n\nQuery.use$geoWithin = mquery.use$geoWithin;\n\n/**\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\n *\n * ####Example\n *\n *     // Create a query for adventure movies and read from the primary\n *     // node in the replica-set unless it is down, in which case we'll\n *     // read from a secondary node.\n *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\n *\n *     // create a custom Query constructor based off these settings\n *     var Adventure = query.toConstructor();\n *\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\n *     // default query parameters and options set.\n *     Adventure().exec(callback)\n *\n *     // further narrow down our query results while still using the previous settings\n *     Adventure().where({ name: /^Life/ }).exec(callback);\n *\n *     // since Adventure is a stand-alone constructor we can also add our own\n *     // helper methods and getters without impacting global queries\n *     Adventure.prototype.startsWith = function (prefix) {\n *       this.where({ name: new RegExp('^' + prefix) })\n *       return this;\n *     }\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\n *       get: function () {\n *         this.where({ rating: { $gt: 4.5 }});\n *         return this;\n *       }\n *     })\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\n *\n * New in 3.7.3\n *\n * @return {Query} subclass-of-Query\n * @api public\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  var CustomQuery = function(criteria, options) {\n    if (!(this instanceof CustomQuery)) {\n      return new CustomQuery(criteria, options);\n    }\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\n    Query.call(this, criteria, options || null);\n  };\n\n  util.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  var p = CustomQuery.prototype;\n\n  p.options = {};\n\n  p.setOptions(this.options);\n\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p.model = this.model;\n  p.mongooseCollection = this.mongooseCollection;\n  p._mongooseOptions = this._mongooseOptions;\n\n  return CustomQuery;\n};\n\n/**\n * Specifies a javascript function or expression to pass to MongoDBs query system.\n *\n * ####Example\n *\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\n *\n *     // or\n *\n *     query.$where(function () {\n *       return this.comments.length === 10 || this.name.length === 5;\n *     })\n *\n * ####NOTE:\n *\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\n *\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\n * @method $where\n * @param {String|Function} js javascript string or function\n * @return {Query} this\n * @memberOf Query\n * @method $where\n * @api public\n */\n\n/**\n * Specifies a `path` for use with chaining.\n *\n * ####Example\n *\n *     // instead of writing:\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\n *\n *     // we can instead write:\n *     User.where('age').gte(21).lte(65);\n *\n *     // passing query conditions is permitted\n *     User.find().where({ name: 'vonderful' })\n *\n *     // chaining\n *     User\n *     .where('age').gte(21).lte(65)\n *     .where('name', /^vonderful/i)\n *     .where('friends').slice(10)\n *     .exec(callback)\n *\n * @method where\n * @memberOf Query\n * @param {String|Object} [path]\n * @param {any} [val]\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies the complementary comparison value for paths specified with `where()`\n *\n * ####Example\n *\n *     User.where('age').equals(49);\n *\n *     // is the same as\n *\n *     User.where('age', 49);\n *\n * @method equals\n * @memberOf Query\n * @param {Object} val\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for an `$or` condition.\n *\n * ####Example\n *\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\n *\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\n * @method or\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$nor` condition.\n *\n * ####Example\n *\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\n *\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\n * @method nor\n * @memberOf Query\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies arguments for a `$and` condition.\n *\n * ####Example\n *\n *     query.and([{ color: 'green' }, { status: 'ok' }])\n *\n * @method and\n * @memberOf Query\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\n * @param {Array} array array of conditions\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $gt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     Thing.find().where('age').gt(21)\n *\n *     // or\n *     Thing.find().gt('age', 21)\n *\n * @method gt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\n * @api public\n */\n\n/**\n * Specifies a $gte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method gte\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\n * @api public\n */\n\n/**\n * Specifies a $lt query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lt\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\n * @api public\n */\n\n/**\n * Specifies a $lte query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @method lte\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $ne query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\n * @method ne\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $in query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\n * @method in\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $nin query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\n * @method nin\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies an $all query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\n * @method all\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $size query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * ####Example\n *\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\n *       if (err) return handleError(err);\n *\n *       assert(Array.isArray(docs));\n *       console.log('documents with 0 tags', docs);\n *     })\n *\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\n * @method size\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $regex query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\n * @method regex\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a $maxDistance query condition.\n *\n * When called with one argument, the most recent path passed to `where()` is used.\n *\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @method maxDistance\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies a `$mod` condition\n *\n * @method mod\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\n * @api public\n */\n\n/**\n * Specifies an `$exists` condition\n *\n * ####Example\n *\n *     // { name: { $exists: true }}\n *     Thing.where('name').exists()\n *     Thing.where('name').exists(true)\n *     Thing.find().exists('name')\n *\n *     // { name: { $exists: false }}\n *     Thing.where('name').exists(false);\n *     Thing.find().exists('name', false);\n *\n * @method exists\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val\n * @return {Query} this\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\n * @api public\n */\n\n/**\n * Specifies an `$elemMatch` condition\n *\n * ####Example\n *\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\n *\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\n *\n *     query.elemMatch('comment', function (elem) {\n *       elem.where('author').equals('autobot');\n *       elem.where('votes').gte(5);\n *     })\n *\n *     query.where('comment').elemMatch(function (elem) {\n *       elem.where({ author: 'autobot' });\n *       elem.where('votes').gte(5);\n *     })\n *\n * @method elemMatch\n * @memberOf Query\n * @param {String|Object|Function} path\n * @param {Object|Function} criteria\n * @return {Query} this\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\n * @api public\n */\n\n/**\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\n *\n * ####Example\n *\n *     query.where(path).within().box()\n *     query.where(path).within().circle()\n *     query.where(path).within().geometry()\n *\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\n *\n *     query.where('loc').within([], [], []) // polygon\n *     query.where('loc').within([], []) // box\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method within\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @memberOf Query\n * @return {Query} this\n * @api public\n */\n\n/**\n * Specifies a $slice projection for an array.\n *\n * ####Example\n *\n *     query.slice('comments', 5)\n *     query.slice('comments', -5)\n *     query.slice('comments', [10, 5])\n *     query.where('comments').slice(5)\n *     query.where('comments').slice([-10, 5])\n *\n * @method slice\n * @memberOf Query\n * @param {String} [path]\n * @param {Number} val number/range of elements to slice\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\n * @api public\n */\n\n/**\n * Specifies the maximum number of documents the query will return.\n *\n * ####Example\n *\n *     query.limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method limit\n * @memberOf Query\n * @param {Number} val\n * @api public\n */\n\n/**\n * Specifies the number of documents to skip.\n *\n * ####Example\n *\n *     query.skip(100).limit(20)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method skip\n * @memberOf Query\n * @param {Number} val\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\n * @api public\n */\n\n/**\n * Specifies the maxScan option.\n *\n * ####Example\n *\n *     query.maxScan(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method maxScan\n * @memberOf Query\n * @param {Number} val\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\n * @api public\n */\n\n/**\n * Specifies the batchSize option.\n *\n * ####Example\n *\n *     query.batchSize(100)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method batchSize\n * @memberOf Query\n * @param {Number} val\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\n * @api public\n */\n\n/**\n * Specifies the `comment` option.\n *\n * ####Example\n *\n *     query.comment('login query')\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method comment\n * @memberOf Query\n * @param {Number} val\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\n * @api public\n */\n\n/**\n * Specifies this query as a `snapshot` query.\n *\n * ####Example\n *\n *     query.snapshot() // true\n *     query.snapshot(true)\n *     query.snapshot(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method snapshot\n * @memberOf Query\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\n * @return {Query} this\n * @api public\n */\n\n/**\n * Sets query hints.\n *\n * ####Example\n *\n *     query.hint({ indexA: 1, indexB: -1})\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @method hint\n * @memberOf Query\n * @param {Object} val a hint object\n * @return {Query} this\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\n * @api public\n */\n\n/**\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\n *\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\n *\n * ####Example\n *\n *     // include a and b, exclude other fields\n *     query.select('a b');\n *\n *     // exclude c and d, include other fields\n *     query.select('-c -d');\n *\n *     // or you may use object notation, useful when\n *     // you have keys already prefixed with a \"-\"\n *     query.select({ a: 1, b: 1 });\n *     query.select({ c: 0, d: 0 });\n *\n *     // force inclusion of field excluded at schema level\n *     query.select('+path')\n *\n * ####NOTE:\n *\n * Cannot be used with `distinct()`.\n *\n * _v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3._\n *\n * @method select\n * @memberOf Query\n * @param {Object|String} arg\n * @return {Query} this\n * @see SchemaType\n * @api public\n */\n\n/**\n * _DEPRECATED_ Sets the slaveOk option.\n *\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\n *\n * ####Example:\n *\n *     query.slaveOk() // true\n *     query.slaveOk(true)\n *     query.slaveOk(false)\n *\n * @method slaveOk\n * @memberOf Query\n * @deprecated use read() preferences instead if on mongodb >= 2.2\n * @param {Boolean} v defaults to true\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\n * @see read() #query_Query-read\n * @return {Query} this\n * @api public\n */\n\n/**\n * Determines the MongoDB nodes from which to read.\n *\n * ####Preferences:\n *\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n *     secondary            Read from secondary if available, otherwise error.\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n *\n * Aliases\n *\n *     p   primary\n *     pp  primaryPreferred\n *     s   secondary\n *     sp  secondaryPreferred\n *     n   nearest\n *\n * ####Example:\n *\n *     new Query().read('primary')\n *     new Query().read('p')  // same as primary\n *\n *     new Query().read('primaryPreferred')\n *     new Query().read('pp') // same as primaryPreferred\n *\n *     new Query().read('secondary')\n *     new Query().read('s')  // same as secondary\n *\n *     new Query().read('secondaryPreferred')\n *     new Query().read('sp') // same as secondaryPreferred\n *\n *     new Query().read('nearest')\n *     new Query().read('n')  // same as nearest\n *\n *     // read from secondaries with matching tags\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\n *\n * Read more about how to use read preferrences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n *\n * @method read\n * @memberOf Query\n * @param {String} pref one of the listed preference options or aliases\n * @param {Array} [tags] optional tags for this query\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.read = function read(pref, tags) {\n  // first cast into a ReadPreference object to support tags\n  var read = readPref.call(readPref, pref, tags);\n  return Query.base.read.call(this, read);\n};\n\n/**\n * Merges another Query or conditions object into this one.\n *\n * When a Query is passed, conditions, field selection and options are merged.\n *\n * New in 3.7.0\n *\n * @method merge\n * @memberOf Query\n * @param {Query|Object} source\n * @return {Query} this\n */\n\n/**\n * Sets query options.\n *\n * ####Options:\n *\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan) *\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference) **\n * - [lean](./api.html#query_Query-lean) *\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\n *\n * _* denotes a query helper method is also available_\n * _** query helper method to set `readPreference` is `read()`_\n *\n * @param {Object} options\n * @api public\n */\n\nQuery.prototype.setOptions = function(options, overwrite) {\n  // overwrite is only for internal use\n  if (overwrite) {\n    // ensure that _mongooseOptions & options are two different objects\n    this._mongooseOptions = (options && utils.clone(options)) || {};\n    this.options = options || {};\n\n    if ('populate' in options) {\n      this.populate(this._mongooseOptions);\n    }\n    return this;\n  }\n\n  if (!(options && options.constructor.name === 'Object')) {\n    return this;\n  }\n\n  return Query.base.setOptions.call(this, options);\n};\n\n/**\n * Returns the current query conditions as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.find({ a: 1 }).where('b').gt(2);\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\n *\n * @return {Object} current query conditions\n * @api public\n */\n\nQuery.prototype.getQuery = function() {\n  return this._conditions;\n};\n\n/**\n * Returns the current update operations as a JSON object.\n *\n * ####Example:\n *\n *     var query = new Query();\n *     query.update({}, { $set: { a: 5 } });\n *     query.getUpdate(); // { $set: { a: 5 } }\n *\n * @return {Object} current update operations\n * @api public\n */\n\nQuery.prototype.getUpdate = function() {\n  return this._update;\n};\n\n/**\n * Returns fields selection for this query.\n *\n * @method _fieldsForExec\n * @return {Object}\n * @api private\n * @receiver Query\n */\n\n/**\n * Return an update document with corrected $set operations.\n *\n * @method _updateForExec\n * @api private\n * @receiver Query\n */\n\n/**\n * Makes sure _path is set.\n *\n * @method _ensurePath\n * @param {String} method\n * @api private\n * @receiver Query\n */\n\n/**\n * Determines if `conds` can be merged using `mquery().merge()`\n *\n * @method canMerge\n * @memberOf Query\n * @param {Object} conds\n * @return {Boolean}\n * @api private\n */\n\n/**\n * Returns default options for this query.\n *\n * @param {Model} model\n * @api private\n */\n\nQuery.prototype._optionsForExec = function(model) {\n  var options = Query.base._optionsForExec.call(this);\n\n  delete options.populate;\n  model = model || this.model;\n\n  if (!model) {\n    return options;\n  }\n\n  if (!('safe' in options) && model.schema.options.safe) {\n    options.safe = model.schema.options.safe;\n  }\n\n  if (!('readPreference' in options) && model.schema.options.read) {\n    options.readPreference = model.schema.options.read;\n  }\n\n  return options;\n};\n\n/**\n * Sets the lean option.\n *\n * Documents returned from queries with the `lean` option enabled are plain javascript objects, not [MongooseDocuments](#document-js). They have no `save` method, getters/setters or other Mongoose magic applied.\n *\n * ####Example:\n *\n *     new Query().lean() // true\n *     new Query().lean(true)\n *     new Query().lean(false)\n *\n *     Model.find().lean().exec(function (err, docs) {\n *       docs[0] instanceof mongoose.Document // false\n *     });\n *\n * This is a [great](https://groups.google.com/forum/#!topic/mongoose-orm/u2_DzDydcnA/discussion) option in high-performance read-only scenarios, especially when combined with [stream](#query_Query-stream).\n *\n * @param {Boolean} bool defaults to true\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.lean = function(v) {\n  this._mongooseOptions.lean = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\n * Thunk around find()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._find = function(callback) {\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var fields = this._fieldsForExec();\n  var options = this._mongooseOptions;\n  var _this = this;\n\n  var cb = function(err, docs) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (docs.length === 0) {\n      return callback(null, docs);\n    }\n\n    if (!options.populate) {\n      return options.lean === true\n          ? callback(null, docs)\n          : completeMany(_this.model, docs, fields, _this, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(docs, pop, function(err, docs) {\n      if (err) return callback(err);\n      return options.lean === true\n          ? callback(null, docs)\n          : completeMany(_this.model, docs, fields, _this, pop, callback);\n    });\n  };\n\n  return Query.base.find.call(this, {}, cb);\n};\n\n/**\n * Finds documents.\n *\n * When no `callback` is passed, the query is not executed. When the query is executed, the result will be an array of documents.\n *\n * ####Example\n *\n *     query.find({ name: 'Los Pollos Hermanos' }).find(callback)\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.find = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = {};\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  // if we don't have a callback, then just return the query object\n  if (!callback) {\n    return Query.base.find.call(this);\n  }\n\n  this._find(callback);\n\n  return this;\n};\n\n/*!\n * hydrates many documents\n *\n * @param {Model} model\n * @param {Array} docs\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeMany(model, docs, fields, self, pop, callback) {\n  var arr = [];\n  var count = docs.length;\n  var len = count;\n  var opts = pop ?\n  {populated: pop}\n      : undefined;\n  function init(err) {\n    if (err) return callback(err);\n    --count || callback(null, arr);\n  }\n  for (var i = 0; i < len; ++i) {\n    arr[i] = helpers.createModel(model, docs[i], fields);\n    arr[i].init(docs[i], opts, init);\n  }\n}\n\n/**\n * Thunk around findOne()\n *\n * @param {Function} [callback]\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @api private\n */\n\nQuery.prototype._findOne = function(callback) {\n  if (this._castError) {\n    return callback(this._castError);\n  }\n\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n\n  var options = this._mongooseOptions;\n  var projection = this._fieldsForExec();\n  var _this = this;\n\n  // don't pass in the conditions because we already merged them in\n  Query.base.findOne.call(_this, {}, function(err, doc) {\n    if (err) {\n      return callback(err);\n    }\n    if (!doc) {\n      return callback(null, null);\n    }\n\n    if (!options.populate) {\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, null, projection, _this, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, null, projection, _this, pop, callback);\n    });\n  });\n};\n\n/**\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\n *\n * Passing a `callback` executes the query. The result of the query is a single document.\n *\n * ####Example\n *\n *     var query  = Kitten.where({ color: 'white' });\n *     query.findOne(function (err, kitten) {\n *       if (err) return handleError(err);\n *       if (kitten) {\n *         // doc may be null if no document matched\n *       }\n *     });\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Object} [projection] optional fields to return\n * @param {Function} [callback]\n * @return {Query} this\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\n * @see Query.select #query_Query-select\n * @api public\n */\n\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = null;\n    projection = null;\n    options = null;\n  } else if (typeof projection === 'function') {\n    callback = projection;\n    options = null;\n    projection = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  this.op = 'findOne';\n\n  if (options) {\n    this.setOptions(options);\n  }\n\n  if (projection) {\n    this.select(projection);\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  prepareDiscriminatorCriteria(this);\n\n  try {\n    this.cast(this.model);\n    this._castError = null;\n  } catch (err) {\n    this._castError = err;\n  }\n\n  if (!callback) {\n    // already merged in the conditions, don't need to send them in.\n    return Query.base.findOne.call(this);\n  }\n\n  this._findOne(callback);\n\n  return this;\n};\n\n/**\n * Thunk around count()\n *\n * @param {Function} [callback]\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api private\n */\n\nQuery.prototype._count = function(callback) {\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    process.nextTick(function() {\n      callback(err);\n    });\n    return this;\n  }\n\n  var conds = this._conditions;\n  var options = this._optionsForExec();\n\n  this._collection.count(conds, options, utils.tick(callback));\n};\n\n/**\n * Specifying this query as a `count` query.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example:\n *\n *     var countQuery = model.where({ 'color': 'black' }).count();\n *\n *     query.count({ color: 'black' }).count(callback)\n *\n *     query.count({ color: 'black' }, callback)\n *\n *     query.where('color', 'black').count(function (err, count) {\n *       if (err) return handleError(err);\n *       console.log('there are %d kittens', count);\n *     })\n *\n * @param {Object} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\n * @api public\n */\n\nQuery.prototype.count = function(conditions, callback) {\n  if (typeof conditions === 'function') {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  this.op = 'count';\n  if (!callback) {\n    return this;\n  }\n\n  this._count(callback);\n\n  return this;\n};\n\n/**\n * Declares or executes a distict() operation.\n *\n * Passing a `callback` executes the query.\n *\n * ####Example\n *\n *     distinct(field, conditions, callback)\n *     distinct(field, conditions)\n *     distinct(field, callback)\n *     distinct(field)\n *     distinct(callback)\n *     distinct()\n *\n * @param {String} [field]\n * @param {Object|Query} [criteria]\n * @param {Function} [callback]\n * @return {Query} this\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\n * @api public\n */\n\nQuery.prototype.distinct = function(field, conditions, callback) {\n  if (!callback) {\n    if (typeof conditions === 'function') {\n      callback = conditions;\n      conditions = undefined;\n    } else if (typeof field === 'function') {\n      callback = field;\n      field = undefined;\n      conditions = undefined;\n    }\n  }\n\n  conditions = utils.toObject(conditions);\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (!callback) {\n      throw err;\n    }\n    callback(err);\n    return this;\n  }\n\n  return Query.base.distinct.call(this, {}, field, callback);\n};\n\n/**\n * Sets the sort order\n *\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n *\n * If a string is passed, it must be a space delimited list of path names. The\n * sort order of each path is ascending unless the path name is prefixed with `-`\n * which will be treated as descending.\n *\n * ####Example\n *\n *     // sort by \"field\" ascending and \"test\" descending\n *     query.sort({ field: 'asc', test: -1 });\n *\n *     // equivalent\n *     query.sort('field -test');\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Object|String} arg\n * @return {Query} this\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\n * @api public\n */\n\nQuery.prototype.sort = function(arg) {\n  var nArg = {};\n\n  if (arguments.length > 1) {\n    throw new Error('sort() only takes 1 Argument');\n  }\n\n  if (Array.isArray(arg)) {\n    // time to deal with the terrible syntax\n    for (var i = 0; i < arg.length; i++) {\n      if (!Array.isArray(arg[i])) throw new Error('Invalid sort() argument.');\n      nArg[arg[i][0]] = arg[i][1];\n    }\n  } else {\n    nArg = arg;\n  }\n\n  return Query.base.sort.call(this, nArg);\n};\n\n/**\n * Declare and/or execute this query as a remove() operation.\n *\n * ####Example\n *\n *     Model.remove({ artist: 'Anne Murray' }, callback)\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback, you must first call `remove()` and then execute it by using the `exec()` method.\n *\n *     // not executed\n *     var query = Model.find().remove({ name: 'Anne Murray' })\n *\n *     // executed\n *     query.remove({ name: 'Anne Murray' }, callback)\n *     query.remove({ name: 'Anne Murray' }).remove(callback)\n *\n *     // executed without a callback (unsafe write)\n *     query.exec()\n *\n *     // summary\n *     query.remove(conds, fn); // executes\n *     query.remove(conds)\n *     query.remove(fn) // executes\n *     query.remove()\n *\n * @param {Object|Query} [criteria] mongodb selector\n * @param {Function} [callback]\n * @return {Query} this\n * @see remove http://docs.mongodb.org/manual/reference/method/db.collection.remove/\n * @api public\n */\n\nQuery.prototype.remove = function(cond, callback) {\n  if (typeof cond === 'function') {\n    callback = cond;\n    cond = null;\n  }\n\n  var cb = typeof callback === 'function';\n\n  try {\n    this.cast(this.model);\n  } catch (err) {\n    if (cb) return process.nextTick(callback.bind(null, err));\n    return this;\n  }\n\n  return Query.base.remove.call(this, cond, callback);\n};\n\n/*!\n * hydrates a document\n *\n * @param {Model} model\n * @param {Document} doc\n * @param {Object} res 3rd parameter to callback\n * @param {Object} fields\n * @param {Query} self\n * @param {Array} [pop] array of paths used in population\n * @param {Function} callback\n */\n\nfunction completeOne(model, doc, res, fields, self, pop, callback) {\n  var opts = pop ?\n  {populated: pop}\n      : undefined;\n\n  var casted = helpers.createModel(model, doc, fields);\n  casted.init(doc, opts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    if (res) {\n      return callback(null, casted, res);\n    }\n    callback(null, casted);\n  });\n}\n\n/*!\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\n */\n\nfunction prepareDiscriminatorCriteria(query) {\n  if (!query || !query.model || !query.model.schema) {\n    return;\n  }\n\n  var schema = query.model.schema;\n\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\n  }\n}\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\n *\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n * - `passRawResult`: if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Callback Signature\n *     function(error, doc) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *     }\n *\n * ####Examples\n *\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\n *     query.findOneAndUpdate(conditions, update, callback) // executes\n *     query.findOneAndUpdate(conditions, update)           // returns Query\n *     query.findOneAndUpdate(update, callback)             // returns Query\n *     query.findOneAndUpdate(update)                       // returns Query\n *     query.findOneAndUpdate(callback)                     // executes\n *     query.findOneAndUpdate()                             // returns Query\n *\n * @method findOneAndUpdate\n * @memberOf Query\n * @param {Object|Query} [query]\n * @param {Object} [doc]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n\n  switch (arguments.length) {\n    case 3:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if (typeof doc === 'function') {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if (typeof criteria === 'function') {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n\n  if (mquery.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  return this._findOneAndUpdate(callback);\n};\n\n/**\n * Thunk around findOneAndUpdate()\n *\n * @param {Function} [callback]\n * @api private\n */\n\nQuery.prototype._findOneAndUpdate = function(callback) {\n  this._findAndModify('update', callback);\n  return this;\n};\n\n/**\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\n *\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\n *\n * ####Available options\n *\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\n * - `passRawResult`: if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *\n * ####Callback Signature\n *     function(error, doc, result) {\n *       // error: any errors that occurred\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n *       // result: [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\n *     }\n *\n * ####Examples\n *\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\n *     A.where().findOneAndRemove(conditions, options)  // return Query\n *     A.where().findOneAndRemove(conditions, callback) // executes\n *     A.where().findOneAndRemove(conditions) // returns Query\n *     A.where().findOneAndRemove(callback)   // executes\n *     A.where().findOneAndRemove()           // returns Query\n *\n * @method findOneAndRemove\n * @memberOf Query\n * @param {Object} [conditions]\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\n * @api public\n */\n\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n\n  switch (arguments.length) {\n    case 2:\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 1:\n      if (typeof conditions === 'function') {\n        callback = conditions;\n        conditions = undefined;\n        options = undefined;\n      }\n      break;\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  options && this.setOptions(options);\n\n  if (!callback) {\n    return this;\n  }\n\n  this._findOneAndRemove(callback);\n\n  return this;\n};\n\n/**\n * Thunk around findOneAndRemove()\n *\n * @param {Function} [callback]\n * @return {Query} this\n * @api private\n */\nQuery.prototype._findOneAndRemove = function(callback) {\n  Query.base.findOneAndRemove.call(this, callback);\n};\n\n/**\n * Override mquery.prototype._findAndModify to provide casting etc.\n *\n * @param {String} type - either \"remove\" or \"update\"\n * @param {Function} callback\n * @api private\n */\n\nQuery.prototype._findAndModify = function(type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('Expected callback in _findAndModify');\n  }\n\n  var model = this.model;\n  var schema = model.schema;\n  var _this = this;\n  var castedQuery;\n  var castedDoc;\n  var fields;\n  var opts;\n  var doValidate;\n\n  castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    return callback(castedQuery);\n  }\n\n  opts = this._optionsForExec(model);\n\n  if ('strict' in opts) {\n    this._mongooseOptions.strict = opts.strict;\n  }\n\n  if (type === 'remove') {\n    opts.remove = true;\n  } else {\n    if (!('new' in opts)) {\n      opts.new = false;\n    }\n    if (!('upsert' in opts)) {\n      opts.upsert = false;\n    }\n    if (opts.upsert || opts['new']) {\n      opts.remove = false;\n    }\n\n    castedDoc = castDoc(this, opts.overwrite);\n    if (!castedDoc) {\n      if (opts.upsert) {\n        // still need to do the upsert to empty doc\n        var doc = utils.clone(castedQuery);\n        delete doc._id;\n        castedDoc = {$set: doc};\n      } else {\n        return this.findOne(callback);\n      }\n    } else if (castedDoc instanceof Error) {\n      return callback(castedDoc);\n    } else {\n      // In order to make MongoDB 2.6 happy (see\n      // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\n      // if we have an actual update document but $set is empty, junk the $set.\n      if (castedDoc.$set && Object.keys(castedDoc.$set).length === 0) {\n        delete castedDoc.$set;\n      }\n    }\n\n    doValidate = updateValidators(this, schema, castedDoc, opts);\n  }\n\n  this._applyPaths();\n\n  var options = this._mongooseOptions;\n\n  if (this._fields) {\n    fields = utils.clone(this._fields);\n    opts.fields = this._castFields(fields);\n    if (opts.fields instanceof Error) {\n      return callback(opts.fields);\n    }\n  }\n\n  if (opts.sort) convertSortToArray(opts);\n\n  var cb = function(err, doc, res) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!doc || (utils.isObject(doc) && Object.keys(doc).length === 0)) {\n      if (opts.passRawResult) {\n        return callback(null, null, res);\n      }\n      return callback(null, null);\n    }\n\n    if (!opts.passRawResult) {\n      res = null;\n    }\n\n    if (!options.populate) {\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, res, fields, _this, null, callback);\n    }\n\n    var pop = helpers.preparePopulationOptionsMQ(_this, options);\n    pop.__noPromise = true;\n    _this.model.populate(doc, pop, function(err, doc) {\n      if (err) {\n        return callback(err);\n      }\n\n      return options.lean === true\n          ? callback(null, doc)\n          : completeOne(_this.model, doc, res, fields, _this, pop, callback);\n    });\n  };\n\n  if ((opts.runValidators || opts.setDefaultsOnInsert) && doValidate) {\n    var _callback = function(error) {\n      if (error) {\n        return callback(error);\n      }\n      _this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n        return cb(error, res ? res.value : res, res);\n      }));\n    };\n\n    try {\n      doValidate(_callback);\n    } catch (error) {\n      callback(error);\n    }\n  } else {\n    this._collection.findAndModify(castedQuery, castedDoc, opts, utils.tick(function(error, res) {\n      return cb(error, res ? res.value : res, res);\n    }));\n  }\n\n  return this;\n};\n\n/**\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\n * updates.\n *\n * @param {Object} doc\n * @api private\n */\n\nQuery.prototype._mergeUpdate = function(doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/*!\n * The mongodb driver 1.3.23 only supports the nested array sort\n * syntax. We must convert it or sorting findAndModify will not work.\n */\n\nfunction convertSortToArray(opts) {\n  if (Array.isArray(opts.sort)) {\n    return;\n  }\n  if (!utils.isObject(opts.sort)) {\n    return;\n  }\n\n  var sort = [];\n\n  for (var key in opts.sort) {\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\n      sort.push([key, opts.sort[key]]);\n    }\n  }\n\n  opts.sort = sort;\n}\n\n/**\n * Internal thunk for .update()\n *\n * @param {Function} callback\n * @see Model.update #model_Model.update\n * @api private\n */\nQuery.prototype._execUpdate = function(callback) {\n  var schema = this.model.schema;\n  var doValidate;\n  var _this;\n\n  var castedQuery = this._conditions;\n  var castedDoc = this._update;\n  var options = this.options;\n\n  if (this._castError) {\n    callback(this._castError);\n    return this;\n  }\n\n  if (this.options.runValidators || this.options.setDefaultsOnInsert) {\n    _this = this;\n    doValidate = updateValidators(this, schema, castedDoc, options);\n    var _callback = function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      Query.base.update.call(_this, castedQuery, castedDoc, options, callback);\n    };\n    try {\n      doValidate(_callback);\n    } catch (err) {\n      process.nextTick(function() {\n        callback(err);\n      });\n    }\n    return this;\n  }\n\n  Query.base.update.call(this, castedQuery, castedDoc, options, callback);\n  return this;\n};\n\n/**\n * Declare and/or execute this query as an update() operation.\n *\n * _All paths passed that are not $atomic operations will become $set ops._\n *\n * ####Example\n *\n *     Model.where({ _id: id }).update({ title: 'words' })\n *\n *     // becomes\n *\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\n *\n * ####Valid options:\n *\n *  - `safe` (boolean) safe mode (defaults to value set in schema (true))\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\n *  - `multi` (boolean) whether multiple documents should be updated (false)\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\n *  - `strict` (boolean) overrides the `strict` option for this update\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\n *\n * ####Note\n *\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\n *\n * ####Note\n *\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\n *\n *     var q = Model.where({ _id: id });\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\n *\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\n *\n *     // keys that are not $atomic ops become $set.\n *     // this executes the same command as the previous example.\n *     q.update({ name: 'bob' }).exec();\n *\n *     // overwriting with empty docs\n *     var q = Model.where({ _id: id }).setOptions({ overwrite: true })\n *     q.update({ }, callback); // executes\n *\n *     // multi update with overwrite to empty doc\n *     var q = Model.where({ _id: id });\n *     q.setOptions({ multi: true, overwrite: true })\n *     q.update({ });\n *     q.update(callback); // executed\n *\n *     // multi updates\n *     Model.where()\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n *\n *     // more multi updates\n *     Model.where()\n *          .setOptions({ multi: true })\n *          .update({ $set: { arr: [] }}, callback)\n *\n *     // single update by default\n *     Model.where({ email: 'address@example.com' })\n *          .update({ $inc: { counter: 1 }}, callback)\n *\n * API summary\n *\n *     update(criteria, doc, options, cb) // executes\n *     update(criteria, doc, options)\n *     update(criteria, doc, cb) // executes\n *     update(criteria, doc)\n *     update(doc, cb) // executes\n *     update(doc)\n *     update(cb) // executes\n *     update(true) // executes (unsafe write)\n *     update()\n *\n * @param {Object} [criteria]\n * @param {Object} [doc] the update command\n * @param {Object} [options]\n * @param {Function} [callback]\n * @return {Query} this\n * @see Model.update #model_Model.update\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\n * @api public\n */\n\nQuery.prototype.update = function(conditions, doc, options, callback) {\n  if (typeof options === 'function') {\n    // .update(conditions, doc, callback)\n    callback = options;\n    options = null;\n  } else if (typeof doc === 'function') {\n    // .update(doc, callback);\n    callback = doc;\n    doc = conditions;\n    conditions = {};\n    options = null;\n  } else if (typeof conditions === 'function') {\n    // .update(callback)\n    callback = conditions;\n    conditions = undefined;\n    doc = undefined;\n    options = undefined;\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\n    // .update(doc)\n    doc = conditions;\n    conditions = undefined;\n    options = undefined;\n    callback = undefined;\n  }\n\n  // make sure we don't send in the whole Document to merge()\n  conditions = utils.toObject(conditions);\n\n  var oldCb = callback;\n  if (oldCb) {\n    if (typeof oldCb === 'function') {\n      callback = function(error, result) {\n        oldCb(error, result ? result.result : {ok: 0, n: 0, nModified: 0});\n      };\n    } else {\n      throw new Error('Invalid callback() argument.');\n    }\n  }\n\n  // strict is an option used in the update checking, make sure it gets set\n  if (options) {\n    if ('strict' in options) {\n      this._mongooseOptions.strict = options.strict;\n    }\n  }\n\n  // if doc is undefined at this point, this means this function is being\n  // executed by exec(not always see below). Grab the update doc from here in\n  // order to validate\n  // This could also be somebody calling update() or update({}). Probably not a\n  // common use case, check for _update to make sure we don't do anything bad\n  if (!doc && this._update) {\n    doc = this._updateForExec();\n  }\n\n  if (mquery.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // validate the selector part of the query\n  var castedQuery = castQuery(this);\n  if (castedQuery instanceof Error) {\n    this._castError = castedQuery;\n    if (callback) {\n      callback(castedQuery);\n      return this;\n    } else if (!options || !options.dontThrowCastError) {\n      throw castedQuery;\n    }\n  }\n\n  // validate the update part of the query\n  var castedDoc;\n  try {\n    var $options = {retainKeyOrder: true};\n    if (options && options.minimize) {\n      $options.minimize = true;\n    }\n    castedDoc = this._castUpdate(utils.clone(doc, $options),\n        options && options.overwrite);\n  } catch (err) {\n    this._castError = castedQuery;\n    if (callback) {\n      callback(err);\n      return this;\n    } else if (!options || !options.dontThrowCastError) {\n      throw err;\n    }\n  }\n\n  if (!castedDoc) {\n    // Make sure promises know that this is still an update, see gh-2796\n    this.op = 'update';\n    callback && callback(null);\n    return this;\n  }\n\n  if (utils.isObject(options)) {\n    this.setOptions(options);\n  }\n\n  if (!this._update) this._update = castedDoc;\n\n  // Hooks\n  if (callback) {\n    return this._execUpdate(callback);\n  }\n\n  return Query.base.update.call(this, castedQuery, castedDoc, options, callback);\n};\n\n/**\n * Executes the query\n *\n * ####Examples:\n *\n *     var promise = query.exec();\n *     var promise = query.exec('update');\n *\n *     query.exec(callback);\n *     query.exec('find', callback);\n *\n * @param {String|Function} [operation]\n * @param {Function} [callback]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  var Promise = PromiseProvider.get();\n  var _this = this;\n\n  if (typeof op === 'function') {\n    callback = op;\n    op = null;\n  } else if (typeof op === 'string') {\n    this.op = op;\n  }\n\n  return new Promise.ES6(function(resolve, reject) {\n    if (!_this.op) {\n      callback && callback(null, undefined);\n      resolve();\n      return;\n    }\n\n    _this[_this.op].call(_this, function(error, res) {\n      if (error) {\n        callback && callback(error);\n        reject(error);\n        return;\n      }\n      callback && callback.apply(null, arguments);\n      resolve(res);\n    });\n  });\n};\n\n/**\n * Executes the query returning a `Promise` which will be\n * resolved with either the doc(s) or rejected with the error.\n *\n * @param {Function} [resolve]\n * @param {Function} [reject]\n * @return {Promise}\n * @api public\n */\n\nQuery.prototype.then = function(resolve, reject) {\n  return this.exec().then(resolve, reject);\n};\n\n/**\n * Finds the schema for `path`. This is different than\n * calling `schema.path` as it also resolves paths with\n * positional selectors (something.$.another.$.path).\n *\n * @param {String} path\n * @api private\n */\n\nQuery.prototype._getSchema = function _getSchema(path) {\n  return this.model._getSchema(path);\n};\n\n/*!\n * These operators require casting docs\n * to real Documents for Update operations.\n */\n\nvar castOps = {\n  $push: 1,\n  $pushAll: 1,\n  $addToSet: 1,\n  $set: 1\n};\n\n/*!\n * These operators should be cast to numbers instead\n * of their path schema type.\n */\n\nvar numberOps = {\n  $pop: 1,\n  $unset: 1,\n  $inc: 1\n};\n\n/**\n * Casts obj for an update command.\n *\n * @param {Object} obj\n * @return {Object} obj after casting its values\n * @api private\n */\n\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\n  if (!obj) {\n    return undefined;\n  }\n\n  var ops = Object.keys(obj);\n  var i = ops.length;\n  var ret = {};\n  var hasKeys;\n  var val;\n  var hasDollarKey = false;\n\n  while (i--) {\n    var op = ops[i];\n    // if overwrite is set, don't do any of the special $set stuff\n    if (op[0] !== '$' && !overwrite) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if (op === '$set') {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n\n  // cast each value\n  i = ops.length;\n\n  // if we get passed {} for the update, we still need to respect that when it\n  // is an overwrite scenario\n  if (overwrite) {\n    hasKeys = true;\n  }\n\n  while (i--) {\n    op = ops[i];\n    val = ret[op];\n    hasDollarKey = hasDollarKey || op.charAt(0) === '$';\n    if (val &&\n        val.constructor.name === 'Object' &&\n        (!overwrite || hasDollarKey)) {\n      hasKeys |= this._walkUpdatePath(val, op);\n    } else if (overwrite && ret.constructor.name === 'Object') {\n      // if we are just using overwrite, cast the query and then we will\n      // *always* return the value, even if it is an empty object. We need to\n      // set hasKeys above because we need to account for the case where the\n      // user passes {} and wants to clobber the whole document\n      // Also, _walkUpdatePath expects an operation, so give it $set since that\n      // is basically what we're doing\n      this._walkUpdatePath(ret, '$set');\n    } else {\n      var msg = 'Invalid atomic update value for ' + op + '. '\n          + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n  }\n\n  return hasKeys && ret;\n};\n\n/**\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Object} obj - part of a query\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} pref - path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nQuery.prototype._walkUpdatePath = function _walkUpdatePath(obj, op, pref) {\n  var prefix = pref ? pref + '.' : '',\n      keys = Object.keys(obj),\n      i = keys.length,\n      hasKeys = false,\n      schema,\n      key,\n      val;\n\n  var useNestedStrict = this.schema.options.useNestedStrict;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (val && val.constructor.name === 'Object') {\n      // watch for embedded doc schemas\n      schema = this._getSchema(prefix + key);\n      if (schema && schema.caster && op in castOps) {\n        // embedded doc schema\n        hasKeys = true;\n\n        if ('$each' in val) {\n          obj[key] = {\n            $each: this._castUpdateVal(schema, val.$each, op)\n          };\n\n          if (val.$slice != null) {\n            obj[key].$slice = val.$slice | 0;\n          }\n\n          if (val.$sort) {\n            obj[key].$sort = val.$sort;\n          }\n\n          if (!!val.$position || val.$position === 0) {\n            obj[key].$position = val.$position;\n          }\n        } else {\n          obj[key] = this._castUpdateVal(schema, val, op);\n        }\n      } else if (op === '$currentDate') {\n        // $currentDate can take an object\n        obj[key] = this._castUpdateVal(schema, val, op);\n        hasKeys = true;\n      } else if (op === '$set' && schema) {\n        obj[key] = this._castUpdateVal(schema, val, op);\n        hasKeys = true;\n      } else {\n        var pathToCheck = (prefix + key);\n        var v = this.model.schema._getPathType(pathToCheck);\n        var _strict = 'strict' in this._mongooseOptions ?\n          this._mongooseOptions.strict :\n          ((useNestedStrict && v.schema) || this.schema).options.strict;\n        if (v.pathType === 'undefined') {\n          if (_strict === 'throw') {\n            throw new StrictModeError(pathToCheck);\n          } else if (_strict) {\n            delete obj[key];\n            continue;\n          }\n        }\n\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= this._walkUpdatePath(val, op, prefix + key) ||\n            (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      var checkPath = (key === '$each' || key === '$or' || key === '$and') ?\n        pref : prefix + key;\n      schema = this._getSchema(checkPath);\n\n      var pathDetails = this.model.schema._getPathType(checkPath);\n      var isStrict = 'strict' in this._mongooseOptions ?\n        this._mongooseOptions.strict :\n        ((useNestedStrict && pathDetails.schema) || this.schema).options.strict;\n\n      var skip = isStrict &&\n          !schema &&\n          !/real|nested/.test(pathDetails.pathType);\n\n      if (skip) {\n        if (isStrict === 'throw') {\n          throw new StrictModeError(prefix + key);\n        } else {\n          delete obj[key];\n        }\n      } else {\n        // gh-1845 temporary fix: ignore $rename. See gh-3027 for tracking\n        // improving this.\n        if (op === '$rename') {\n          hasKeys = true;\n          continue;\n        }\n\n        hasKeys = true;\n        obj[key] = this._castUpdateVal(schema, val, op, key);\n      }\n    }\n  }\n  return hasKeys;\n};\n\n/**\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {Schema} schema\n * @param {Object} val\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} [$conditional]\n * @api private\n */\n\nQuery.prototype._castUpdateVal = function _castUpdateVal(schema, val, op, $conditional) {\n  if (!schema) {\n    // non-existing schema path\n    return op in numberOps\n        ? Number(val)\n        : val;\n  }\n\n  var cond = schema.caster && op in castOps &&\n      (utils.isObject(val) || Array.isArray(val));\n  if (cond) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    var tmp = schema.cast(val);\n    if (Array.isArray(val)) {\n      val = tmp;\n    } else if (schema.caster.$isSingleNested) {\n      val = tmp;\n    } else {\n      val = tmp[0];\n    }\n  }\n\n  if (op in numberOps) {\n    return Number(val);\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return {$type: val.$type};\n    }\n    return Boolean(val);\n  }\n  if (/^\\$/.test($conditional)) {\n    return schema.castForQuery($conditional, val);\n  }\n\n  return schema.castForQuery(val);\n};\n\n/*!\n * castQuery\n * @api private\n */\n\nfunction castQuery(query) {\n  try {\n    return query.cast(query.model);\n  } catch (err) {\n    return err;\n  }\n}\n\n/*!\n * castDoc\n * @api private\n */\n\nfunction castDoc(query, overwrite) {\n  try {\n    return query._castUpdate(query._update, overwrite);\n  } catch (err) {\n    return err;\n  }\n}\n\n/**\n * Specifies paths which should be populated with other documents.\n *\n * ####Example:\n *\n *     Kitten.findOne().populate('owner').exec(function (err, kitten) {\n *       console.log(kitten.owner.name) // Max\n *     })\n *\n *     Kitten.find().populate({\n *         path: 'owner'\n *       , select: 'name'\n *       , match: { color: 'black' }\n *       , options: { sort: { name: -1 }}\n *     }).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n *     // alternatively\n *     Kitten.find().populate('owner', 'name', null, {sort: { name: -1 }}).exec(function (err, kittens) {\n *       console.log(kittens[0].owner.name) // Zoopa\n *     })\n *\n * Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.\n *\n * @param {Object|String} path either the path to populate or an object specifying all parameters\n * @param {Object|String} [select] Field selection for the population query\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\n * @param {Object} [match] Conditions for the population query\n * @param {Object} [options] Options for the population query (sort, etc)\n * @see population ./populate.html\n * @see Query#select #query_Query-select\n * @see Model.populate #model_Model.populate\n * @return {Query} this\n * @api public\n */\n\nQuery.prototype.populate = function() {\n  var res = utils.populate.apply(null, arguments);\n  var opts = this._mongooseOptions;\n\n  if (!utils.isObject(opts.populate)) {\n    opts.populate = {};\n  }\n\n  var pop = opts.populate;\n\n  for (var i = 0; i < res.length; ++i) {\n    var path = res[i].path;\n    if (pop[path] && pop[path].populate && res[i].populate) {\n      res[i].populate = pop[path].populate.concat(res[i].populate);\n    }\n    pop[res[i].path] = res[i];\n  }\n\n  return this;\n};\n\n/**\n * Casts this query to the schema of `model`\n *\n * ####Note\n *\n * If `obj` is present, it is cast instead of this query.\n *\n * @param {Model} model\n * @param {Object} [obj]\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.cast = function(model, obj) {\n  obj || (obj = this._conditions);\n\n  return cast(model.schema, obj);\n};\n\n/**\n * Casts selected field arguments for field selection with mongo 2.2\n *\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\n *\n * @param {Object} fields\n * @see https://github.com/Automattic/mongoose/issues/1091\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\n * @api private\n */\n\nQuery.prototype._castFields = function _castFields(fields) {\n  var selected,\n      elemMatchKeys,\n      keys,\n      key,\n      out,\n      i;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    elemMatchKeys = [];\n    i = keys.length;\n\n    // collect $elemMatch args\n    while (i--) {\n      key = keys[i];\n      if (fields[key].$elemMatch) {\n        selected || (selected = {});\n        selected[key] = fields[key];\n        elemMatchKeys.push(key);\n      }\n    }\n  }\n\n  if (selected) {\n    // they passed $elemMatch, cast em\n    try {\n      out = this.cast(this.model, selected);\n    } catch (err) {\n      return err;\n    }\n\n    // apply the casted field args\n    i = elemMatchKeys.length;\n    while (i--) {\n      key = elemMatchKeys[i];\n      fields[key] = out[key];\n    }\n  }\n\n  return fields;\n};\n\n/**\n * Applies schematype selected options to this query.\n * @api private\n */\n\nQuery.prototype._applyPaths = function applyPaths() {\n  // determine if query is selecting or excluding fields\n\n  var fields = this._fields,\n      exclude,\n      keys,\n      ki;\n\n  if (fields) {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    while (ki--) {\n      if (keys[ki][0] === '+') continue;\n      exclude = fields[keys[ki]] === 0;\n      break;\n    }\n  }\n\n  // if selecting, apply default schematype select:true fields\n  // if excluding, apply schematype select:false fields\n\n  var selected = [],\n      excluded = [],\n      seen = [];\n\n  var analyzePath = function(path, type) {\n    if (typeof type.selected !== 'boolean') return;\n\n    var plusPath = '+' + path;\n    if (fields && plusPath in fields) {\n      // forced inclusion\n      delete fields[plusPath];\n\n      // if there are other fields being included, add this one\n      // if no other included fields, leave this out (implied inclusion)\n      if (exclude === false && keys.length > 1 && !~keys.indexOf(path)) {\n        fields[path] = 1;\n      }\n\n      return;\n    }\n\n    // check for parent exclusions\n    var root = path.split('.')[0];\n    if (~excluded.indexOf(root)) return;\n\n    (type.selected ? selected : excluded).push(path);\n  };\n\n  var analyzeSchema = function(schema, prefix) {\n    prefix || (prefix = '');\n\n    // avoid recursion\n    if (~seen.indexOf(schema)) return;\n    seen.push(schema);\n\n    schema.eachPath(function(path, type) {\n      if (prefix) path = prefix + '.' + path;\n\n      analyzePath(path, type);\n\n      // array of subdocs?\n      if (type.schema) {\n        analyzeSchema(type.schema, path);\n      }\n    });\n  };\n\n  analyzeSchema(this.model.schema);\n\n  switch (exclude) {\n    case true:\n      excluded.length && this.select('-' + excluded.join(' -'));\n      break;\n    case false:\n      if (this.model.schema && this.model.schema.paths['_id'] &&\n          this.model.schema.paths['_id'].options && this.model.schema.paths['_id'].options.select === false) {\n        selected.push('-_id');\n      }\n      selected.length && this.select(selected.join(' '));\n      break;\n    case undefined:\n      // user didn't specify fields, implies returning all fields.\n      // only need to apply excluded fields\n      excluded.length && this.select('-' + excluded.join(' -'));\n      break;\n  }\n  seen = excluded = selected = keys = fields = null;\n};\n\n/**\n * Returns a Node.js 0.8 style [read stream](http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream) interface.\n *\n * ####Example\n *\n *     // follows the nodejs 0.8 stream api\n *     Thing.find({ name: /^hello/ }).stream().pipe(res)\n *\n *     // manual streaming\n *     var stream = Thing.find({ name: /^hello/ }).stream();\n *\n *     stream.on('data', function (doc) {\n *       // do something with the mongoose document\n *     }).on('error', function (err) {\n *       // handle the error\n *     }).on('close', function () {\n *       // the stream is closed\n *     });\n *\n * ####Valid options\n *\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data`.\n *\n * ####Example\n *\n *     // JSON.stringify all documents before emitting\n *     var stream = Thing.find().stream({ transform: JSON.stringify });\n *     stream.pipe(writeStream);\n *\n * @return {QueryStream}\n * @param {Object} [options]\n * @see QueryStream\n * @api public\n */\n\nQuery.prototype.stream = function stream(opts) {\n  this._applyPaths();\n  this._fields = this._castFields(this._fields);\n  return new QueryStream(this, opts);\n};\n\n// the rest of these are basically to support older Mongoose syntax with mquery\n\n/**\n * _DEPRECATED_ Alias of `maxScan`\n *\n * @deprecated\n * @see maxScan #query_Query-maxScan\n * @method maxscan\n * @memberOf Query\n */\n\nQuery.prototype.maxscan = Query.base.maxScan;\n\n/**\n * Sets the tailable option (for use with capped collections).\n *\n * ####Example\n *\n *     query.tailable() // true\n *     query.tailable(true)\n *     query.tailable(false)\n *\n * ####Note\n *\n * Cannot be used with `distinct()`\n *\n * @param {Boolean} bool defaults to true\n * @param {Object} [opts] options to set\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\n * @api public\n */\n\nQuery.prototype.tailable = function(val, opts) {\n  // we need to support the tailable({ awaitdata : true }) as well as the\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\n  if (val && val.constructor.name === 'Object') {\n    opts = val;\n    val = true;\n  }\n\n  if (val === undefined) {\n    val = true;\n  }\n\n  if (opts && typeof opts === 'object') {\n    for (var key in opts) {\n      if (key === 'awaitdata') {\n        // For backwards compatibility\n        this.options[key] = !!opts[key];\n      } else {\n        this.options[key] = opts[key];\n      }\n    }\n  }\n\n  return Query.base.tailable.call(this, val);\n};\n\n/**\n * Declares an intersects query for `geometry()`.\n *\n * ####Example\n *\n *     query.where('path').intersects().geometry({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n *     query.where('path').intersects({\n *         type: 'LineString'\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\n *     })\n *\n * ####NOTE:\n *\n * **MUST** be used after `where()`.\n *\n * ####NOTE:\n *\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\n *\n * @method intersects\n * @memberOf Query\n * @param {Object} [arg]\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\n * @api public\n */\n\n/**\n * Specifies a `$geometry` condition\n *\n * ####Example\n *\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\n *\n *     // or\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\n *\n *     // or\n *     var polyC = [ 0, 0 ]\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\n *\n *     // or\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\n *\n * The argument is assigned to the most recent path passed to `where()`.\n *\n * ####NOTE:\n *\n * `geometry()` **must** come after either `intersects()` or `within()`.\n *\n * The `object` argument must contain `type` and `coordinates` properties.\n * - type {String}\n * - coordinates {Array}\n *\n * @method geometry\n * @memberOf Query\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\n * @return {Query} this\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a `$near` or `$nearSphere` condition\n *\n * These operators return documents sorted by distance.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10] });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\n *\n * @method near\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/*!\n * Overwriting mquery is needed to support a couple different near() forms found in older\n * versions of mongoose\n * near([1,1])\n * near(1,1)\n * near(field, [1,2])\n * near(field, 1, 2)\n * In addition to all of the normal forms supported by mquery\n */\n\nQuery.prototype.near = function() {\n  var params = [];\n  var sphere = this._mongooseOptions.nearSphere;\n\n  // TODO refactor\n\n  if (arguments.length === 1) {\n    if (Array.isArray(arguments[0])) {\n      params.push({center: arguments[0], spherical: sphere});\n    } else if (typeof arguments[0] === 'string') {\n      // just passing a path\n      params.push(arguments[0]);\n    } else if (utils.isObject(arguments[0])) {\n      if (typeof arguments[0].spherical !== 'boolean') {\n        arguments[0].spherical = sphere;\n      }\n      params.push(arguments[0]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\n      params.push({center: [arguments[0], arguments[1]], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\n      params.push(arguments[0]);\n      params.push({center: arguments[1], spherical: sphere});\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\n      params.push(arguments[0]);\n      if (typeof arguments[1].spherical !== 'boolean') {\n        arguments[1].spherical = sphere;\n      }\n      params.push(arguments[1]);\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else if (arguments.length === 3) {\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\n        && typeof arguments[2] === 'number') {\n      params.push(arguments[0]);\n      params.push({center: [arguments[1], arguments[2]], spherical: sphere});\n    } else {\n      throw new TypeError('invalid argument');\n    }\n  } else {\n    throw new TypeError('invalid argument');\n  }\n\n  return Query.base.near.apply(this, params);\n};\n\n/**\n * _DEPRECATED_ Specifies a `$nearSphere` condition\n *\n * ####Example\n *\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\n *\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\n *\n * ####Example\n *\n *     query.where('loc').near({ center: [10, 10], spherical: true });\n *\n * @deprecated\n * @see near() #query_Query-near\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\n */\n\nQuery.prototype.nearSphere = function() {\n  this._mongooseOptions.nearSphere = true;\n  this.near.apply(this, arguments);\n  return this;\n};\n\n/**\n * Specifies a $polygon condition\n *\n * ####Example\n *\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\n *\n * @method polygon\n * @memberOf Query\n * @param {String|Array} [path]\n * @param {Array|Object} [coordinatePairs...]\n * @return {Query} this\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * Specifies a $box condition\n *\n * ####Example\n *\n *     var lowerLeft = [40.73083, -73.99756]\n *     var upperRight= [40.741404,  -73.988135]\n *\n *     query.where('loc').within().box(lowerLeft, upperRight)\n *     query.box({ ll : lowerLeft, ur : upperRight })\n *\n * @method box\n * @memberOf Query\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\n * @see within() Query#within #query_Query-within\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @param {Object} val\n * @param [Array] Upper Right Coords\n * @return {Query} this\n * @api public\n */\n\n/*!\n * this is needed to support the mongoose syntax of:\n * box(field, { ll : [x,y], ur : [x2,y2] })\n * box({ ll : [x,y], ur : [x2,y2] })\n */\n\nQuery.prototype.box = function(ll, ur) {\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\n    ur = ll.ur;\n    ll = ll.ll;\n  }\n  return Query.base.box.call(this, ll, ur);\n};\n\n/**\n * Specifies a $center or $centerSphere condition.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10, unique: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n *     // spherical calculations\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\n *     query.where('loc').within().circle(area)\n *     // alternatively\n *     query.circle('loc', area);\n *\n * New in 3.7.0\n *\n * @method circle\n * @memberOf Query\n * @param {String} [path]\n * @param {Object} area\n * @return {Query} this\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @api public\n */\n\n/**\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * @deprecated\n * @method center\n * @memberOf Query\n * @api public\n */\n\nQuery.prototype.center = Query.base.circle;\n\n/**\n * _DEPRECATED_ Specifies a $centerSphere condition\n *\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\n *\n * ####Example\n *\n *     var area = { center: [50, 50], radius: 10 };\n *     query.where('loc').within().centerSphere(area);\n *\n * @deprecated\n * @param {String} [path]\n * @param {Object} val\n * @return {Query} this\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\n * @api public\n */\n\nQuery.prototype.centerSphere = function() {\n  if (arguments[0] && arguments[0].constructor.name === 'Object') {\n    arguments[0].spherical = true;\n  }\n\n  if (arguments[1] && arguments[1].constructor.name === 'Object') {\n    arguments[1].spherical = true;\n  }\n\n  Query.base.circle.apply(this, arguments);\n};\n\n/**\n * Determines if field selection has been made.\n *\n * @method selected\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Executes this query and returns a promise\n *\n * @method then\n * @memberOf Query\n * @return {Promise}\n * @api public\n */\n\n/**\n * Determines if inclusive field selection has been made.\n *\n *     query.selectedInclusively() // false\n *     query.select('name')\n *     query.selectedInclusively() // true\n *\n * @method selectedInclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/**\n * Determines if exclusive field selection has been made.\n *\n *     query.selectedExclusively() // false\n *     query.select('-name')\n *     query.selectedExclusively() // true\n *     query.selectedInclusively() // false\n *\n * @method selectedExclusively\n * @memberOf Query\n * @return {Boolean}\n * @api public\n */\n\n/*!\n * Export\n */\n\nmodule.exports = Query;\n"]}