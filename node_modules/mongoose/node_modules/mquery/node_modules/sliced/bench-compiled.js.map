{"version":3,"sources":["bench.js"],"names":[],"mappings":"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","file":"bench-compiled.js","sourcesContent":["\nvar sliced = require('./')\nvar Bench = require('benchmark');\nvar s = new Bench.Suite;\nvar slice = [].slice;\n\ns.add('Array.prototype.slice.call', function () {\n  Array.prototype.slice.call(arguments);\n}).add('[].slice.call', function () {\n  [].slice.call(arguments);\n}).add('cached slice.call', function () {\n  slice.call(arguments)\n}).add('sliced', function () {\n  sliced(arguments)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, 1)', function () {\n  Array.prototype.slice.call(arguments, 1);\n}).add('[].slice.call(arguments, 1)', function () {\n  [].slice.call(arguments, 1);\n}).add('cached slice.call(arguments, 1)', function () {\n  slice.call(arguments, 1)\n}).add('sliced(arguments, 1)', function () {\n  sliced(arguments, 1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -1)', function () {\n  Array.prototype.slice.call(arguments, -1);\n}).add('[].slice.call(arguments, -1)', function () {\n  [].slice.call(arguments, -1);\n}).add('cached slice.call(arguments, -1)', function () {\n  slice.call(arguments, -1)\n}).add('sliced(arguments, -1)', function () {\n  sliced(arguments, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -10)', function () {\n  Array.prototype.slice.call(arguments, -2, -10);\n}).add('[].slice.call(arguments, -2, -10)', function () {\n  [].slice.call(arguments, -2, -10);\n}).add('cached slice.call(arguments, -2, -10)', function () {\n  slice.call(arguments, -2, -10)\n}).add('sliced(arguments, -2, -10)', function () {\n  sliced(arguments, -2, -10)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\nvar s = new Bench.Suite;\ns.add('Array.prototype.slice.call(arguments, -2, -1)', function () {\n  Array.prototype.slice.call(arguments, -2, -1);\n}).add('[].slice.call(arguments, -2, -1)', function () {\n  [].slice.call(arguments, -2, -1);\n}).add('cached slice.call(arguments, -2, -1)', function () {\n  slice.call(arguments, -2, -1)\n}).add('sliced(arguments, -2, -1)', function () {\n  sliced(arguments, -2, -1)\n}).on('cycle', function (evt) {\n  console.log(String(evt.target));\n}).on('complete', function () {\n  console.log('fastest is %s', this.filter('fastest').pluck('name'));\n})\n.run();\n\n/**\n * Output:\n *\n * Array.prototype.slice.call x 1,289,592 ops/sec ±2.88% (87 runs sampled)\n * [].slice.call x 1,345,451 ops/sec ±1.68% (97 runs sampled)\n * cached slice.call x 10,719,886 ops/sec ±1.04% (99 runs sampled)\n * sliced x 15,809,545 ops/sec ±1.46% (93 runs sampled)\n * fastest is sliced\n *\n */\n"]}