{"version":3,"sources":["node.js"],"names":[],"mappings":"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","file":"node-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();\n  if (0 === debugColors.length) {\n    return tty.isatty(fd);\n  } else {\n    return '0' !== debugColors\n        && 'no' !== debugColors\n        && 'false' !== debugColors\n        && 'disabled' !== debugColors;\n  }\n}\n\n/**\n * Map %o to `util.inspect()`, since Node doesn't do that out of the box.\n */\n\nvar inspect = (4 === util.inspect.length ?\n  // node <= 0.8.x\n  function (v, colors) {\n    return util.inspect(v, void 0, void 0, colors);\n  } :\n  // node > 0.8.x\n  function (v, colors) {\n    return util.inspect(v, { colors: colors });\n  }\n);\n\nexports.formatters.o = function(v) {\n  return inspect(v, this.useColors)\n    .replace(/\\s*\\n\\s*/g, ' ');\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n  var name = this.namespace;\n\n  if (useColors) {\n    var c = this.color;\n\n    args[0] = '  \\u001b[3' + c + ';1m' + name + ' '\n      + '\\u001b[0m'\n      + args[0] + '\\u001b[3' + c + 'm'\n      + ' +' + exports.humanize(this.diff) + '\\u001b[0m';\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n  return args;\n}\n\n/**\n * Invokes `console.error()` with the specified arguments.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(this, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n"]}