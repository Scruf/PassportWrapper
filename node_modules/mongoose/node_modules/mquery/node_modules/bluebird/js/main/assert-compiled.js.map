{"version":3,"sources":["assert.js"],"names":[],"mappings":"AAAA;;AACA,OAAO,OAAP,GAAiB,YAAW;AAC5B,QAAI,iBAAiB,YAAY;AAC7B,iBAAS,cAAT,CAAwB,CAAxB,EAA2B;AACvB,iBAAK,YAAL,CAAkB,CAAlB,EADuB;AAEvB,iBAAK,OAAL,GAAe,CAAf,CAFuB;AAGvB,iBAAK,IAAL,GAAY,gBAAZ,CAHuB;SAA3B;AAKA,uBAAe,SAAf,GAA2B,IAAI,KAAJ,EAA3B,CAN6B;AAO7B,uBAAe,SAAf,CAAyB,WAAzB,GAAuC,cAAvC,CAP6B;AAQ7B,uBAAe,SAAf,CAAyB,YAAzB,GAAwC,KAAxC,CAR6B;AAS7B,eAAO,cAAP,CAT6B;KAAX,EAAlB,CADwB;;AAa5B,aAAS,SAAT,CAAmB,IAAnB,EAAyB;AACrB,YAAI,SAAS,EAAT,CADiB;AAErB,aAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,EAAE,CAAF,EAAK,OAAO,IAAP,CAAY,QAAQ,CAAR,CAAZ,CAAtC;AACA,eAAO,MAAP,CAHqB;KAAzB;;AAMA,aAAS,YAAT,CAAsB,QAAtB,EAAgC,IAAhC,EAAsC,MAAtC,EAA8C;AAC1C,YAAI;AACA,gBAAI,SAAS,UAAU,IAAV,CAAT,CADJ;AAEA,gBAAI,kBAAkB,MAAlB,CAFJ;AAGA,4BAAgB,IAAhB,CAAqB,YACb,QADa,GACF,GADE,GACG,OAAO,IAAP,CAAY,GAAZ,CADH,GACsB,IADtB,CAArB,CAHA;AAKA,gBAAI,KAAK,SAAS,KAAT,CAAe,IAAf,EAAqB,eAArB,CAAL,CALJ;AAMA,mBAAO,GAAG,KAAH,CAAS,IAAT,EAAe,IAAf,CAAP,CANA;SAAJ,CAOE,OAAO,CAAP,EAAU;AACR,gBAAI,EAAE,aAAa,WAAb,CAAF,EAA6B;AAC7B,sBAAM,CAAN,CAD6B;aAAjC,MAEO;AACH,uBAAO,MAAP,CADG;aAFP;SADF;KARN;;AAiBA,WAAO,SAAS,MAAT,CAAgB,QAAhB,EAA0B,OAA1B,EAAmC;AACtC,YAAI,aAAa,IAAb,EAAmB,OAAvB;;AAEA,YAAI,OAAO,QAAP,KAAoB,QAApB,IACA,SAAS,MAAT,CAAgB,CAAhB,MAAuB,GAAvB,EAA4B;AAC5B,gBAAI,iBAAiB,QAAjB,CADwB;AAE5B,gBAAI,QAAQ,UAAU,MAAV,CAFgB,IAEK,OAAO,IAAI,KAAJ,CAAU,QAAQ,CAAR,CAAjB,CAFL,KAEsC,IAAI,MAAM,CAAN,EAAS,MAAM,KAAN,EAAa,EAAE,GAAF,EAAO;AAAC,qBAAK,MAAM,CAAN,CAAL,GAAgB,UAAU,GAAV,CAAhB,CAAD;aAArC;AAC9D,gBAAI,aAAa,cAAb,EAA6B,IAA7B,EAAmC,OAAnC,MAAgD,OAAhD,EAAyD,OAA7D;AACA,sBAAW,iBAAiB,OAAjB,GAA2B,OAA3B,CAJiB;SADhC;;AAQA,YAAI,MAAM,IAAI,cAAJ,CAAmB,OAAnB,CAAN,CAXkC;AAYtC,YAAI,MAAM,iBAAN,EAAyB;AACzB,kBAAM,iBAAN,CAAwB,GAAxB,EAA6B,MAA7B,EADyB;SAA7B;AAGA,cAAM,GAAN,CAfsC;KAAnC,CApCqB;CAAV,EAAlB","file":"assert-compiled.js","sourcesContent":["\"use strict\";\nmodule.exports = (function(){\nvar AssertionError = (function() {\n    function AssertionError(a) {\n        this.constructor$(a);\n        this.message = a;\n        this.name = \"AssertionError\";\n    }\n    AssertionError.prototype = new Error();\n    AssertionError.prototype.constructor = AssertionError;\n    AssertionError.prototype.constructor$ = Error;\n    return AssertionError;\n})();\n\nfunction getParams(args) {\n    var params = [];\n    for (var i = 0; i < args.length; ++i) params.push(\"arg\" + i);\n    return params;\n}\n\nfunction nativeAssert(callName, args, expect) {\n    try {\n        var params = getParams(args);\n        var constructorArgs = params;\n        constructorArgs.push(\"return \" +\n                callName + \"(\"+ params.join(\",\") + \");\");\n        var fn = Function.apply(null, constructorArgs);\n        return fn.apply(null, args);\n    } catch (e) {\n        if (!(e instanceof SyntaxError)) {\n            throw e;\n        } else {\n            return expect;\n        }\n    }\n}\n\nreturn function assert(boolExpr, message) {\n    if (boolExpr === true) return;\n\n    if (typeof boolExpr === \"string\" &&\n        boolExpr.charAt(0) === \"%\") {\n        var nativeCallName = boolExpr;\n        var $_len = arguments.length;var args = new Array($_len - 2); for(var $_i = 2; $_i < $_len; ++$_i) {args[$_i - 2] = arguments[$_i];}\n        if (nativeAssert(nativeCallName, args, message) === message) return;\n        message = (nativeCallName + \" !== \" + message);\n    }\n\n    var ret = new AssertionError(message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(ret, assert);\n    }\n    throw ret;\n};\n})();\n"]}