{"version":3,"sources":["polyfill.js"],"names":[],"mappings":";AACA,OAAO,OAAP,MAAoB,WAApB;;AAEA,eAAe,SAAS,QAAT,GAAoB;AACjC,QAAI,KAAJ,CADiC;;AAGjC,QAAI,OAAO,MAAP,KAAkB,WAAlB,EAA+B;AAC/B,gBAAQ,MAAR,CAD+B;KAAnC,MAEO,IAAI,OAAO,IAAP,KAAgB,WAAhB,EAA6B;AACpC,gBAAQ,IAAR,CADoC;KAAjC,MAEA;AACH,YAAI;AACA,oBAAQ,SAAS,aAAT,GAAR,CADA;SAAJ,CAEE,OAAO,CAAP,EAAU;AACR,kBAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN,CADQ;SAAV;KALC;;AAUP,QAAI,IAAI,MAAM,OAAN,CAfyB;;AAiBjC,QAAI,KAAK,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,EAAE,OAAF,EAA/B,MAAgD,kBAAhD,IAAsE,CAAC,EAAE,IAAF,EAAQ;AACtF,eADsF;KAAxF;;AAIA,UAAM,OAAN,GAAgB,OAAhB,CArBiC;CAApB","file":"polyfill-compiled.js","sourcesContent":["/*global self*/\nimport Promise from './promise';\n\nexport default function polyfill() {\n  var local;\n\n  if (typeof global !== 'undefined') {\n      local = global;\n  } else if (typeof self !== 'undefined') {\n      local = self;\n  } else {\n      try {\n          local = Function('return this')();\n      } catch (e) {\n          throw new Error('polyfill failed because global object is unavailable in this environment');\n      }\n  }\n\n  var P = local.Promise;\n\n  if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n    return;\n  }\n\n  local.Promise = Promise;\n}\n"]}