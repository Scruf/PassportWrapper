{"version":3,"sources":["reject.js"],"names":[],"mappings":"AAAA,SACE,IADF,EAEE,UAAU,OAAV,QACK,cAHP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,eAAe,SAAS,MAAT,CAAgB,MAAhB,EAAwB;;AAErC,MAAI,cAAc,IAAd,CAFiC;AAGrC,MAAI,UAAU,IAAI,WAAJ,CAAgB,IAAhB,CAAV,CAHiC;AAIrC,UAAQ,OAAR,EAAiB,MAAjB,EAJqC;AAKrC,SAAO,OAAP,CALqC;CAAxB","file":"reject-compiled.js","sourcesContent":["import {\n  noop,\n  reject as _reject\n} from '../-internal';\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  var promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  var promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nexport default function reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n"]}