{"version":3,"sources":["race.js"],"names":[],"mappings":"AAAA,SACE,OADF,QAEO,UAFP;;AAIA,SACE,IADF,EAEE,OAFF,EAGE,MAHF,EAIE,SAJF,EAKE,OALF,QAMO,cANP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA,eAAe,SAAS,IAAT,CAAc,OAAd,EAAuB;;AAEpC,MAAI,cAAc,IAAd,CAFgC;;AAIpC,MAAI,UAAU,IAAI,WAAJ,CAAgB,IAAhB,CAAV,CAJgC;;AAMpC,MAAI,CAAC,QAAQ,OAAR,CAAD,EAAmB;AACrB,WAAO,OAAP,EAAgB,IAAI,SAAJ,CAAc,iCAAd,CAAhB,EADqB;AAErB,WAAO,OAAP,CAFqB;GAAvB;;AAKA,MAAI,SAAS,QAAQ,MAAR,CAXuB;;AAapC,WAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,YAAQ,OAAR,EAAiB,KAAjB,EAD4B;GAA9B;;AAIA,WAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,WAAO,OAAP,EAAgB,MAAhB,EAD2B;GAA7B;;AAIA,OAAK,IAAI,IAAI,CAAJ,EAAO,QAAQ,MAAR,KAAmB,OAAnB,IAA8B,IAAI,MAAJ,EAAY,GAA1D,EAA+D;AAC7D,cAAU,YAAY,OAAZ,CAAoB,QAAQ,CAAR,CAApB,CAAV,EAA2C,SAA3C,EAAsD,aAAtD,EAAqE,WAArE,EAD6D;GAA/D;;AAIA,SAAO,OAAP,CAzBoC;CAAvB","file":"race-compiled.js","sourcesContent":["import {\n  isArray\n} from \"../utils\";\n\nimport {\n  noop,\n  resolve,\n  reject,\n  subscribe,\n  PENDING\n} from '../-internal';\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  var promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  var promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  var promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  var promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nexport default function race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop);\n\n  if (!isArray(entries)) {\n    reject(promise, new TypeError('You must pass an array to race.'));\n    return promise;\n  }\n\n  var length = entries.length;\n\n  function onFulfillment(value) {\n    resolve(promise, value);\n  }\n\n  function onRejection(reason) {\n    reject(promise, reason);\n  }\n\n  for (var i = 0; promise._state === PENDING && i < length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n  }\n\n  return promise;\n}\n"]}