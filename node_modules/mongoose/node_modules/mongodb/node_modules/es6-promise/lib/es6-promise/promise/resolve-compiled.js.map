{"version":3,"sources":["resolve.js"],"names":[],"mappings":"AAAA,SACE,IADF,EAEE,WAAW,QAAX,QACK,cAHP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,eAAe,SAAS,OAAT,CAAiB,MAAjB,EAAyB;;AAEtC,MAAI,cAAc,IAAd,CAFkC;;AAItC,MAAI,UAAU,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,WAAP,KAAuB,WAAvB,EAAoC;AAC9E,WAAO,MAAP,CAD8E;GAAhF;;AAIA,MAAI,UAAU,IAAI,WAAJ,CAAgB,IAAhB,CAAV,CARkC;AAStC,WAAS,OAAT,EAAkB,MAAlB,EATsC;AAUtC,SAAO,OAAP,CAVsC;CAAzB","file":"resolve-compiled.js","sourcesContent":["import {\n  noop,\n  resolve as _resolve\n} from '../-internal';\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  var promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  var promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nexport default function resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n"]}