{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , b = require('bson')\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , EventEmitter = require('events').EventEmitter\n  , BasicCursor = require('../cursor')\n  , BSON = require('bson').native().BSON\n  , BasicCursor = require('../cursor')\n  , Server = require('./server')\n  , MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram')\n  , Logger = require('../connection/logger')\n  , ReadPreference = require('./read_preference')\n  , Session = require('./session')\n  , MongoError = require('../error');\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * @example\n * var Mongos = require('mongodb-core').Mongos\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Mongos([{host: 'localhost', port: 30000}]);\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n\n// Instance id\nvar mongosId = 0;\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\nvar State = function(readPreferenceStrategies, localThresholdMS) {\n  // Internal state\n  this.s = {\n      connectedServers: []\n    , disconnectedServers: []\n    , readPreferenceStrategies: readPreferenceStrategies\n    , lowerBoundLatency: Number.MAX_VALUE\n    , localThresholdMS: localThresholdMS\n    , index: 0\n    , topologyDescription: null\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Is there a secondary connected\n * @method\n * @return {boolean}\n */\nState.prototype.resetDescription = function() {\n  this.s.topologyDescription = {\n    \"topologyType\": \"Sharded\",\n    \"servers\": []\n  }\n}\n\nfunction emitTopologyDescriptionChanged(self, state) {\n  if(self.listeners('topologyDescriptionChanged').length > 0 && state) {\n    var state = state.s;\n    // Generate description\n    var description = {\n      topologyType: 'Sharded',\n      servers: []\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(state.connectedServers.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    }));\n\n    description.servers = description.servers.concat(state.disconnectedServers.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    }));\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: state.topologyDescription,\n      newDescription: description\n    };\n\n    // Emit the topologyDescription change\n    self.emit('topologyDescriptionChanged', result);\n\n    // Set the new description\n    state.topologyDescription = description;\n  }\n}\n\n//\n// A Mongos connected\nState.prototype.connected = function(server) {\n  // Locate in disconnected servers and remove\n  this.s.disconnectedServers = this.s.disconnectedServers.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  var found = false;\n  // Check if the server exists\n  this.s.connectedServers.forEach(function(s) {\n    if(s.equals(server)) found = true;\n  });\n\n  // Add to disconnected list if it does not already exist\n  if(!found) this.s.connectedServers.push(server);\n\n  // Adjust lower bound\n  if(this.s.lowerBoundLatency > server.s.isMasterLatencyMS) {\n    this.s.lowerBoundLatency = server.s.isMasterLatencyMS;\n  }\n}\n\n//\n// A Mongos disconnected\nState.prototype.disconnected = function(server) {\n  // Locate in disconnected servers and remove\n  this.s.connectedServers = this.s.connectedServers.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  var found = false;\n  // Check if the server exists\n  this.s.disconnectedServers.forEach(function(s) {\n    if(s.equals(server)) found = true;\n  });\n\n  // Add to disconnected list if it does not already exist\n  if(!found) this.s.disconnectedServers.push(server);\n}\n\n//\n// Return the list of disconnected servers\nState.prototype.disconnectedServers = function() {\n  return this.s.disconnectedServers.slice(0);\n}\n\n//\n// Get connectedServers\nState.prototype.connectedServers = function() {\n  return this.s.connectedServers.slice(0)\n}\n\n//\n// Get all servers\nState.prototype.getAll = function() {\n  return this.s.connectedServers.slice(0).concat(this.s.disconnectedServers);\n}\n\n//\n// Get all connections\nState.prototype.getAllConnections = function() {\n  var connections = [];\n\n  this.s.connectedServers.forEach(function(e) {\n    connections = connections.concat(e.connections());\n  });\n  return connections;\n}\n\n//\n// Unref the state\nState.prototype.unref = function() {\n  // Unref all the servers\n  for(var i = 0; i < this.s.connectedServers.length; i++) {\n    // Get each of the servers\n    var server = this.s.connectedServers[i];\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n    // Unreference the server\n    server.unref();\n  }\n}\n\n//\n// Destroy the state\nState.prototype.destroy = function() {\n  // Destroy any connected servers\n  while(this.s.connectedServers.length > 0) {\n    var server = this.s.connectedServers.shift();\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n\n    // Server destroy\n    server.destroy();\n    // Add to list of disconnected servers\n    this.s.disconnectedServers.push(server);\n  }\n}\n\nvar pickProxies = function(self, options) {\n  options = options || {};\n  var readPreference = options.readPreference || ReadPreference.primary;\n\n  // All connected servers\n  var servers = self.s.connectedServers.slice(0);\n\n  // Do we have a custom readPreference strategy, use it\n  if(self.s.readPreferenceStrategies != null && self.s.readPreferenceStrategies[readPreference] != null) {\n    var server = self.s.readPreferenceStrategies[readPreference].pickServer(servers, readPreference);\n    // Return the server if one is found\n    return !server ? [] : [server];\n  }\n\n  // Filter out the possible servers\n  servers = self.s.connectedServers.filter(function(server) {\n    if((server.s.isMasterLatencyMS <= (self.s.lowerBoundLatency + self.s.localThresholdMS))\n      && server.isConnected()) {\n      return true;\n    }\n  });\n\n  // If no servers found return the lowest latency proxy\n  if(servers.length == 0 && self.s.connectedServers.length > 0) {\n    servers = self.s.connectedServers.sort(function(server1, server2) {\n      return server1.s.isMasterLatencyMS - server2.s.isMasterLatencyMS;\n    });\n\n    // Return the lowest latency server if none is found\n    return [servers[0]];\n  }\n\n  // Return all the servers found\n  return servers;\n}\n\n//\n// Are we connected\nState.prototype.isConnected = function(options) {\n  // Get all the servers\n  var servers = pickProxies(this, options);\n  // Return if the server is connected\n  return servers.length > 0 ? true : false;\n}\n\n//\n// Pick a server\nState.prototype.pickServer = function(readPreference) {\n  // Get all the servers\n  var servers = pickProxies(this, {readPreference:readPreference});\n  // No valid connections\n  if(servers.length == 0) throw new MongoError(\"no mongos proxy available\");\n  // Update index\n  this.s.index = (this.s.index + 1) % servers.length;\n  // Pick first one\n  return servers[this.s.index];\n}\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.reconnectTries=30] Reconnect retries for HA if no servers available\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#joined\n * @fires Mongos#left\n */\nvar Mongos = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number')\n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // BSON Parser, ensure we have a single instance\n  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;\n  // Pick the right bson parser\n  var bson = options.bson ? options.bson : bsonInstance;\n  // Add bson parser to options\n  options.bson = bson;\n\n  // The Mongos state\n  this.s = {\n    // Seed list for sharding passed in\n      seedlist: seedlist\n    // Passed in options\n    , options: options\n    // Logger\n    , logger: Logger('Mongos', options)\n    // Reconnect tries\n    , reconnectTries: options.reconnectTries || 30\n    // Ha interval\n    , haInterval: options.haInterval || 5000\n    // localThresholdMS\n    , localThresholdMS: options.localThresholdMS || 15\n    // Have omitted fullsetup\n    , fullsetup: false\n    // Cursor factory\n    , Cursor: options.cursorFactory || BasicCursor\n    // Current credentials used for auth\n    , credentials: []\n    // BSON Parser\n    , bsonInstance: bsonInstance\n    , bson: bson\n    // Pings\n    , pings: {}\n    // Default state\n    , state: DISCONNECTED\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: {}\n    // Auth providers\n    , authProviders: {}\n    // Unique instance id\n    , id: mongosId++\n    // Authentication in progress\n    , authInProgress: false\n    // Servers added while auth in progress\n    , authInProgressServers: []\n    // Current retries left\n    , retriesLeft: options.reconnectTries || 30\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n  }\n\n  // Set up the connection timeout for the options\n  options.connectionTimeout = options.connectionTimeout || 1000;\n\n  // Create a new state for the mongos\n  this.s.mongosState = new State(this.s.readPreferenceStrategies, this.s.localThresholdMS);\n\n  // Add the authentication mechanisms\n  this.addAuthProvider('mongocr', new MongoCR());\n  this.addAuthProvider('x509', new X509());\n  this.addAuthProvider('plain', new Plain());\n  this.addAuthProvider('gssapi', new GSSAPI());\n  this.addAuthProvider('sspi', new SSPI());\n  this.addAuthProvider('scram-sha-1', new ScramSHA1());\n\n  // BSON property (find a server and pass it along)\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      var servers = self.s.mongosState.getAll();\n      return servers.length > 0 ? servers[0].bson : null;\n    }\n  });\n\n  Object.defineProperty(this, 'id', {\n    enumerable:true, get: function() { return self.s.id; }\n  });\n\n  Object.defineProperty(this, 'type', {\n    enumerable:true, get: function() { return 'mongos'; }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.haInterval; }\n  });\n\n  Object.defineProperty(this, 'state', {\n    enumerable:true, get: function() { return self.s.mongosState; }\n  });\n}\n\ninherits(Mongos, EventEmitter);\n\n/**\n * Name of BSON parser currently used\n * @method\n * @return {string}\n */\nMongos.prototype.parserType = function() {\n  if(this.s.bson.serialize.toString().indexOf('[native code]') != -1)\n    return 'c++';\n  return 'js';\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nMongos.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  var connectedServers = this.s.mongosState.connectedServers();\n  if(connectedServers.length > 0) return connectedServers[0].lastIsMaster();\n  return null;\n}\n\n/**\n * Initiate server connect\n * @method\n */\nMongos.prototype.connect = function(_options) {\n  var self = this;\n  // Start replicaset inquiry process\n  setTimeout(mongosInquirer(self, self.s), self.s.haInterval);\n  // Additional options\n  if(_options) for(var name in _options) self.s.options[name] = _options[name];\n  // For all entries in the seedlist build a server instance\n  self.s.seedlist.forEach(function(e) {\n    // Clone options\n    var opts = cloneOptions(self.s.options);\n    // Add host and port\n    opts.host = e.host;\n    opts.port = e.port;\n    opts.reconnect = false;\n    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;\n    // Share the auth store\n    opts.authProviders = self.s.authProviders;\n    // Don't emit errors\n    opts.emitError = true;\n    // Set that server is in a topology\n    opts.inTopology = true;\n    opts.topologyId = self.s.id;\n    opts.monitoring = true;\n    // Create a new Server\n    self.s.mongosState.disconnected(new Server(opts));\n  });\n\n  // Reset the replState\n  this.s.mongosState.resetDescription();\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.s.id });\n\n  // Get the disconnected servers\n  var servers = self.s.mongosState.disconnectedServers();\n\n  // Set connecting state\n  this.s.state = CONNECTING;\n\n  // Attempt to connect to all the servers\n  while(servers.length > 0) {\n    // Get the server\n    var server = servers.shift();\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect', 'message', 'parseError',\n      'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'].forEach(function(e) {\n      server.removeAllListeners(e);\n    });\n\n    // Set up the event handlers\n    server.once('error', errorHandlerTemp(self, self.s, server));\n    server.once('close', errorHandlerTemp(self, self.s, server));\n    server.once('timeout', errorHandlerTemp(self, self.s, server));\n    server.once('parseError', errorHandlerTemp(self, self.s, server));\n    server.once('connect', connectHandler(self, self.s, 'connect'));\n\n    // SDAM Monitoring events\n    server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n    server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n    server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n    server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n    server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n    server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n\n    if(self.s.logger.isInfo()) self.s.logger.info(f('connecting to server %s', server.name));\n\n    // Execute the connect\n    var execute = function(_server) {\n      process.nextTick(function() {\n        _server.connect();\n      });\n    }\n\n    // Connect\n    execute(server);\n  }\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function(emitClose) {\n  if(this.s.logger.isInfo()) this.s.logger.info(f('[%s] unreferenced', this.s.id));\n  // Emit close\n  if(emitClose && this.listeners('close').length > 0) this.emit('close', this);\n  // Unref sockets\n  this.s.mongosState.unref();\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nMongos.prototype.destroy = function(emitClose) {\n  this.s.state = DESTROYED;\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.s.id });\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n  // Destroy the state\n  this.s.mongosState.destroy();\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function(options) {\n  return this.s.mongosState.isConnected(options);\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.s.state  == DESTROYED;\n}\n\n//\n// Operations\n//\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'update', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this.s, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n\n  // We need to execute the command on all servers\n  if(options.onAll) {\n    var servers = self.s.mongosState.getAll();\n    var count = servers.length;\n    var cmdErr = null;\n\n    for(var i = 0; i < servers.length; i++) {\n      servers[i].command(ns, cmd, options, function(err, r) {\n        count = count - 1;\n        // Finished executing command\n        if(count == 0) {\n          // Was it a logout command clear any credentials\n          if(cmd.logout) clearCredentials(self.s, ns);\n          // Return the error\n          callback(err, r);\n        }\n      });\n    }\n\n    return;\n  }\n\n\n  try {\n    // Get a primary\n    server = self.s.mongosState.pickServer(options.writeConcern ? ReadPreference.primary : options.readPreference);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no mongos found\"));\n  server.command(ns, cmd, options, function(err, r) {\n    // Was it a logout command clear any credentials\n    if(cmd.logout) clearCredentials(self.s, ns);\n    callback(err, r);\n  });\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(this.s.authProviders[mechanism] == null && mechanism != 'default')\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n\n  // Authenticate against all the servers\n  var servers = this.s.mongosState.connectedServers().slice(0);\n  var count = servers.length;\n  // Correct authentication\n  var authenticated = true;\n  var authErr = null;\n  // Set auth in progress\n  this.s.authInProgress = true;\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    var server = servers.shift();\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err, r) {\n      count = count - 1;\n      if(err) authErr = err;\n      if(!r) authenticated = false;\n\n      // We are done\n      if(count == 0) {\n        // We have more servers that are not authenticated, let's authenticate\n        if(self.s.authInProgressServers.length > 0) {\n          self.s.authInProgressServers = [];\n          return self.auth.apply(self, [mechanism, db].concat(args).concat([callback]));\n        }\n\n        // Auth is done\n        self.s.authInProgress = false;\n        // Add successful credentials\n        if(authErr == null) addCredentials(self.s, db, argsWithoutCallback);\n        // Return the auth error\n        if(authErr) return callback(authErr, false);\n        // Successfully authenticated session\n        callback(null, new Session({}, self));\n      }\n    }]);\n\n    // Execute the auth\n    server.auth.apply(server, finalArguments);\n  }\n}\n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nMongos.prototype.addReadPreferenceStrategy = function(name, strategy) {\n  if(this.s.readPreferenceStrategies == null) this.s.readPreferenceStrategies = {};\n  this.s.readPreferenceStrategies[name] = strategy;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nMongos.prototype.addAuthProvider = function(name, provider) {\n  this.s.authProviders[name] = provider;\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nMongos.prototype.getConnection = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  var server = this.s.mongosState.pickServer(options.readPreference);\n  if(server == null) return null;\n  // Return connection\n  return server.getConnection();\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nMongos.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  return this.s.mongosState.pickServer(options.readPreference);\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  return this.s.mongosState.getAllConnections();\n}\n\n//\n// Inquires about state changes\n//\nvar mongosInquirer = function(self, state) {\n  return function() {\n    if(state.state == DESTROYED) return\n    if(state.state == CONNECTED) state.retriesLeft = state.reconnectTries;\n\n    // If we have a disconnected site\n    if(state.state == DISCONNECTED && state.retriesLeft == 0) {\n      self.destroy();\n      return self.emit('error', new MongoError(f('failed to reconnect after %s', state.reconnectTries)));\n    } else if(state.state == DISCONNECTED) {\n      state.retriesLeft = state.retriesLeft - 1;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(state.mongosState.isConnected() && state.disconnectHandler) {\n      state.disconnectHandler.execute();\n    }\n\n    // Log the information\n    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess running'));\n\n    // Let's query any disconnected proxies\n    var disconnectedServers = state.mongosState.disconnectedServers();\n    if(disconnectedServers.length == 0) return setTimeout(mongosInquirer(self, state), state.haInterval);\n\n    // Count of connections waiting to be connected\n    var connectionCount = disconnectedServers.length;\n    if(state.logger.isDebug()) state.logger.debug(f('mongos ha proceess found %d disconnected proxies', connectionCount));\n\n    // Let's attempt to reconnect\n    while(disconnectedServers.length > 0) {\n      // Connect to proxy\n      var connectToProxy = function(_server) {\n        setTimeout(function() {\n          // Remove any non used handlers\n          ['error', 'close', 'timeout', 'connect', 'message', 'parseError',\n            'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n            'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'].forEach(function(e) {\n            _server.removeAllListeners(e);\n          });\n\n          // Set up the event handlers\n          _server.once('error', errorHandlerTemp(self, state, server));\n          _server.once('close', errorHandlerTemp(self, state, server));\n          _server.once('timeout', errorHandlerTemp(self, state, server));\n          _server.once('connect', connectHandler(self, state, 'ha'));\n\n          // SDAM Monitoring events\n          _server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n          _server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n          _server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n          _server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n          _server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n          _server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n\n          // Start connect\n          _server.connect();\n        }, 1);\n      }\n\n      var server = disconnectedServers.shift();\n      if(state.logger.isDebug()) state.logger.debug(f('attempting to connect to server %s', server.name));\n      connectToProxy(server);\n    }\n\n    // Let's keep monitoring but wait for possible timeout to happen\n    return setTimeout(mongosInquirer(self, state), state.options.connectionTimeout + state.haInterval);\n  }\n}\n\n//\n// Error handler for initial connect\nvar errorHandlerTemp = function(self, state, server) {\n  return function(err, server) {\n    // Log the information\n    if(state.logger.isInfo()) state.logger.info(f('server %s disconnected with error %s',  server.name, JSON.stringify(err)));\n\n    // Signal disconnect of server\n    state.mongosState.disconnected(server);\n\n    // Remove any non used handlers\n    var events = ['error', 'close', 'timeout', 'connect'];\n    events.forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n  }\n}\n\n//\n// Handlers\nvar errorHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', server.name, JSON.stringify(err)));\n    state.mongosState.disconnected(server);\n    // No more servers left emit close\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Emit topology changed event\n    emitTopologyDescriptionChanged(self, state.mongosState);\n\n    // Signal server left\n    self.emit('left', 'mongos', server);\n    if(state.emitError) self.emit('error', err, server);\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s timed out', server.name));\n    state.mongosState.disconnected(server);\n\n    // No more servers emit close event if no entries left\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Emit topology changed event\n    emitTopologyDescriptionChanged(self, state.mongosState);\n\n    // Signal server left\n    self.emit('left', 'mongos', server);\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, server) {\n    if(state.logger.isInfo()) state.logger.info(f('server %s closed', server.name));\n    state.mongosState.disconnected(server);\n\n    // No more servers left emit close\n    if(state.mongosState.connectedServers().length == 0) {\n      state.state = DISCONNECTED;\n    }\n\n    // Emit topology changed event\n    emitTopologyDescriptionChanged(self, state.mongosState);\n\n    // Signal server left\n    self.emit('left', 'mongos', server);\n  }\n}\n\n// Connect handler\nvar connectHandler = function(self, state, e) {\n  return function(server) {\n    if(state.logger.isInfo()) state.logger.info(f('connected to %s', server.name));\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect', 'message', 'parseError'].forEach(function(e) {\n      server.removeAllListeners(e);\n    });\n\n    // finish processing the server\n    var processNewServer = function(_server) {\n      // Add the server handling code\n      if(_server.isConnected()) {\n        _server.once('error', errorHandler(self, state));\n        _server.once('close', closeHandler(self, state));\n        _server.once('timeout', timeoutHandler(self, state));\n        _server.once('parseError', timeoutHandler(self, state));\n      }\n\n      // Emit joined event\n      self.emit('joined', 'mongos', _server);\n\n      // Add to list connected servers\n      state.mongosState.connected(_server);\n\n      // Do we have a reconnect event\n      if('ha' == e && state.mongosState.connectedServers().length == 1) {\n        self.emit('reconnect', _server);\n      }\n\n      // Full setup\n      if(state.mongosState.disconnectedServers().length == 0 &&\n        state.mongosState.connectedServers().length > 0 &&\n        !state.fullsetup) {\n        state.fullsetup = true;\n        self.emit('fullsetup', self);\n      }\n\n      // all connected\n      if(state.mongosState.disconnectedServers().length == 0 &&\n        state.mongosState.connectedServers().length == state.seedlist.length &&\n        !state.all) {\n        state.all = true;\n        self.emit('all', self);\n      }\n\n      // Emit topology changed event\n      emitTopologyDescriptionChanged(self, state.mongosState);\n\n      // Set connected\n      if(state.state == DISCONNECTED) {\n        state.state = CONNECTED;\n        self.emit('reconnect', self);\n      } else if(state.state == CONNECTING) {\n        state.state = CONNECTED;\n        self.emit('connect', self);\n      }\n    }\n\n    // Is there an authentication process ongoing\n    if(state.authInProgress) {\n      state.authInProgressServers.push(server);\n    }\n\n    // No credentials just process server\n    if(state.credentials.length == 0) return processNewServer(server);\n\n    // Do we have credentials, let's apply them all\n    var count = state.credentials.length;\n    // Apply the credentials\n    for(var i = 0; i < state.credentials.length; i++) {\n      server.auth.apply(server, state.credentials[i].concat([function(err, r) {\n        count = count - 1;\n        if(count == 0) processNewServer(server);\n      }]));\n    }\n  }\n}\n\n//\n// Add server to the list if it does not exist\nvar addToListIfNotExist = function(list, server) {\n  var found = false;\n\n  // Remove any non used handlers\n  ['error', 'close', 'timeout', 'connect'].forEach(function(e) {\n    server.removeAllListeners(e);\n  })\n\n  // Check if the server already exists\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) found = true;\n  }\n\n  if(!found) {\n    list.push(server);\n  }\n}\n\n// Add the new credential for a db, removing the old\n// credential from the cache\nvar addCredentials = function(state, db, argsWithoutCallback) {\n  // Remove any credentials for the db\n  clearCredentials(state, db + \".dummy\");\n  // Add new credentials to list\n  state.credentials.push(argsWithoutCallback);\n}\n\n// Clear out credentials for a namespace\nvar clearCredentials = function(state, ns) {\n  var db = ns.split('.')[0];\n  var filteredCredentials = [];\n\n  // Filter out all credentials for the db the user is logging out off\n  for(var i = 0; i < state.credentials.length; i++) {\n    if(state.credentials[i][1] != db) filteredCredentials.push(state.credentials[i]);\n  }\n\n  // Set new list of credentials\n  state.credentials = filteredCredentials;\n}\n\nvar processReadPreference = function(cmd, options) {\n  options = options || {}\n  // No read preference specified\n  if(options.readPreference == null) return cmd;\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(state, op, ns, ops, options, callback) {\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n  try {\n    // Get a primary\n    server = state.mongosState.pickServer();\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no mongos found\"));\n  // Execute the command\n  server[op](ns, ops, options, callback);\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\nmodule.exports = Mongos;\n"]}