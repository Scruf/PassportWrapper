{"version":3,"sources":["replset.js"],"names":[],"mappings":"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","file":"replset-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , b = require('bson')\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , debugOptions = require('../connection/utils').debugOptions\n  , EventEmitter = require('events').EventEmitter\n  , Server = require('./server')\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('../error')\n  , Ping = require('./strategies/ping')\n  , Session = require('./session')\n  , BasicCursor = require('../cursor')\n  , BSON = require('bson').native().BSON\n  , State = require('./replset_state')\n  , MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram')\n  , Logger = require('../connection/logger');\n\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connecctions.\n *\n * @example\n * var ReplSet = require('mongodb-core').ReplSet\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new ReplSet([{host: 'localhost', port: 30000}], {setName: 'rs'});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n//\n// ReplSet instance id\nvar replSetId = 1;\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=30000] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n  // Clone the options\n  options = cloneOptions(options);\n\n  // Validate seedlist\n  if(!Array.isArray(seedlist)) throw new MongoError(\"seedlist must be an array\");\n  // Validate list\n  if(seedlist.length == 0) throw new MongoError(\"seedlist must contain at least one entry\");\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if(typeof e.host != 'string' || typeof e.port != 'number')\n      throw new MongoError(\"seedlist entry must contain a host and port\");\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Set the bson instance\n  bsonInstance = bsonInstance == null ? new BSON(bsonTypes) : bsonInstance;\n\n  // Internal state hash for the object\n  this.s = {\n      options: options\n    // Logger instance\n    , logger: Logger('ReplSet', options)\n    // Uniquely identify the replicaset instance\n    , id: replSetId++\n    // Index\n    , index: 0\n    // Ha Index\n    , haId: 0\n    // Current credentials used for auth\n    , credentials: []\n    // Factory overrides\n    , Cursor: options.cursorFactory || BasicCursor\n    // BSON Parser, ensure we have a single instance\n    , bsonInstance: bsonInstance\n    // Pick the right bson parser\n    , bson: options.bson ? options.bson : bsonInstance\n    // Special replicaset options\n    , secondaryOnlyConnectionAllowed: typeof options.secondaryOnlyConnectionAllowed == 'boolean'\n    ? options.secondaryOnlyConnectionAllowed : false\n    , haInterval: options.haInterval || 10000\n    // Current haInterval\n    , currentHaInterval: options.haInterval || 10000\n    // Are we running in debug mode\n    , debug: typeof options.debug == 'boolean' ? options.debug : false\n    // The replicaset name\n    , setName: options.setName\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Grouping tag used for debugging purposes\n    , tag: options.tag\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: {}\n    // Auth providers\n    , authProviders: {}\n    // All the servers\n    , disconnectedServers: []\n    // Initial connection servers\n    , initialConnectionServers: []\n    // High availability process running\n    , highAvailabilityProcessRunning: false\n    // Full setup\n    , fullsetup: false\n    // All servers accounted for (used for testing)\n    , all: false\n    // Seedlist\n    , seedlist: seedlist\n    // Authentication in progress\n    , authInProgress: false\n    // Servers added while auth in progress\n    , authInProgressServers: []\n    // Minimum heartbeat frequency used if we detect a server close\n    , minHeartbeatFrequencyMS: 500\n    // stores high availability timer to allow efficient destroy\n    , haTimer : null\n  }\n\n  // Add bson parser to options\n  options.bson = this.s.bson;\n  // Set up the connection timeout for the options\n  options.connectionTimeout = options.connectionTimeout || 10000;\n\n  // Replicaset state\n  var replState = new State(this, {\n      id: this.s.id, setName: this.s.setName\n    // , connectingServers: this.s.connectingServers\n    , secondaryOnlyConnectionAllowed: this.s.secondaryOnlyConnectionAllowed\n  });\n\n  // Add Replicaset state to our internal state\n  this.s.replState = replState;\n\n  // Add the authentication mechanisms\n  this.addAuthProvider('mongocr', new MongoCR());\n  this.addAuthProvider('x509', new X509());\n  this.addAuthProvider('plain', new Plain());\n  this.addAuthProvider('gssapi', new GSSAPI());\n  this.addAuthProvider('sspi', new SSPI());\n  this.addAuthProvider('scram-sha-1', new ScramSHA1());\n\n  // BSON property (find a server and pass it along)\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      var servers = self.s.replState.getAll();\n      return servers.length > 0 ? servers[0].bson : null;\n    }\n  });\n\n  Object.defineProperty(this, 'id', {\n    enumerable:true, get: function() { return self.s.id; }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.haInterval; }\n  });\n\n  Object.defineProperty(this, 'state', {\n    enumerable:true, get: function() { return self.s.replState; }\n  });\n\n  //\n  // Debug options\n  if(self.s.debug) {\n    // Add access to the read Preference Strategies\n    Object.defineProperty(this, 'readPreferenceStrategies', {\n      enumerable: true, get: function() { return self.s.readPreferenceStrategies; }\n    });\n  }\n\n  Object.defineProperty(this, 'type', {\n    enumerable:true, get: function() { return 'replset'; }\n  });\n\n  // Add the ping strategy for nearest\n  this.addReadPreferenceStrategy('nearest', new Ping(options));\n}\n\ninherits(ReplSet, EventEmitter);\n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nReplSet.prototype.addReadPreferenceStrategy = function(name, func) {\n  this.s.readPreferenceStrategies[name] = func;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nReplSet.prototype.addAuthProvider = function(name, provider) {\n  if(this.s.authProviders == null) this.s.authProviders = {};\n  this.s.authProviders[name] = provider;\n}\n\n/**\n * Name of BSON parser currently used\n * @method\n * @return {string}\n */\nReplSet.prototype.parserType = function() {\n  if(this.s.bson.serialize.toString().indexOf('[native code]') != -1)\n    return 'c++';\n  return 'js';\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nReplSet.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  return this.s.replState.lastIsMaster();\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nReplSet.prototype.getConnection = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  var server = pickServer(this, this.s, options.readPreference);\n  if(server == null) return null;\n  // Return connection\n  return server.getConnection();\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  return this.s.replState.getAllConnections({includeArbiters:true});\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nReplSet.prototype.getServer = function(options) {\n  // Ensure we have no options\n  options = options || {};\n  // Pick the right server based on readPreference\n  return pickServer(this, this.s, options.readPreference);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.cursor = function(ns, cmd, cursorOptions) {\n  cursorOptions = cursorOptions || {};\n  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;\n  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);\n}\n\n//\n// Execute write operation\nvar executeWriteOperation = function(self, op, ns, ops, options, callback) {\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var server = null;\n  // Ensure we have no options\n  options = options || {};\n  // Get a primary\n  try {\n    server = pickServer(self, self.s, ReadPreference.primary);\n    if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no server found\"));\n\n  // Handler\n  var handler = function(err, r) {\n    // We have a no master error, immediately refresh the view of the replicaset\n    if((notMasterError(r) || notMasterError(err)) && !self.s.highAvailabilityProcessRunning) {\n      // Set he current interval to minHeartbeatFrequencyMS\n      self.s.currentHaInterval = self.s.minHeartbeatFrequencyMS;\n      // Attempt to locate the current master immediately\n      replicasetInquirer(self, self.s, true)();\n    }\n    // Return the result\n    callback(err, r);\n  }\n\n  // Add operationId if existing\n  if(callback.operationId) handler.operationId = callback.operationId;\n  // Execute the command\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var server = null;\n  var self = this;\n  // Ensure we have no options\n  options = options || {};\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected(options) && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // We need to execute the command on all servers\n  if(options.onAll) {\n    var servers = this.s.replState.getAll();\n    var count = servers.length;\n    var cmdErr = null;\n\n    for(var i = 0; i < servers.length; i++) {\n      servers[i].command(ns, cmd, options, function(err, r) {\n        count = count - 1;\n        // Finished executing command\n        if(count == 0) {\n          // Was it a logout command clear any credentials\n          if(cmd.logout) clearCredentials(self.s, ns);\n          // We have a no master error, immediately refresh the view of the replicaset\n          if((notMasterError(r) || notMasterError(err)) && !self.s.highAvailabilityProcessRunning) {\n            replicasetInquirer(self, self.s, true)();\n          }\n\n          // Return the error\n          callback(err, r);\n        }\n      });\n    }\n\n    return;\n  }\n\n  // Pick the right server based on readPreference\n  try {\n    server = pickServer(self, self.s, options.writeConcern ? ReadPreference.primary : options.readPreference);\n    if(self.s.debug) self.emit('pickedServer', options.writeConcern ? ReadPreference.primary : options.readPreference, server);\n  } catch(err) {\n    return callback(err);\n  }\n\n  // No server returned we had an error\n  if(server == null) return callback(new MongoError(\"no server found\"));\n  // Execute the command\n  server.command(ns, cmd, options, function(err, r) {\n    // Was it a logout command clear any credentials\n    if(cmd.logout) clearCredentials(self.s, ns);\n    // We have a no master error, immediately refresh the view of the replicaset\n    if((notMasterError(r) || notMasterError(err)) && !self.s.highAvailabilityProcessRunning) {\n      replicasetInquirer(self, self.s, true)();\n    }\n    // Return the error\n    callback(err, r);\n  });\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'remove', ns, ops, options, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'insert', ns, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  if(this.s.replState.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!this.isConnected() && this.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  executeWriteOperation(this, 'update', ns, ops, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(mechanism, db) {\n  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(this.s.authProviders[mechanism] == null && mechanism != 'default') {\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n  }\n\n  // Authenticate against all the servers\n  var servers = this.s.replState.getAll().slice(0);\n  var count = servers.length;\n  // Correct authentication\n  var authenticated = true;\n  var authErr = null;\n  // Set auth in progress\n  this.s.authInProgress = true;\n\n  // Authenticate against all servers\n  while(servers.length > 0) {\n    var server = servers.shift();\n\n    // Arguments without a callback\n    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));\n    // Create arguments\n    var finalArguments = argsWithoutCallback.concat([function(err, r) {\n      count = count - 1;\n      if(err) authErr = err;\n      if(!r) authenticated = false;\n\n      // We are done\n      if(count == 0) {\n        // We have more servers that are not authenticated, let's authenticate\n        if(self.s.authInProgressServers.length > 0) {\n          self.s.authInProgressServers = [];\n          return self.auth.apply(self, [mechanism, db].concat(args).concat([callback]));\n        }\n\n        // Auth is done\n        self.s.authInProgress = false;\n        // Add successful credentials\n        if(authErr == null) addCredentials(self.s, db, argsWithoutCallback);\n        // Return the auth error\n        if(authErr) return callback(authErr, false);\n        // Successfully authenticated session\n        callback(null, new Session({}, self));\n      }\n    }]);\n\n    // Execute the auth\n    server.auth.apply(server, finalArguments);\n  }\n}\n\nReplSet.prototype.state = function() {\n  return this.s.replState.state;\n}\n\n/**\n * Ensure single socket connections to arbiters and hidden servers\n * @method\n */\nvar handleIsmaster = function(self) {\n  return function(ismaster, _server) {\n    if(ismaster.arbiterOnly) {\n      _server.s.options.size = 1;\n    } else if(ismaster.hidden) {\n      _server.s.options.size = 1;\n    }\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n * @method\n */\nReplSet.prototype.connect = function(_options) {\n  var self = this;\n  // Start replicaset inquiry process\n  setHaTimer(self, self.s);\n  // Additional options\n  if(_options) for(var name in _options) this.s.options[name] = _options[name];\n\n  // Set the state as connecting\n  this.s.replState.state = CONNECTING;\n\n  // No fullsetup reached\n  this.s.fullsetup = false;\n\n  // Reset the replState\n  this.s.replState.resetDescription();\n\n  // For all entries in the seedlist build a server instance\n  this.s.seedlist.forEach(function(e) {\n    // Clone options\n    var opts = cloneOptions(self.s.options);\n    // Add host and port\n    opts.host = e.host;\n    opts.port = e.port;\n    opts.reconnect = false;\n    opts.readPreferenceStrategies = self.s.readPreferenceStrategies;\n    opts.emitError = true;\n    // Add a reserved connection for monitoring\n    opts.size = opts.size + 1;\n    opts.monitoring = true;\n    opts.topologyId = self.s.id;\n    // Server is in topology\n    opts.inTopology = true;\n    // Set up tags if any\n    if(self.s.tag) opts.tag = self.s.tag;\n    // Share the auth store\n    opts.authProviders = self.s.authProviders;\n    // Create a new Server\n    var server = new Server(opts);\n    // Handle the ismaster\n    server.on('ismaster', handleIsmaster(self));\n    // Add to list of disconnected servers\n    self.s.disconnectedServers.push(server);\n    // Add to list of inflight Connections\n    self.s.initialConnectionServers.push(server);\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.s.id });\n\n  // Attempt to connect to all the servers\n  while(this.s.disconnectedServers.length > 0) {\n    // Get the server\n    var server = self.s.disconnectedServers.shift();\n    // Ensure the server is properly disconnected\n    server.destroy();\n\n    // Set up the event handlers\n    server.once('error', errorHandlerTemp(self, self.s, 'error'));\n    server.once('close', errorHandlerTemp(self, self.s, 'close'));\n    server.once('timeout', errorHandlerTemp(self, self.s, 'timeout'));\n    server.once('connect', connectHandler(self, self.s));\n\n    // SDAM Monitoring events\n    server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n    server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n    server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n    server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n    server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n    server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n\n    // Ensure we schedule the opening of new socket\n    // on separate ticks of the event loop\n    var execute = function(_server) {\n      // Attempt to connect\n      process.nextTick(function() {\n        _server.connect();\n      });\n    }\n\n    execute(server);\n  }\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replState.isSecondaryConnected();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replState.isPrimaryConnected();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();\n  }\n\n  if(options.readPreference\n    && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replState.isSecondaryConnected() || this.s.replState.isPrimaryConnected();\n  }\n\n  if(this.s.secondaryOnlyConnectionAllowed\n    && this.s.replState.isSecondaryConnected()) {\n      return true;\n  }\n\n  return this.s.replState.isPrimaryConnected();\n}\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.s.replState.state == DESTROYED;\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function(emitClose) {\n  var self = this;\n  if(this.s.logger.isInfo()) this.s.logger.info(f('[%s] unreferenced', this.s.id));\n\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n\n  // Unref sockets\n  this.s.replState.unref();\n\n  // Clear out any listeners\n  var events = ['timeout', 'error', 'close', 'joined', 'left',\n    'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'];\n  events.forEach(function(e) {\n    self.removeAllListeners(e);\n  });\n\n  clearTimeout(self.s.haTimer);\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nReplSet.prototype.destroy = function(emitClose) {\n  var self = this;\n  if(this.s.logger.isInfo()) this.s.logger.info(f('[%s] destroyed', this.s.id));\n  this.s.replState.state = DESTROYED;\n\n  // Clear the ha timer\n  if(self.s.haTimer) clearTimeout(self.s.haTimer);\n\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) self.emit('close', self);\n\n  // Destroy state\n  this.s.replState.destroy();\n\n  // Emit toplogy closing event\n  emitSDAMEvent(this, 'topologyClosed', { topologyId: this.s.id });\n\n  // Clear out any listeners\n  var events = ['timeout', 'error', 'close', 'joined', 'left',\n    'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'];\n  events.forEach(function(e) {\n    self.removeAllListeners(e);\n  });\n\n  clearTimeout(self.s.haTimer);\n}\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n//\n// Inquires about state changes\n//\n\n// Add the new credential for a db, removing the old\n// credential from the cache\nvar addCredentials = function(s, db, argsWithoutCallback) {\n  // Remove any credentials for the db\n  clearCredentials(s, db + \".dummy\");\n  // Add new credentials to list\n  s.credentials.push(argsWithoutCallback);\n}\n\n// Clear out credentials for a namespace\nvar clearCredentials = function(s, ns) {\n  var db = ns.split('.')[0];\n  var filteredCredentials = [];\n\n  // Filter out all credentials for the db the user is logging out off\n  for(var i = 0; i < s.credentials.length; i++) {\n    if(s.credentials[i][1] != db) filteredCredentials.push(s.credentials[i]);\n  }\n\n  // Set new list of credentials\n  s.credentials = filteredCredentials;\n}\n\n//\n// Filter serves by tags\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tagsArray = !Array.isArray(readPreference.tags) ? [tags] : tags;\n\n  // Iterate over the tags\n  for(var j = 0; j < tagsArray.length; j++) {\n    var tags = tagsArray[j];\n\n    // Iterate over all the servers\n    for(var i = 0; i < servers.length; i++) {\n      var serverTag = servers[i].lastIsMaster().tags || {};\n      // Did we find the a matching server\n      var found = true;\n      // Check if the server is valid\n      for(var name in tags) {\n        if(serverTag[name] != tags[name]) found = false;\n      }\n\n      // Add to candidate list\n      if(found) {\n        filteredServers.push(servers[i]);\n      }\n    }\n\n    // We found servers by the highest priority\n    if(found) break;\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\nvar eventHandler = {\n  fullsetup: function(self, state) {\n    // If no more initial servers and new scheduled servers to connect\n    if (!state.replState.primary) return;\n    if (state.replState.secondaries.length === 0) return;\n    if (state.fullsetup) return;\n\n    // Only emit if there is a listener\n    if(self.listeners('fullsetup').length > 0) {\n      state.fullsetup = true;\n      self.emit('fullsetup', self);\n    }\n  },\n  all: function(self, state) {\n    // If all servers are accounted for and we have not sent the all event\n    if (!state.replState.primary) return;\n    if (!self.lastIsMaster()) return;\n    if (!Array.isArray(self.lastIsMaster().hosts)) return;\n    if (state.all) return;\n\n    var length = 1 + state.replState.secondaries.length;\n    // If we have all secondaries + primary\n    if (length !== self.lastIsMaster().hosts.length) return;\n\n    // Only emit if there is a listener\n    if(self.listeners('all').length > 0) {\n      state.all = true;\n      self.emit('all', self);\n    }\n  }\n}\n\nvar checkAndEmitEvent = function(self, state, event) {\n  var handler = eventHandler[event];\n  if (!handler) throw new MongoError(event + \" event not implemented\");\n\n  handler(self, state);\n}\n\n//\n// Pick a server based on readPreference\nvar pickServer = function(self, s, readPreference) {\n  // If no read Preference set to primary by default\n  readPreference = readPreference || ReadPreference.primary;\n\n  // Do we have a custom readPreference strategy, use it\n  if(s.readPreferenceStrategies != null && s.readPreferenceStrategies[readPreference.preference] != null) {\n    if(s.readPreferenceStrategies[readPreference.preference] == null) throw new MongoError(f(\"cannot locate read preference handler for %s\", readPreference.preference));\n    var server = s.readPreferenceStrategies[readPreference.preference].pickServer(s.replState, readPreference);\n    if(s.debug) self.emit('pickedServer', readPreference, server);\n    return server;\n  }\n\n  // Get all the secondaries\n  var secondaries = s.replState.getSecondaries();\n\n  // Check if we can satisfy and of the basic read Preferences\n  if(readPreference.equals(ReadPreference.secondary)\n    && secondaries.length == 0)\n      throw new MongoError(\"no secondary server available\");\n\n  if(readPreference.equals(ReadPreference.secondaryPreferred)\n      && secondaries.length == 0\n      && s.replState.primary == null)\n    throw new MongoError(\"no secondary or primary server available\");\n\n  if(readPreference.equals(ReadPreference.primary)\n    && s.replState.primary == null)\n      throw new MongoError(\"no primary server available\");\n\n  // Secondary\n  if(readPreference.equals(ReadPreference.secondary)) {\n    s.index = (s.index + 1) % secondaries.length;\n    return secondaries[s.index];\n  }\n\n  // Secondary preferred\n  if(readPreference.equals(ReadPreference.secondaryPreferred)) {\n    if(secondaries.length > 0) {\n      // Apply tags if present\n      var servers = filterByTags(readPreference, secondaries);\n      // If have a matching server pick one otherwise fall through to primary\n      if(servers.length > 0) {\n        s.index = (s.index + 1) % servers.length;\n        return servers[s.index];\n      }\n    }\n\n    return s.replState.primary;\n  }\n\n  // Primary preferred\n  if(readPreference.equals(ReadPreference.primaryPreferred)) {\n    if(s.replState.primary) return s.replState.primary;\n\n    if(secondaries.length > 0) {\n      // Apply tags if present\n      var servers = filterByTags(readPreference, secondaries);\n      // If have a matching server pick one otherwise fall through to primary\n      if(servers.length > 0) {\n        s.index = (s.index + 1) % servers.length;\n        return servers[s.index];\n      }\n\n      // Throw error a we have not valid secondary or primary servers\n      throw new MongoError(\"no secondary or primary server available\");\n    }\n  }\n\n  // Return the primary\n  return s.replState.primary;\n}\n\nvar setHaTimer = function(self, state) {\n  if(state.highAvailabilityProcessRunning) return;\n  // all haTimers are set to to repeat, so we pass norepeat false\n  self.s.haTimer = setTimeout(replicasetInquirer(self, state, false), state.currentHaInterval);\n  return self.s.haTimer;\n}\n\nvar haveAvailableServers = function(state) {\n  if(state.disconnectedServers.length == 0\n    && state.replState.secondaries.length == 0\n    && state.replState.arbiters.length == 0\n    && state.replState.primary == null) return false;\n    return true;\n}\n\nvar merge = function(list, newList) {\n  var finalList = list.slice(0)\n\n  for(var i = 0; i < newList.length; i++) {\n    if(finalList.indexOf(newList[i]) == -1) finalList.push(newList[i]);\n  }\n\n  return finalList;\n}\n\nvar replicasetInquirer = function(self, state, norepeat) {\n  return function() {\n    // Process already running don't rerun\n    if(state.highAvailabilityProcessRunning) {\n      return;\n    }\n\n    // State destroyed return\n    if(state.replState.state == DESTROYED) {\n      return\n    }\n\n    // Do we have a primary, ensure we only monitor by the haInterval\n    if(state.replState.isPrimaryConnected()) {\n      self.s.currentHaInterval = self.s.haInterval;\n    } else {\n      self.s.currentHaInterval = self.s.minHeartbeatFrequencyMS;\n    }\n\n    // Clean out any failed connection attempts\n    state.replState.clearConnectingServers();\n\n    // Cleanup state (removed disconnected servers)\n    state.replState.clean();\n\n    // Started processes\n    state.highAvailabilityProcessRunning = true;\n    // We have no connections we need to reseed the disconnected list\n    if(!haveAvailableServers(state)) {\n      // For all entries in the seedlist build a server instance\n      state.disconnectedServers = state.seedlist.map(function(e) {\n        // Clone options\n        var opts = cloneOptions(state.options);\n        // Add host and port\n        opts.host = e.host;\n        opts.port = e.port;\n        opts.reconnect = false;\n        opts.readPreferenceStrategies = state.readPreferenceStrategies;\n        opts.emitError = true;\n        // Add a reserved connection for monitoring\n        opts.size = opts.size + 1;\n        opts.monitoring = true;\n        opts.topologyId = self.s.id;\n        // Server is in topology\n        opts.inTopology = true;\n        // Set up tags if any\n        if(state.tag) opts.tag = state.tag;\n        // Share the auth store\n        opts.authProviders = state.authProviders;\n        // Create a new Server\n        var server = new Server(opts);\n        // Handle the ismaster\n        server.on('ismaster', handleIsmaster(self));\n        return server;\n      });\n    }\n\n    if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring process running %s', state.id, JSON.stringify(state.replState)));\n\n    // Unique HA id to identify the current look running\n    var localHaId = state.haId++;\n\n    // Controls if we are doing a single inquiry or repeating\n    norepeat = typeof norepeat == 'boolean' ? norepeat : false;\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if(state.replState.isPrimaryConnected() && state.replState.isSecondaryConnected() && state.disconnectHandler) {\n      state.disconnectHandler.execute();\n    }\n\n    // Emit replicasetInquirer\n    self.emit('ha', 'start', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n\n    // Let's process all the disconnected servers\n    while(state.disconnectedServers.length > 0) {\n      // Get the first disconnected server\n      var server = state.disconnectedServers.shift();\n      if(state.logger.isInfo()) state.logger.info(f('[%s] monitoring attempting to connect to %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n      // Set up the event handlers\n      server.once('error', errorHandlerTemp(self, state, 'error'));\n      server.once('close', errorHandlerTemp(self, state, 'close'));\n      server.once('timeout', errorHandlerTemp(self, state, 'timeout'));\n      server.once('connect', connectHandler(self, state));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n      server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n      server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n      server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n      server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n      server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n\n      // Ensure we schedule the opening of new socket\n      // on separate ticks of the event loop\n      var execute = function(_server) {\n        // Attempt to connect\n        process.nextTick(function() {\n          _server.connect();\n        });\n      }\n\n      execute(server);\n    }\n\n    // We need to query all servers\n    var servers = state.replState.getAll({includeArbiters:true});\n    var serversLeft = servers.length;\n\n    // If no servers and we are not destroyed keep pinging\n    if(servers.length == 0 && state.replState.state == CONNECTED) {\n      // Emit ha process end\n      self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n      // Ended highAvailabilityProcessRunning\n      state.highAvailabilityProcessRunning = false;\n      // Restart ha process\n      if(!norepeat) {\n        setHaTimer(self, state);\n      }\n\n      return;\n    }\n\n    //\n    // ismaster for Master server\n    var primaryIsMaster = null;\n\n    //\n    // Inspect a specific servers ismaster\n    var inspectServer = function(server, callback) {\n      if(state.replState.state == DESTROYED) {\n        return;\n      }\n\n      if(server && !server.isConnected()) {\n        return callback();\n      }\n\n      // Did we get a server\n      if(server && server.isConnected()) {\n        // Execute ismaster\n        server.command('admin.$cmd', { ismaster:true }, {monitoring: true}, function(err, r) {\n          // If the state was destroyed\n          if(state.replState.state == DESTROYED) {\n            return callback();\n          }\n\n          // Count down the number of servers left\n          serversLeft = serversLeft - 1;\n\n          // If we have an error but still outstanding server request return\n          if(err && serversLeft > 0) {\n            return callback();\n          }\n\n          // We had an error and have no more servers to inspect, schedule a new check\n          if(err && serversLeft == 0) {\n            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n            // Ended highAvailabilityProcessRunning\n            state.highAvailabilityProcessRunning = false;\n            // Return the replicasetInquirer\n            return callback();\n          }\n\n          // Let all the read Preferences do things to the servers\n          var rPreferencesCount = Object.keys(state.readPreferenceStrategies).length;\n\n          // Handle the primary\n          var ismaster = r.result;\n          if(state.logger.isDebug()) state.logger.debug(f('[%s] monitoring process ismaster %s', state.id, JSON.stringify(ismaster)));\n\n          // Update server instance ismaster to ensure proper sync\n          // when producing SDAM monitoring events\n          server.s.ismaster = ismaster;\n\n          // Update the replicaset state\n          if(!state.replState.update(ismaster, server) && !state.replState.contains(server)) {\n            // Destroy the instance\n            server.destroy();\n            // Return\n            return callback();\n          }\n\n          //\n          // Process hosts list from ismaster under two conditions\n          // 1. Ismaster result is from primary\n          // 2. There is no primary and the ismaster result is from a non-primary\n          if(err == null\n            && (ismaster.ismaster || (!state.primary))\n            && Array.isArray(ismaster.hosts)) {\n            // Hosts to process\n            var hosts = ismaster.hosts;\n            // Add arbiters to list of hosts if we have any\n            if(Array.isArray(ismaster.arbiters)) {\n              hosts = hosts.concat(ismaster.arbiters.map(function(x) {\n                return {host: x, arbiter:true};\n              }));\n            }\n\n            if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);\n            // Process all the hsots\n            processHosts(self, state, hosts);\n          } else if(err == null && !Array.isArray(ismaster.hosts)) {\n            // Destroy the instance\n            server.destroy();\n            // Return\n            return callback();\n          }\n\n          // No read Preferences strategies\n          if(rPreferencesCount == 0) {\n            // Don't schedule a new inquiry\n            if(serversLeft > 0) {\n              return callback();\n            }\n\n            // Emit ha process end\n            self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n            // Ended highAvailabilityProcessRunning\n            state.highAvailabilityProcessRunning = false;\n            return callback();\n          }\n\n          // No servers left to query, execute read preference strategies\n          if(serversLeft == 0) {\n            // Go over all the read preferences\n            for(var name in state.readPreferenceStrategies) {\n              state.readPreferenceStrategies[name].ha(self, state.replState, function() {\n                rPreferencesCount = rPreferencesCount - 1;\n\n                if(rPreferencesCount == 0) {\n                  // Add any new servers in primary ismaster\n                  if(err == null\n                    && ismaster.ismaster\n                    && Array.isArray(ismaster.hosts)) {\n                      processHosts(self, state, ismaster.hosts);\n                  }\n\n                  // Emit ha process end\n                  self.emit('ha', 'end', {norepeat: norepeat, id: localHaId, state: state.replState ? state.replState.toJSON() : {}});\n                  // Ended highAvailabilityProcessRunning\n                  state.highAvailabilityProcessRunning = false;\n                  return callback();\n                }\n              });\n            }\n          }\n\n          callback();\n        });\n      }\n    }\n\n    // Go over all the servers\n    if(servers.length == 0) {\n      // Set the high availability\n      state.highAvailabilityProcessRunning = false;\n      // Check if we need to emit a fullsetup event\n      checkAndEmitEvent(self, state, 'fullsetup');\n      // Check if we need to emit the all event\n      checkAndEmitEvent(self, state, 'all');\n      // Repeat the process\n      if(!norepeat) {\n        setHaTimer(self, state);\n      }\n    }\n\n    // Ge the number of servers left\n    var left = servers.length;\n    // Call ismaster on all servers\n    for(var i = 0; i < servers.length; i++) {\n      inspectServer(servers[i], function() {\n        left = left - 1;\n\n        if(left == 0) {\n          // Set the high availability\n          state.highAvailabilityProcessRunning = false;\n          // Check if we need to emit a fullsetup event\n          checkAndEmitEvent(self, state, 'fullsetup');\n          // Check if we need to emit the all event\n          checkAndEmitEvent(self, state, 'all');\n          // Repeat the process\n          if(!norepeat) {\n            setHaTimer(self, state);\n          }\n        }\n      });\n    }\n  }\n}\n\n// Error handler for initial connect\nvar errorHandlerTemp = function(self, state, event) {\n  return function(err, server) {\n    // Destroy the server\n    server.destroy();\n    // Log the information\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s disconnected', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    // Filter out any connection servers\n    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {\n      return server.name != _server.name;\n    });\n\n    // Remove from list of connected servers\n    state.replState.removeConnectingServer(server.name);\n\n    // Connection is destroyed, ignore\n    if(state.replState.state == DESTROYED) return;\n\n    // Remove any non used handlers\n    ['error', 'close', 'timeout', 'connect',\n      'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'].forEach(function(e) {\n      server.removeAllListeners(e);\n    })\n\n    // Push to list of disconnected servers\n    addToListIfNotExist(state.disconnectedServers, server);\n\n    // End connection operation if we have no legal replicaset state\n    if(state.initialConnectionServers == 0 && state.replState.state == CONNECTING) {\n       if((state.secondaryOnlyConnectionAllowed && !state.replState.isSecondaryConnected() && !state.replState.isPrimaryConnected())\n        || (!state.secondaryOnlyConnectionAllowed && !state.replState.isPrimaryConnected())) {\n          if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));\n\n          if(self.listeners('error').length > 0) {\n            return self.emit('error', new MongoError('no valid seed servers in list'));\n          }\n       }\n    }\n\n    // If the number of disconnected servers is equal to\n    // the number of seed servers we cannot connect\n    if(state.disconnectedServers.length == state.seedlist.length && state.replState.state == CONNECTING) {\n      if(state.emitError && self.listeners('error').length > 0) {\n        if(state.logger.isInfo()) state.logger.info(f('[%s] no valid seed servers in list', state.id));\n\n        if(self.listeners('error').length > 0) {\n          self.emit('error', new MongoError('no valid seed servers in list'));\n        }\n      }\n    }\n  }\n}\n\n// Connect handler\nvar connectHandler = function(self, state) {\n  return function(server) {\n    if(state.logger.isInfo()) state.logger.info(f('[%s] connected to %s', state.id, server.name));\n    // Destroyed connection\n    if(state.replState.state == DESTROYED) {\n      return server.destroy(false, false);\n    }\n\n    // Filter out any connection servers\n    state.initialConnectionServers = state.initialConnectionServers.filter(function(_server) {\n      return server.name != _server.name;\n    });\n\n    var ismaster = server.lastIsMaster();\n\n    // Process the new server\n    var processNewServer = function() {\n      // Discover any additional servers\n      var ismaster = server.lastIsMaster();\n\n      // Deal with events\n      var events = ['error', 'close', 'timeout', 'connect', 'message',\n        'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n        'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'];\n      // Remove any non used handlers\n      events.forEach(function(e) {\n        server.removeAllListeners(e);\n      })\n\n      // Clean up\n      // delete state.connectingServers[server.name];\n      state.replState.removeConnectingServer(server.name);\n\n      // Update the replicaset state, destroy if not added\n      if(!state.replState.update(ismaster, server) && !state.replState.contains(server)) {\n        // Destroy the server instance\n        server.destroy();\n        // No more candiate servers\n        if(state.state == CONNECTING && state.initialConnectionServers.length == 0\n          && state.replState.primary == null && state.replState.secondaries.length == 0) {\n            return self.emit('error', new MongoError(\"no replicaset members found in seedlist\"));\n        }\n\n        return;\n      }\n\n      // Add the server handling code\n      if(server.isConnected()) {\n        server.on('error', errorHandler(self, state));\n        server.on('close', closeHandler(self, state));\n        server.on('timeout', timeoutHandler(self, state));\n\n        // SDAM Monitoring events\n        server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n        server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n        server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n        server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n        server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n        server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n      }\n\n      // Hosts to process\n      var hosts = ismaster.hosts;\n      // Add arbiters to list of hosts if we have any\n      if(Array.isArray(ismaster.arbiters)) {\n        hosts = hosts.concat(ismaster.arbiters.map(function(x) {\n          return {host: x, arbiter:true};\n        }));\n      }\n\n      if(Array.isArray(ismaster.passives)) hosts = hosts.concat(ismaster.passives);\n\n      // Add any new servers\n      processHosts(self, state, hosts);\n\n      // If have the server instance already destroy it\n      if(state.initialConnectionServers.length == 0 && state.replState.connectingServersCount() == 0\n        && !state.replState.isPrimaryConnected() && !state.secondaryOnlyConnectionAllowed && state.replState.state == CONNECTING) {\n        if(state.logger.isInfo()) state.logger.info(f('[%s] no primary found in replicaset', state.id));\n        self.emit('error', new MongoError(\"no primary found in replicaset\"));\n        return self.destroy();\n      }\n\n      // Check if we need to emit a fullsetup event\n      checkAndEmitEvent(self, state, 'fullsetup');\n      // Check if we need to emit the all event\n      checkAndEmitEvent(self, state, 'all');\n    }\n\n    // Save up new members to be authenticated against\n    if(self.s.authInProgress) {\n      self.s.authInProgressServers.push(server);\n    }\n\n    // No credentials just process server\n    if(state.credentials.length == 0) return processNewServer();\n\n    // Apply all the credentials serially\n    var applyCredentials = function(server, index, credentials, callback) {\n      if(index >= credentials.length || credentials.length == 0) return callback();\n      // Apply the credential\n      server.auth.apply(server, credentials[index].concat([function(err, r) {\n        if(err) return callback(err);\n        applyCredentials(server, index + 1, credentials, callback);\n      }]));\n    }\n\n    applyCredentials(server, 0, state.credentials, function(err) {\n      if(err) {\n        return server.destroy();\n      }\n\n      // Did not fail the authentication, process the instance\n      processNewServer();\n    });\n  }\n}\n\n//\n// Detect if we need to add new servers\nvar processHosts = function(self, state, hosts) {\n  if(state.replState.state == DESTROYED) return;\n  if(Array.isArray(hosts)) {\n    // Check any hosts exposed by ismaster\n    for(var i = 0; i < hosts.length; i++) {\n      // Get the object\n      var host = hosts[i];\n      var options = {};\n\n      // Do we have an arbiter\n      if(typeof host == 'object') {\n        host = host.host;\n        options.arbiter = host.arbiter;\n      }\n\n      // If not found we need to create a new connection\n      if(!state.replState.contains(host)) {\n        if(!state.replState.isConnectingServer(host) && !inInitialConnectingServers(self, state, host)) {\n          if(state.logger.isInfo()) state.logger.info(f('[%s] scheduled server %s for connection', state.id, host));\n          // Make sure we know what is trying to connect\n          state.replState.addConnectingServer(host, host);\n          // Connect the server\n          connectToServer(self, state, host.split(':')[0], parseInt(host.split(':')[1], 10), options);\n        }\n      }\n    }\n  }\n}\n\nvar inInitialConnectingServers = function(self, state, address) {\n  for(var i = 0; i < state.initialConnectionServers.length; i++) {\n    if(state.initialConnectionServers[i].name == address) return true;\n  }\n  return false;\n}\n\n// Connect to a new server\nvar connectToServer = function(self, state, host, port, options) {\n  options = options || {};\n  var opts = cloneOptions(state.options);\n  opts.host = host;\n  opts.port = port;\n  opts.reconnect = false;\n  opts.readPreferenceStrategies = state.readPreferenceStrategies;\n  if(state.tag) opts.tag = state.tag;\n  // Share the auth store\n  opts.authProviders = state.authProviders;\n  opts.emitError = true;\n  // Server is in topology\n  opts.inTopology = true;\n  // Set the size to size + 1 and mark monitoring\n  opts.size = opts.size + 1;\n  opts.monitoring = true;\n  opts.topologyId = self.s.id;\n\n  // Do we have an arbiter set the poolSize to 1\n  if(options.arbiter) {\n    opts.size = 1;\n  }\n\n  // Do not create a new server instance\n  if(self.s.replState.state == DESTROYED) return;\n\n  // Create a new server instance\n  var server = new Server(opts);\n  // Handle the ismaster\n  server.on('ismaster', handleIsmaster(self));\n  // Set up the event handlers\n  server.once('error', errorHandlerTemp(self, state, 'error'));\n  server.once('close', errorHandlerTemp(self, state, 'close'));\n  server.once('timeout', errorHandlerTemp(self, state, 'timeout'));\n  server.once('connect', connectHandler(self, state));\n\n  // SDAM Monitoring events\n  server.on('serverOpening', function(e) { self.emit('serverOpening', e); });\n  server.on('serverDescriptionChanged', function(e) { self.emit('serverDescriptionChanged', e); });\n  server.on('serverHeartbeatStarted', function(e) { self.emit('serverHeartbeatStarted', e); });\n  server.on('serverHeartbeatSucceeded', function(e) { self.emit('serverHeartbeatSucceeded', e); });\n  server.on('serverHearbeatFailed', function(e) { self.emit('serverHearbeatFailed', e); });\n  server.on('serverClosed', function(e) { self.emit('serverClosed', e); });\n\n  // Ensure we schedule the opening of new socket\n  // on separate ticks of the event loop\n  var execute = function(_server) {\n    // Attempt to connect\n    process.nextTick(function() {\n      if(self.s.replState.state == DESTROYED) return;\n      _server.connect();\n    });\n  }\n\n  // Add server as connecting\n  state.replState.addConnectingServer(server.name, host);\n  // Attempt connection of server\n  execute(server);\n}\n\n//\n// Add server to the list if it does not exist\nvar addToListIfNotExist = function(list, server) {\n  var found = false;\n  // If the server is a null value return false\n  if(server == null) return found;\n\n  // Remove any non used handlers\n  ['error', 'close', 'timeout', 'connect',\n    'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n    'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'].forEach(function(e) {\n    server.removeAllListeners(e);\n  })\n\n  // Check if the server already exists\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) found = true;\n  }\n\n  if(!found) {\n    list.push(server);\n  }\n\n  return found;\n}\n\nvar errorHandler = function(self, state) {\n  return function(err, server) {\n    // Destroy the server\n    server.destroy();\n    // Remove from list of connected servers\n    state.replState.removeConnectingServer(server.name);\n    // Check if destroyed the topology\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s errored out with %s', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name, JSON.stringify(err)));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) self.emit('left', state.replState.remove(server), server);\n    if(found && state.emitError && self.listeners('error').length > 0) self.emit('error', err, server);\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, server) {\n    // Destroy the server\n    server.destroy();\n    // Remove from list of connected servers\n    state.replState.removeConnectingServer(server.name);\n    // Check if destroyed the topology\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s timed out', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) self.emit('left', state.replState.remove(server), server);\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, server) {\n    // Destroy the server\n    server.destroy();\n    // Remove from list of connected servers\n    state.replState.removeConnectingServer(server.name);\n    // Check if destroyed the topology\n    if(state.replState.state == DESTROYED) return;\n    if(state.logger.isInfo()) state.logger.info(f('[%s] server %s closed', state.id, server.lastIsMaster() ? server.lastIsMaster().me : server.name));\n    var found = addToListIfNotExist(state.disconnectedServers, server);\n    if(!found) {\n      self.emit('left', state.replState.remove(server), server);\n    }\n  }\n}\n\n//\n// Validate if a non-master or recovering error\nvar notMasterError = function(r) {\n  // Get result of any\n  var result = r && r.result ? r.result : r;\n\n  // Explore if we have a not master error\n  if(result && (result.err == 'not master'\n    || result.errmsg == 'not master' || (result['$err'] && result['$err'].indexOf('not master or secondary') != -1)\n    || (result['$err'] && result['$err'].indexOf(\"not master and slaveOk=false\") != -1)\n    || result.errmsg == 'node is recovering')) {\n    return true;\n  }\n\n  return false;\n}\n\nmodule.exports = ReplSet;\n"]}