{"version":3,"sources":["ping.js"],"names":[],"mappings":"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","file":"ping-compiled.js","sourcesContent":["\"use strict\";\n\nvar Logger = require('../../connection/logger')\n  , EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format;\n\n/**\n * Creates a new Ping read preference strategy instance\n * @class\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.acceptableLatency=250] Acceptable latency for selecting a server for reading (in milliseconds)\n * @return {Ping} A cursor instance\n */\nvar Ping = function(options) {\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Contains the ping state\n  this.s = {\n    // Contains all the ping data\n      pings: {}\n    // Set no options if none provided\n    , options: options || {}\n    // Logger\n    , logger: Logger('Ping', options)\n    // Ping interval\n    , pingInterval: options.pingInterval || 10000\n    , acceptableLatency: options.acceptableLatency || 15\n    // Debug options\n    , debug: typeof options.debug == 'boolean' ? options.debug : false\n    // Index\n    , index: 0\n    // Current ping time\n    , lastPing: null\n\n  }\n\n  // Log the options set\n  if(this.s.logger.isDebug()) this.s.logger.debug(f('ping strategy interval [%s], acceptableLatency [%s]', this.s.pingInterval, this.s.acceptableLatency));\n\n  // If we have enabled debug \n  if(this.s.debug) {\n    // Add access to the read Preference Strategies\n    Object.defineProperty(this, 'data', {\n      enumerable: true, get: function() { return this.s.pings; }\n    });    \n  }\n}\n\ninherits(Ping, EventEmitter);\n\n/**\n * @ignore\n */\nvar filterByTags = function(readPreference, servers) {\n  if(readPreference.tags == null) return servers;\n  var filteredServers = [];\n  var tags = readPreference.tags;\n\n  // Iterate over all the servers\n  for(var i = 0; i < servers.length; i++) {\n    var serverTag = servers[i].lastIsMaster().tags || {};\n    // Did we find the a matching server\n    var found = true;\n    // Check if the server is valid\n    for(var name in tags) {\n      if(serverTag[name] != tags[name]) found = false;\n    }\n\n    // Add to candidate list\n    if(found) filteredServers.push(servers[i]);\n  }\n\n  // Returned filtered servers\n  return filteredServers;\n}\n\n/**\n * Pick a server\n * @method\n * @param {State} set The current replicaset state object \n * @param {ReadPreference} readPreference The current readPreference object\n * @param {readPreferenceResultCallback} callback The callback to return the result from the function\n * @return {object}\n */\nPing.prototype.pickServer = function(set, readPreference) {\n  var self = this;\n  // Only get primary and secondaries as seeds\n  var seeds = {};\n  var servers = [];\n  if(set.primary) {\n    servers.push(set.primary);\n  }\n\n  for(var i = 0; i < set.secondaries.length; i++) {\n    servers.push(set.secondaries[i]);\n  }\n\n  // Filter by tags\n  servers = filterByTags(readPreference, servers);\n\n  // Transform the list\n  var serverList = [];\n  // for(var name in seeds) {\n  for(var i = 0; i < servers.length; i++) {\n    serverList.push({name: servers[i].name, time: self.s.pings[servers[i].name] || 0});\n  }\n\n  // Sort by time\n  serverList.sort(function(a, b) {\n    return a.time > b.time;\n  });\n\n  // Locate lowest time (picked servers are lowest time + acceptable Latency margin)\n  var lowest = serverList.length > 0 ? serverList[0].time : 0;\n\n  // Filter by latency\n  serverList = serverList.filter(function(s) {\n    return s.time <= lowest + self.s.acceptableLatency;\n  });\n\n  // No servers, default to primary\n  if(serverList.length == 0 && set.primary) {\n    if(self.s.logger.isInfo()) self.s.logger.info(f('picked primary server [%s]', set.primary.name));\n    return set.primary;\n  } else if(serverList.length == 0) {\n    return null\n  }\n\n  // We picked first server\n  if(self.s.logger.isInfo()) self.s.logger.info(f('picked server [%s] with ping latency [%s]', serverList[0].name, serverList[0].time));\n\n  // Add to the index\n  self.s.index = self.s.index + 1;\n  // Select the index\n  self.s.index = self.s.index % serverList.length;\n  // Return the first server of the sorted and filtered list\n  return set.get(serverList[self.s.index].name);\n}\n\n/**\n * Start of an operation\n * @method\n * @param {Server} server The server the operation is running against\n * @param {object} query The operation running\n * @param {Date} date The start time of the operation\n * @return {object}\n */\nPing.prototype.startOperation = function(server, query, date) {\n}\n\n/**\n * End of an operation\n * @method\n * @param {Server} server The server the operation is running against\n * @param {error} err An error from the operation\n * @param {object} result The result from the operation\n * @param {Date} date The start time of the operation\n * @return {object}\n */\nPing.prototype.endOperation = function(server, err, result, date) {\n}\n\n/**\n * High availability process running\n * @method\n * @param {State} set The current replicaset state object \n * @param {resultCallback} callback The callback to return the result from the function\n * @return {object}\n */\nPing.prototype.ha = function(topology, state, callback) {\n  var self = this;\n  var servers = state.getAll();\n  var count = servers.length;\n\n  // No servers return\n  if(servers.length == 0) return callback(null, null);\n\n  // Return if we have not yet reached the ping interval\n  if(self.s.lastPing != null) {\n    var diff = new Date().getTime() - self.s.lastPing.getTime();\n    if(diff < self.s.pingInterval) return callback(null, null);\n  }\n\n  // Execute operation\n  var operation = function(_server) {\n    var start = new Date();\n    // Execute ping against server\n    _server.command('system.$cmd', {ismaster:1}, function(err, r) {\n      count = count - 1;\n      var time = new Date().getTime() - start.getTime();\n      self.s.pings[_server.name] = time;\n      // Log info for debug\n      if(self.s.logger.isDebug()) self.s.logger.debug(f('ha latency for server [%s] is [%s] ms', _server.name, time));\n      // We are done with all the servers\n      if(count == 0) {\n        // Emit ping event\n        topology.emit('ping', err, r ? r.result : null);\n        // Update the last ping time\n        self.s.lastPing = new Date();\n        // Return\n        callback(null, null);\n      }\n    });\n  }\n\n  // Let's ping all servers\n  while(servers.length > 0) {\n    operation(servers.shift());\n  }\n}\n\nvar removeServer = function(self, server) {\n  delete self.s.pings[server.name];\n}\n\n/**\n * Server connection closed\n * @method\n * @param {Server} server The server that closed\n */\nPing.prototype.close = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection errored out\n * @method\n * @param {Server} server The server that errored out\n */\nPing.prototype.error = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection timeout\n * @method\n * @param {Server} server The server that timed out\n */\nPing.prototype.timeout = function(server) {\n  removeServer(this, server);\n}\n\n/**\n * Server connection happened\n * @method\n * @param {Server} server The server that connected\n * @param {resultCallback} callback The callback to return the result from the function\n */\nPing.prototype.connect = function(server, callback) {\n  var self = this;\n  // Get the command start date\n  var start = new Date();\n  // Execute ping against server\n  server.command('system.$cmd', {ismaster:1}, function(err, r) {\n    var time = new Date().getTime() - start.getTime();\n    self.s.pings[server.name] = time;\n    // Log info for debug\n    if(self.s.logger.isDebug()) self.s.logger.debug(f('connect latency for server [%s] is [%s] ms', server.name, time));\n    // Set last ping\n    self.s.lastPing = new Date();\n    // Done, return\n    callback(null, null);\n  });    \n}\n\n/**\n * This is a result from a readPreference strategy\n *\n * @callback readPreferenceResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {Server} server The server picked by the strategy\n */\n\nmodule.exports = Ping;"]}