{"version":3,"sources":["replset_state.js"],"names":[],"mappings":"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","file":"replset_state-compiled.js","sourcesContent":["\"use strict\";\n\nvar Logger = require('../connection/logger')\n  , f = require('util').format\n  , ObjectId = require('bson').ObjectId\n  , MongoError = require('../error');\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n/**\n * Creates a new Replicaset State object\n * @class\n * @property {object} primary Primary property\n * @property {array} secondaries List of secondaries\n * @property {array} arbiters List of arbiters\n * @return {State} A cursor instance\n */\nvar State = function(replSet, options) {\n  this.replSet = replSet;\n  this.options = options;\n  this.secondaries = [];\n  this.arbiters = [];\n  this.passives = [];\n  this.primary = null;\n  // Initial state is disconnected\n  this.state = DISCONNECTED;\n  // Current electionId\n  this.electionId = null;\n  // Get a logger instance\n  this.logger = Logger('ReplSet', options);\n  // Unpacked options\n  this.id = options.id;\n  this.setName = options.setName;\n  this.connectingServers = {};\n  this.secondaryOnlyConnectionAllowed = options.secondaryOnlyConnectionAllowed;\n  // Description of the Replicaset\n  this.replicasetDescription = null;\n}\n\n/**\n * Is there a secondary connected\n * @method\n * @return {boolean}\n */\nState.prototype.resetDescription = function() {\n  this.replicasetDescription = {\n    \"topologyType\": \"Unknown\",\n    \"servers\": []\n  }\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  }\n\n  // Got through all the servers\n  for(var i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for(var j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if(prevServer.address === currServer.address) {\n        // We had a change in state\n        if(prevServer.type != currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\nfunction emitTopologyDescriptionChanged(self) {\n  if(self.replSet.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    var setName = self.setName;\n\n    if(self.isPrimaryConnected() && self.isSecondaryConnected()) {\n      topology = 'ReplicaSetWithPrimary';\n    } else if(!self.isPrimaryConnected() && self.isSecondaryConnected()) {\n      topology = 'ReplicaSetNoPrimary';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      setName: setName,\n      servers: []\n    }\n\n    // Add the primary to the list\n    if(self.isPrimaryConnected()) {\n      var desc = self.primary.getDescription();\n      desc.type = 'RSPrimary';\n      description.servers.push(desc);\n    }\n\n    // Add all the secondaries\n    description.servers = description.servers.concat(self.secondaries.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Add all the arbiters\n    description.servers = description.servers.concat(self.arbiters.map(function(x) {\n      var description = x.getDescription();\n      return description;\n    }));\n\n    // Add all the passives\n    description.servers = description.servers.concat(self.passives.map(function(x) {\n      var description = x.getDescription();\n      description.type = 'RSSecondary';\n      return description;\n    }));\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.replicasetDescription,\n      newDescription: description,\n      diff: diff(self.replicasetDescription, description)\n    };\n\n    // Emit the topologyDescription change\n    self.replSet.emit('topologyDescriptionChanged', result);\n\n    // Set the new description\n    self.replicasetDescription = description;\n  }\n}\n\n/**\n * Is there a secondary connected\n * @method\n * @return {boolean}\n */\nState.prototype.isSecondaryConnected = function() {\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].isConnected()) return true;\n  }\n\n  return false;\n}\n\n/**\n * Is there a primary connection\n * @method\n * @return {boolean}\n */\nState.prototype.isPrimaryConnected = function() {\n  return this.primary != null && this.primary.isConnected();\n}\n\n/**\n * Is the given address the primary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isPrimary = function(address) {\n  if(this.primary == null) return false;\n  return this.primary && this.primary.equals(address);\n}\n\n/**\n * Is the given address a secondary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isSecondary = function(address) {\n  // Check if the server is a secondary at the moment\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].equals(address)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Is the given address a secondary\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.isPassive = function(address) {\n  // Check if the server is a secondary at the moment\n  for(var i = 0; i < this.passives.length; i++) {\n    if(this.passives[i].equals(address)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nState.prototype.clearConnectingServers = function() {\n  for(var name in this.connectingServers) {\n    if(typeof this.connectingServers[name].destroy == 'function') {\n      this.connectingServers[name].destroy();\n    }\n  }\n\n  this.connectingServers = {};\n}\n\nState.prototype.removeConnectingServer = function(address) {\n  if(this.connectingServers[address]) {\n    if(this.connectingServers[address].destroy) {\n      this.connectingServers[address].destroy();\n    }\n  }\n\n  delete this.connectingServers[address];\n}\n\nState.prototype.addConnectingServer = function(host, object) {\n  this.connectingServers[host] = object;\n}\n\nState.prototype.isConnectingServer = function(host) {\n  return this.connectingServers[host] != null;\n}\n\nState.prototype.connectingServersCount = function() {\n  return Object.keys(this.connectingServers).length;\n}\n\n/**\n * Does the replicaset contain this server\n * @method\n * @param {string} address Server address\n * @return {boolean}\n */\nState.prototype.contains = function(address) {\n  if(this.primary && this.primary.equals(address)) return true;\n  for(var i = 0; i < this.secondaries.length; i++) {\n    if(this.secondaries[i].equals(address)) return true;\n  }\n\n  for(var i = 0; i < this.arbiters.length; i++) {\n    if(this.arbiters[i].equals(address)) return true;\n  }\n\n  for(var i = 0; i < this.passives.length; i++) {\n    if(this.passives[i].equals(address)) return true;\n  }\n\n  return false;\n}\n\n/**\n * Return all the valid and non passive secondaries\n * @method\n * @return {Array[Server]}\n */\nState.prototype.getSecondaries = function() {\n  // Filter out any non connected servers\n  this.secondaries = this.secondaries.filter(function(server) {\n    return server.isConnected();\n  });\n\n  // Filter out any hidden secondaries\n  return this.secondaries.filter(function(server) {\n    return server.lastIsMaster().hidden ? false : true;\n  });\n}\n\n/**\n * Clean out all dead connections\n * @method\n */\nState.prototype.clean = function() {\n  var self = this;\n  var disconnectedServers = [];\n\n  if(this.primary != null && !this.primary.isConnected()) {\n    disconnectedServers.push(this.primary);\n    this.primary = null;\n  }\n\n  // Filter out disconnected servers\n  this.secondaries = this.secondaries.filter(function(s) {\n    if(!s.isConnected()) disconnectedServers.push(s);\n    return s.isConnected();\n  });\n\n  // Filter out disconnected servers\n  this.arbiters = this.arbiters.filter(function(s) {\n    if(!s.isConnected()) disconnectedServers.push(s);\n    return s.isConnected();\n  });\n\n  // Filter out disconnected servers\n  this.passives = this.passives.filter(function(s) {\n    if(!s.isConnected()) disconnectedServers.push(s);\n    return s.isConnected();\n  });\n\n  return disconnectedServers;\n}\n\n/**\n * Unref state\n * @method\n */\nState.prototype.unref = function() {\n  if(this.primary) this.primary.unref();\n  this.secondaries.forEach(function(s) {\n    s.unref();\n  });\n  this.arbiters.forEach(function(s) {\n    s.unref();\n  });\n}\n\n// Remove listeners\nvar events = ['timeout', 'error', 'close', 'joined', 'left',\n  'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'];\n\nvar removeEvents = function(s) {\n  events.forEach(function(e) {\n    s.removeAllListeners(e);\n  });\n}\n\n/**\n * Destroy state\n * @method\n */\nState.prototype.destroy = function() {\n  this.state = DESTROYED;\n\n  if(this.primary) {\n    this.primary.destroy();\n    removeEvents(this.primary);\n  }\n\n  this.secondaries.forEach(function(s) {\n    s.destroy();\n    removeEvents(s);\n  });\n\n  this.arbiters.forEach(function(s) {\n    s.destroy();\n    removeEvents(s);\n  });\n}\n\n/**\n * Remove server from state\n * @method\n * @param {Server} Server to remove\n * @return {string} Returns type of server removed (primary|secondary)\n */\nState.prototype.remove = function(server) {\n  if(this.primary && this.primary.equals(server)) {\n    this.primary = null;\n  }\n\n  var length = this.arbiters.length;\n  // Filter out the server from the arbiters\n  this.arbiters = this.arbiters.filter(function(s) {\n    return !s.equals(server);\n  });\n  if(this.arbiters.length < length) return 'arbiter';\n\n  var length = this.passives.length;\n  // Filter out the server from the passives\n  this.passives = this.passives.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  // We have removed a passive\n  if(this.passives.length < length)  {\n    // Ensure we removed it from the list of secondaries as well if it exists\n    this.secondaries = this.secondaries.filter(function(s) {\n      return !s.equals(server);\n    });\n  }\n\n  // Filter out the server from the secondaries\n  this.secondaries = this.secondaries.filter(function(s) {\n    return !s.equals(server);\n  });\n\n  // Get the isMaster\n  var isMaster = server.lastIsMaster();\n  // Return primary if the server was primary\n  if(isMaster.ismaster && isMaster.hosts) return 'primary';\n  if(isMaster.ismaster) return 'secondary';\n  if(isMaster.secondary) return 'secondary';\n  if(isMaster.passive) return 'passive';\n  return 'arbiter';\n}\n\n/**\n * Get the server by name\n * @method\n * @param {string} address Server address\n * @return {Server}\n */\nState.prototype.get = function(server) {\n  var found = false;\n  // All servers to search\n  var servers = this.primary ? [this.primary] : [];\n  servers = servers.concat(this.secondaries);\n  // Locate the server\n  for(var i = 0; i < servers.length; i++) {\n    if(servers[i].equals(server)) {\n      return servers[i];\n    }\n  }\n}\n\n/**\n * Get all the servers in the set\n * @method\n * @param {boolean} [options.includeArbiters] Include Arbiters in returned server list\n * @return {array}\n */\nState.prototype.getAll = function(options) {\n  options = options || {};\n  var servers = [];\n  if(this.primary) servers.push(this.primary);\n  servers = servers.concat(this.secondaries);\n\n  // Include the arbiters\n  if(options.includeArbiters) {\n    servers = servers.concat(this.arbiters);\n  }\n\n  return servers;\n}\n\n/**\n * All raw connections\n * @method\n * @param {boolean} [options.includeArbiters] Include Arbiters in returned server list\n * @return {array}\n */\nState.prototype.getAllConnections = function(options) {\n  options = options || {};\n  var connections = [];\n  if(this.primary) connections = connections.concat(this.primary.connections());\n  this.secondaries.forEach(function(s) {\n    connections = connections.concat(s.connections());\n  })\n\n  // Include the arbiters\n  if(options.includeArbiters) {\n    this.arbiters.forEach(function(s) {\n      connections = connections.concat(s.connections());\n    })\n  }\n\n  return connections;\n}\n\n/**\n * Return JSON object\n * @method\n * @return {object}\n */\nState.prototype.toJSON = function() {\n  return {\n      primary: this.primary ? this.primary.lastIsMaster().me : null\n    , secondaries: this.secondaries.map(function(s) {\n      return s.lastIsMaster().me\n    })\n  }\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nState.prototype.lastIsMaster = function() {\n  if(this.primary) return this.primary.lastIsMaster();\n  if(this.secondaries.length > 0) return this.secondaries[0].lastIsMaster();\n  return {};\n}\n\n/**\n * Promote server to primary\n * @method\n * @param {Server} server Server we wish to promote\n */\nState.prototype.promotePrimary = function(server) {\n  var currentServer = this.get(server);\n  // Server does not exist in the state, add it as new primary\n  if(currentServer == null) {\n    this.primary = server;\n    return;\n  }\n\n  // We found a server, make it primary and remove it from the secondaries\n  // Remove the server first\n  this.remove(currentServer);\n  // Set as primary\n  this.primary = currentServer;\n}\n\nvar add = function(self, list, server) {\n  // Check if the server is contained in the list\n  for(var i = 0; i < list.length; i++) {\n    if(list[i].equals(server)) return false;\n  }\n\n  // Add serer to list\n  list.push(server);\n\n  // Return true\n  return true;\n}\n\n/**\n * Add server to list of secondaries\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addSecondary = function(server) {\n  return add(this, this.secondaries, server);\n}\n\n/**\n * Add server to list of arbiters\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addArbiter = function(server) {\n  return add(this, this.arbiters, server);\n}\n\n/**\n * Add server to list of passives\n * @method\n * @param {Server} server Server we wish to add\n */\nState.prototype.addPassive = function(server) {\n  return add(this, this.passives, server);\n}\n\nvar compareObjectIds = function(id1, id2) {\n  var a = new Buffer(id1.toHexString(), 'hex');\n  var b = new Buffer(id2.toHexString(), 'hex');\n\n  if(a === b) {\n    return 0;\n  }\n\n  if(typeof Buffer.compare === 'function') {\n    return Buffer.compare(a, b);\n  }\n\n  var x = a.length;\n  var y = b.length;\n  var len = Math.min(x, y);\n\n  for (var i = 0; i < len; i++) {\n    if (a[i] !== b[i]) {\n      break;\n    }\n  }\n\n  if (i !== len) {\n    x = a[i];\n    y = b[i];\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\n/**\n * Update the state given a specific ismaster result\n * @method\n * @param {object} ismaster IsMaster result\n * @param {Server} server IsMaster Server source\n */\nState.prototype.update = function(ismaster, server) {\n  var self = this;\n\n  // Perform a cleanup before performing the update\n  this.clean();\n\n  // Not in a known connection valid state\n  if((!ismaster.ismaster && !ismaster.secondary && !ismaster.arbiterOnly) || !Array.isArray(ismaster.hosts)) {\n    // Remove the state\n    var result = self.remove(server);\n    if(self.state == CONNECTED)  {\n      if(self.logger.isInfo()) self.logger.info(f('[%s] removing %s from set', self.id, ismaster.me));\n      self.replSet.emit('left', result, server);\n    }\n\n    emitTopologyDescriptionChanged(this);\n    return false;\n  }\n\n  // Set the setName if it's not set from the first server\n  if(self.setName == null && ismaster.setName) {\n    if(self.logger.isInfo()) self.logger.info(f('[%s] setting setName to %s', self.id, ismaster.setName));\n    self.setName = ismaster.setName;\n  }\n\n  // Check if the replicaset name matches the provided one\n  if(ismaster.setName && self.setName != ismaster.setName) {\n    if(self.logger.isError()) self.logger.error(f('[%s] server in replset %s is not part of the specified setName %s', self.id, ismaster.setName, self.setName));\n    self.remove(server);\n    self.replSet.emit('error', new MongoError(\"provided setName for Replicaset Connection does not match setName found in server seedlist\"));\n    emitTopologyDescriptionChanged(this);\n    return false;\n  }\n\n  // Log information\n  if(self.logger.isInfo()) self.logger.info(f('[%s] updating replicaset state %s', self.id, JSON.stringify(this)));\n\n  // It's a master set it\n  if(ismaster.ismaster && self.setName == ismaster.setName && !self.isPrimary(ismaster.me)) {\n    // Check if the electionId is not null\n    if(ismaster.electionId instanceof ObjectId && self.electionId instanceof ObjectId) {\n      if(compareObjectIds(self.electionId, ismaster.electionId) == -1) {\n        self.electionId = ismaster.electionId;\n      } else if(compareObjectIds(self.electionId, ismaster.electionId) == 0) {\n        self.electionId = ismaster.electionId;\n      } else {\n        return false;\n      }\n    }\n\n    // Initial electionId\n    if(ismaster.electionId instanceof ObjectId && self.electionId == null) {\n      self.electionId = ismaster.electionId;\n    }\n\n    // Promote to primary\n    self.promotePrimary(server);\n    // Log change of primary\n    if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to primary', self.id, ismaster.me));\n    // Emit primary\n    self.replSet.emit('joined', 'primary', this.primary);\n\n    // Emit the description change\n    emitTopologyDescriptionChanged(this);\n\n    // We are connected\n    if(self.state == CONNECTING) {\n      self.state = CONNECTED;\n      self.replSet.emit('connect', self.replSet);\n    } else {\n      self.state = CONNECTED;\n      self.replSet.emit('reconnect', server);\n    }\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.arbiterOnly) {\n      if(self.addArbiter(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to arbiter', self.id, ismaster.me));\n        self.replSet.emit('joined', 'arbiter', server);\n        emitTopologyDescriptionChanged(this);\n        return true;\n      };\n\n      return false;\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.secondary && ismaster.passive) {\n      if(self.addPassive(server) && self.addSecondary(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to passive', self.id, ismaster.me));\n        self.replSet.emit('joined', 'passive', server);\n\n        // If we have secondaryOnlyConnectionAllowed and just a passive it's\n        // still a valid connection\n        if(self.secondaryOnlyConnectionAllowed && self.state == CONNECTING) {\n          self.state = CONNECTED;\n          self.replSet.emit('connect', self.replSet);\n        }\n\n        emitTopologyDescriptionChanged(this);\n        return true;\n      };\n\n      return false;\n  } else if(!ismaster.ismaster && self.setName == ismaster.setName\n    && ismaster.secondary) {\n      if(self.addSecondary(server)) {\n        if(self.logger.isInfo()) self.logger.info(f('[%s] promoting %s to secondary', self.id, ismaster.me));\n        self.replSet.emit('joined', 'secondary', server);\n\n        // Is this the primary right now\n        if(self.primary && self.primary.name == server.name) {\n          self.primary = null;\n        }\n\n        if(self.secondaryOnlyConnectionAllowed && self.state == CONNECTING) {\n          self.state = CONNECTED;\n          self.replSet.emit('connect', self.replSet);\n        }\n\n        emitTopologyDescriptionChanged(this);\n        return true;\n      };\n\n      return false;\n  }\n\n  // Return update applied\n  return true;\n}\n\nmodule.exports = State;\n"]}