{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , bindToCurrentDomain = require('../connection/utils').bindToCurrentDomain\n  , EventEmitter = require('events').EventEmitter\n  , Pool = require('../connection/pool')\n  , b = require('bson')\n  , crypto = require('crypto')\n  , Query = require('../connection/commands').Query\n  , MongoError = require('../error')\n  , ReadPreference = require('./read_preference')\n  , BasicCursor = require('../cursor')\n  , CommandResult = require('./command_result')\n  , getSingleProperty = require('../connection/utils').getSingleProperty\n  , getProperty = require('../connection/utils').getProperty\n  , debugOptions = require('../connection/utils').debugOptions\n  , BSON = require('bson').native().BSON\n  , PreTwoSixWireProtocolSupport = require('../wireprotocol/2_4_support')\n  , TwoSixWireProtocolSupport = require('../wireprotocol/2_6_support')\n  , ThreeTwoWireProtocolSupport = require('../wireprotocol/3_2_support')\n  , Session = require('./session')\n  , Logger = require('../connection/logger')\n  , MongoCR = require('../auth/mongocr')\n  , X509 = require('../auth/x509')\n  , Plain = require('../auth/plain')\n  , GSSAPI = require('../auth/gssapi')\n  , SSPI = require('../auth/sspi')\n  , ScramSHA1 = require('../auth/scram');\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * @example\n * var Server = require('mongodb-core').Server\n *   , ReadPreference = require('mongodb-core').ReadPreference\n *   , assert = require('assert');\n *\n * var server = new Server({host: 'localhost', port: 27017});\n * // Wait for the connection event\n * server.on('connect', function(server) {\n *   server.destroy();\n * });\n *\n * // Start connecting\n * server.connect();\n */\n\n// All bson types\nvar bsonTypes = [b.Long, b.ObjectID, b.Binary, b.Code, b.DBRef, b.Symbol, b.Double, b.Timestamp, b.MaxKey, b.MinKey];\n// BSON parser\nvar bsonInstance = null;\n// Server instance id\nvar serverId = 0;\n// Callbacks instance id\nvar callbackId = 0;\n\n// Single store for all callbacks\nvar Callbacks = function() {\n  // EventEmitter.call(this);\n  var self = this;\n  // Callbacks\n  this.callbacks = {};\n  // Set the callbacks id\n  this.id = callbackId++;\n  // Set the type to server\n  this.type = 'server';\n}\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for(var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n}\n\n//\n// Flush all callbacks\nCallbacks.prototype.flush = function(err) {\n  for(var id in this.callbacks) {\n    if(!isNaN(parseInt(id, 10))) {\n      var callback = this.callbacks[id];\n      delete this.callbacks[id];\n      callback(err, null);\n    }\n  }\n}\n\n//\n// Flush all callbacks\nCallbacks.prototype.flushConnection = function(err, connection) {\n  for(var id in this.callbacks) {\n    if(!isNaN(parseInt(id, 10))) {\n      var callback = this.callbacks[id];\n\n      // Validate if the operation ran on the connection\n      if(callback.connection && callback.connection.id === connection.id) {\n        delete this.callbacks[id];\n        callback(err, null);\n      } else if(!callback.connection && callback.monitoring) {\n        delete this.callbacks[id];\n        callback(err, null);\n      }\n    }\n  }\n}\n\nCallbacks.prototype.callback = function(id) {\n  return this.callbacks[id];\n}\n\nCallbacks.prototype.emit = function(id, err, value) {\n  var callback = this.callbacks[id];\n  delete this.callbacks[id];\n  callback(err, value);\n}\n\nCallbacks.prototype.raw = function(id) {\n  if(this.callbacks[id] == null) return false;\n  return this.callbacks[id].raw == true ? true : false\n}\n\nCallbacks.prototype.documentsReturnedIn = function(id) {\n  if(this.callbacks[id] == null) return false;\n  return typeof this.callbacks[id].documentsReturnedIn == 'string' ? this.callbacks[id].documentsReturnedIn : null;\n}\n\nCallbacks.prototype.unregister = function(id) {\n  delete this.callbacks[id];\n}\n\nCallbacks.prototype.register = function(id, callback) {\n  this.callbacks[id] = bindToCurrentDomain(callback);\n}\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\n// Supports server\nvar supportsServer = function(_s) {\n  return _s.ismaster && typeof _s.ismaster.minWireVersion == 'number';\n}\n\n//\n// createWireProtocolHandler\nvar createWireProtocolHandler = function(result) {\n  // 3.2 wire protocol handler\n  if(result && result.maxWireVersion >= 4) {\n    return new ThreeTwoWireProtocolSupport(new TwoSixWireProtocolSupport());\n  }\n\n  // 2.6 wire protocol handler\n  if(result && result.maxWireVersion >= 2) {\n    return new TwoSixWireProtocolSupport();\n  }\n\n  // 2.4 or earlier wire protocol handler\n  return new PreTwoSixWireProtocolSupport();\n}\n\n//\n// Reconnect server\nvar reconnectServer = function(self, state) {\n  // Flush out any left over callbacks\n  if(self && state && state.callbacks) {\n    state.callbacks.flush(new MongoError(f(\"server %s received a broken socket pipe error\", self.name)));\n  }\n\n  // If the current reconnect retries is 0 stop attempting to reconnect\n  if(state.currentReconnectRetry == 0) {\n    return self.destroy(true, true);\n  }\n\n  // Adjust the number of retries\n  state.currentReconnectRetry = state.currentReconnectRetry - 1;\n\n  // Set status to connecting\n  state.state = CONNECTING;\n\n  // If we have a pool destroy it\n  if(state.pool) state.pool.destroy();\n  // Create a new Pool\n  state.pool = new Pool(state.options);\n\n  // error handler\n  var reconnectErrorHandler = function(err) {\n    // Set the state to disconnected so we can peform a proper reconnect\n    state.state = DISCONNECTED;\n    // Destroy the pool\n    state.pool.destroy();\n    // Adjust the number of retries\n    state.currentReconnectRetry = state.currentReconnectRetry - 1;\n    // No more retries\n    if(state.currentReconnectRetry <= 0) {\n      self.state = DESTROYED;\n      self.emit('error', f('failed to connect to %s:%s after %s retries', state.options.host, state.options.port, state.reconnectTries));\n    } else {\n      setTimeout(function() {\n        reconnectServer(self, state);\n      }, state.reconnectInterval);\n    }\n  }\n\n  //\n  // Attempt to connect\n  state.pool.once('connect', function() {\n    // Reset retries\n    state.currentReconnectRetry = state.reconnectTries;\n\n    // Remove any non used handlers\n    var events = ['error', 'close', 'timeout', 'parseError',\n      'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed'];\n    events.forEach(function(e) {\n      state.pool.removeAllListeners(e);\n    });\n\n    // Set connected state\n    state.state = CONNECTED;\n\n    // Add proper handlers\n    state.pool.on('error', reconnectErrorHandler);\n    state.pool.on('close', closeHandler(self, state));\n    state.pool.on('timeout', timeoutHandler(self, state));\n    state.pool.on('parseError', fatalErrorHandler(self, state));\n\n    // We need to ensure we have re-authenticated\n    var keys = Object.keys(state.authProviders);\n    if(keys.length == 0) return self.emit('reconnect', self);\n\n    // Get all connections\n    var connections = state.pool.getAll();\n    // Execute all providers\n    var count = keys.length;\n    // Iterate over keys\n    for(var i = 0; i < keys.length; i++) {\n      state.authProviders[keys[i]].reauthenticate(self, connections, function(err, r) {\n        count = count - 1;\n        // We are done, emit reconnect event\n        if(count == 0) {\n          if(!state.ismaster) {\n            return connectHandler(self, state)();\n          }\n\n          return self.emit('reconnect', self);\n        }\n      });\n    }\n  });\n\n  //\n  // Handle connection failure\n  state.pool.once('error', errorHandler(self, state));\n  state.pool.once('close', errorHandler(self, state));\n  state.pool.once('timeout', errorHandler(self, state));\n  state.pool.once('parseError', errorHandler(self, state));\n\n  // Connect pool\n  state.pool.connect();\n}\n\n//\n// Handlers\nvar messageHandler = function(self, state) {\n  return function(response, connection) {\n    // Attempt to parse the message\n    try {\n      // Get the callback\n      var cb = state.callbacks.callback(response.responseTo);\n\n      // Parse options\n      var parseOptions = {\n        raw: state.callbacks.raw(response.responseTo),\n        promoteLongs: cb && typeof cb.promoteLongs == 'boolean' ? cb.promoteLongs : true,\n        documentsReturnedIn: state.callbacks.documentsReturnedIn(response.responseTo)\n      };\n\n      // Parse the message\n      response.parse(parseOptions);\n\n      // If no\n      if((cb && !cb.noRelease) || !cb) {\n        self.s.pool.connectionAvailable(connection);\n      }\n\n      // Log if debug enabled\n      if(state.logger.isDebug()) state.logger.debug(f('message [%s] received from %s', response.raw.toString('hex'), self.name));\n      // Execute the registered callback\n      state.callbacks.emit(response.responseTo, null, response);\n    } catch (err) {\n      state.callbacks.flushConnection(new MongoError(err), connection);\n      self.destroy();\n    }\n  }\n}\n\nvar errorHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n    // Flush the connection operations\n    if(self.s.callbacks) {\n      self.s.callbacks.flushConnection(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))), connection);\n    }\n\n    // Emit error event\n    if(state.emitError && self.listeners('error').length > 0) self.emit('error', err, self);\n\n    // No more connections left, emit a close\n    if(state.pool.getAll().length == 0) {\n      // Set disconnected state\n      state.state = DISCONNECTED;\n      // Notify any strategies for read Preferences about closure\n      if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);\n      if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));\n      // Flush out all the callbacks\n      if(state.callbacks) {\n        state.callbacks.flushConnection(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))), connection);\n      }\n      // Destroy all connections\n      self.destroy();\n      // Emit error event\n      if(state.emitError && self.listeners('error').length > 0) self.emit('error', err, self);\n      // If we specified the driver to reconnect perform it\n      if(state.reconnect) setTimeout(function() {\n        reconnectServer(self, state)\n      }, state.reconnectInterval);\n    }\n  }\n}\n\nvar fatalErrorHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n\n    // Flush the connection operations\n    if(self.s.callbacks) {\n      self.s.callbacks.flushConnection(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))), connection);\n    }\n\n    // No more connections left, emit a close\n    if(state.pool.getAll().length == 0) {\n      // Set disconnected state\n      state.state = DISCONNECTED;\n      // Notify any strategies for read Preferences about closure\n      if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'error', [self]);\n      if(state.logger.isInfo()) state.logger.info(f('server %s errored out with %s', self.name, JSON.stringify(err)));\n      // Flush out all the callbacks\n      if(state.callbacks) {\n        state.callbacks.flushConnection(new MongoError(f(\"server %s received an error %s\", self.name, JSON.stringify(err))), connection);\n      }\n      // Emit error event\n      if(self.listeners('error').length > 0) self.emit('error', err, self);\n      // If we specified the driver to reconnect perform it\n      if(state.reconnect) setTimeout(function() {\n        // state.currentReconnectRetry = state.reconnectTries,\n        reconnectServer(self, state)\n      }, state.reconnectInterval);\n      // Destroy all connections\n      self.destroy();\n    }\n  }\n}\n\nvar timeoutHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n\n    // Flush the connection operations\n    if(self.s.callbacks) {\n      self.s.callbacks.flushConnection(new MongoError(f(\"server %s timed out\", self.name)), connection);\n    }\n\n    // No more connections left, emit a close\n    if(state.pool.getAll().length == 0) {\n      // Set disconnected state\n      state.state = DISCONNECTED;\n      // Notify any strategies for read Preferences about closure\n      if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'timeout', [self]);\n      if(state.logger.isInfo()) state.logger.info(f('server %s timed out', self.name));\n      // Flush out all the callbacks\n      if(state.callbacks) {\n        state.callbacks.flushConnection(new MongoError(f(\"server %s timed out\", self.name)), connection);\n      }\n      // Emit error event\n      self.emit('timeout', err, self);\n      // If we specified the driver to reconnect perform it\n      if(state.reconnect) setTimeout(function() {\n        reconnectServer(self, state)\n      }, state.reconnectInterval);\n      // Destroy all connections\n      self.destroy();\n    }\n  }\n}\n\nvar closeHandler = function(self, state) {\n  return function(err, connection) {\n    if(state.state == DISCONNECTED || state.state == DESTROYED) return;\n\n    // Flush the connection operations\n    if(self.s.callbacks) {\n      self.s.callbacks.flushConnection(new MongoError(f(\"server %s timed out\", self.name)), connection);\n    }\n\n    // No more connections left, emit a close\n    if(state.pool.getAll().length == 0) {\n      // Set state to disconnected\n      state.state = DISCONNECTED;\n      // Notify any strategies for read Preferences about closure\n      if(state.readPreferenceStrategies != null) notifyStrategies(self, self.s, 'close', [self]);\n      if(state.logger.isInfo()) state.logger.info(f('server %s closed', self.name));\n      // Flush out all the callbacks\n      if(state.callbacks) {\n        state.callbacks.flushConnection(new MongoError(f(\"server %s sockets closed\", self.name)), connection);\n      }\n\n      // Emit opening server event\n      if(self.listeners('serverClosed').length > 0) self.emit('serverClosed', {\n        topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name\n      });\n\n      // Emit toplogy opening event if not in topology\n      if(self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n        self.emit('topologyClosed', { topologyId: self.s.id });\n      }\n\n      // Emit close event\n      self.emit('close', err, self);\n      // If we specified the driver to reconnect perform it\n      if(state.reconnect) setTimeout(function() {\n        reconnectServer(self, state)\n      }, state.reconnectInterval);\n      // Destroy all connections\n      self.destroy();\n    }\n  }\n}\n\nvar connectHandler = function(self, state) {\n  // Apply all stored authentications\n  var applyAuthentications = function(callback) {\n    // We need to ensure we have re-authenticated\n    var keys = Object.keys(state.authProviders);\n    if(keys.length == 0) return callback(null, null);\n\n    // Get all connections\n    var connections = state.pool.getAll();\n    // Execute all providers\n    var count = keys.length;\n    // Iterate over keys\n    for(var i = 0; i < keys.length; i++) {\n      state.authProviders[keys[i]].reauthenticate(self, connections, function(err, r) {\n        count = count - 1;\n        // We are done\n        if(count == 0) {\n          return callback(null, null);\n        }\n      });\n    }\n  }\n\n  return function() {\n    // Apply any applyAuthentications\n    applyAuthentications(function() {\n      // Initiate monitoring\n      if(state.monitoring) {\n        self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), state.haInterval);\n      }\n\n      // Get the actual latency of the ismaster\n      var start = new Date().getTime();\n      // Execute an ismaster\n      self.command('admin.$cmd', {ismaster:true}, function(err, r) {\n        if(err) {\n          state.state = DISCONNECTED;\n\n          // Emit opening closed event\n          if(self.listeners('serverClosed').length > 0) self.emit('serverClosed', {\n            topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name\n          });\n\n          // Emit toplogy opening event if not in topology\n          if(!self.s.inTopology) {\n            self.emit('topologyOpening', { topologyId: self.s.id });\n          }\n\n          return self.emit('close', err, self);\n        }\n\n        // Emit server description changed if something listening\n        emitServerDescriptionChanged(self, {\n          address: self.name, arbiters: [], hosts: [], passives: [], type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n        });\n\n        // Emit topology description changed if something listening\n        emitTopologyDescriptionChanged(self, {\n          topologyType: 'Single', servers: [{address: self.name, arbiters: [], hosts: [], passives: [], type: 'Standalone'}]\n        });\n\n        // Set the latency for this instance\n        state.isMasterLatencyMS = new Date().getTime() - start;\n\n        // Set the current ismaster\n        if(!err) {\n          state.ismaster = r.result;\n        }\n\n        // Emit the ismaster\n        self.emit('ismaster', r.result, self);\n\n        // Determine the wire protocol handler\n        state.wireProtocolHandler = createWireProtocolHandler(state.ismaster);\n\n        // Set the wireProtocolHandler\n        state.options.wireProtocolHandler = state.wireProtocolHandler;\n\n        // Log the ismaster if available\n        if(state.logger.isInfo()) state.logger.info(f('server %s connected with ismaster [%s]', self.name, JSON.stringify(r.result)));\n\n        // Validate if we it's a server we can connect to\n        if(!supportsServer(state) && state.wireProtocolHandler == null) {\n          state.state = DISCONNECTED\n          return self.emit('error', new MongoError(\"non supported server version\"), self);\n        }\n\n        // Set the details\n        if(state.ismaster && state.ismaster.me) {\n          state.serverDetails.name = state.ismaster.me;\n        }\n\n        // No read preference strategies just emit connect\n        if(state.readPreferenceStrategies == null) {\n          state.state = CONNECTED;\n          return self.emit('connect', self);\n        }\n\n        // Signal connect to all readPreferences\n        notifyStrategies(self, self.s, 'connect', [self], function(err, result) {\n          state.state = CONNECTED;\n          return self.emit('connect', self);\n        });\n      });\n    });\n  }\n}\n\nvar slaveOk = function(r) {\n  if(r) return r.slaveOk()\n  return false;\n}\n\n//\n// Execute readPreference Strategies\nvar notifyStrategies = function(self, state, op, params, callback) {\n  if(typeof callback != 'function') {\n    // Notify query start to any read Preference strategies\n    for(var name in state.readPreferenceStrategies) {\n      if(state.readPreferenceStrategies[name][op]) {\n        var strat = state.readPreferenceStrategies[name];\n        strat[op].apply(strat, params);\n      }\n    }\n    // Finish up\n    return;\n  }\n\n  // Execute the async callbacks\n  var nPreferences = Object.keys(state.readPreferenceStrategies).length;\n  if(nPreferences == 0) return callback(null, null);\n  for(var name in state.readPreferenceStrategies) {\n    if(state.readPreferenceStrategies[name][op]) {\n      var strat = state.readPreferenceStrategies[name];\n      // Add a callback to params\n      var cParams = params.slice(0);\n      cParams.push(function(err, r) {\n        nPreferences = nPreferences - 1;\n        if(nPreferences == 0) {\n          callback(null, null);\n        }\n      })\n      // Execute the readPreference\n      strat[op].apply(strat, cParams);\n    }\n  }\n}\n\nvar debugFields = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host'\n  , 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout', 'checkServerIdentity'\n  , 'socketTimeout', 'singleBufferSerializtion', 'ssl', 'ca', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs'];\n\n/**\n * Creates a new Server instance\n * @class\n * @param {boolean} [options.reconnect=true] Server will attempt to reconnect on loss of connection\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {number} [options.monitoringSocketTimeout=30000] TCP Socket timeout setting for replicaset monitoring socket\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @return {Server} A cursor instance\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n */\nvar Server = function(options) {\n  var self = this;\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // BSON Parser, ensure we have a single instance\n  if(bsonInstance == null) {\n    bsonInstance = new BSON(bsonTypes);\n  }\n\n  // Reconnect retries\n  var reconnectTries = options.reconnectTries || 30;\n\n  // Keeps all the internal state of the server\n  this.s = {\n    // Options\n      options: options\n    // Contains all the callbacks\n    , callbacks: new Callbacks()\n    // Logger\n    , logger: Logger('Server', options)\n    // Server state\n    , state: DISCONNECTED\n    // Reconnect option\n    , reconnect: typeof options.reconnect == 'boolean' ? options.reconnect :  true\n    , reconnectTries: reconnectTries\n    , reconnectInterval: options.reconnectInterval || 1000\n    // Swallow or emit errors\n    , emitError: typeof options.emitError == 'boolean' ? options.emitError : false\n    // Current state\n    , currentReconnectRetry: reconnectTries\n    // Contains the ismaster\n    , ismaster: null\n    // Contains any alternate strategies for picking\n    , readPreferenceStrategies: options.readPreferenceStrategies\n    // Auth providers\n    , authProviders: options.authProviders || {}\n    // Server instance id\n    , id: serverId++\n    // Shared topology id if part of another one\n    , topologyId: options.topologyId || -1\n    // Grouping tag used for debugging purposes\n    , tag: options.tag\n    // Do we have a not connected handler\n    , disconnectHandler: options.disconnectHandler\n    // If we are monitoring this server we will create an exclusive reserved socket for that\n    , monitoring: typeof options.monitoring == 'boolean' ? options.monitoring : false\n    // High availability monitoring interval\n    , haInterval: options.haInterval || 10000\n    // wireProtocolHandler methods\n    , wireProtocolHandler: options.wireProtocolHandler || new PreTwoSixWireProtocolSupport()\n    // Factory overrides\n    , Cursor: options.cursorFactory || BasicCursor\n    // BSON Parser, ensure we have a single instance\n    , bsonInstance: bsonInstance\n    // Contains the inquireServerState timeout reference\n    , inquireServerStateTimeout: null\n    // Pick the right bson parser\n    , bson: options.bson ? options.bson : bsonInstance\n    // Internal connection pool\n    , pool: null\n    // Is master latency\n    , isMasterLatencyMS: 0\n    // Is the server in a topology\n    , inTopology: typeof options.inTopology == 'boolean' ? options.inTopology : false\n    // Server details\n    , serverDetails: {\n        host: options.host\n      , port: options.port\n      , name: options.port ? f(\"%s:%s\", options.host, options.port) : options.host\n    }\n    // Current server description\n    , serverDescription: null\n    // Current topology description\n    , topologyDescription: null\n  }\n\n  // Create hash method\n  var hash = crypto.createHash('sha1');\n  hash.update(f('%s:%s', this.host, this.port));\n\n  // Create a hash name\n  this.hashedName = hash.digest('hex');\n\n  // Reference state\n  var s = this.s;\n\n  // Add bson parser to options\n  options.bson = s.bson;\n\n  // Set error properties\n  getProperty(this, 'name', 'name', s.serverDetails, {});\n  getProperty(this, 'bson', 'bson', s.options, {});\n  getProperty(this, 'wireProtocolHandler', 'wireProtocolHandler', s.options, {});\n  getSingleProperty(this, 'id', s.id);\n\n  // If we do not have an inherited authorization mechanism\n  if(!options.authProviders) {\n    this.addAuthProvider('mongocr', new MongoCR());\n    this.addAuthProvider('x509', new X509());\n    this.addAuthProvider('plain', new Plain());\n    this.addAuthProvider('gssapi', new GSSAPI());\n    this.addAuthProvider('sspi', new SSPI());\n    this.addAuthProvider('scram-sha-1', new ScramSHA1());\n  }\n}\n\ninherits(Server, EventEmitter);\n\nvar getPreviousDescription = function(self) {\n  if(!self.s.serverDescription) {\n    self.s.serverDescription = {\n      address: self.name,\n      arbiters: [], hosts: [], passives: [], type: 'Unknown'\n    }\n  }\n\n  return self.s.serverDescription;\n}\n\nvar emitServerDescriptionChanged = function(self, description) {\n  if(self.listeners('serverDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('serverDescriptionChanged', {\n      topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name,\n      previousDescription: getPreviousDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n}\n\nvar getPreviousTopologyDescription = function(self) {\n  if(!self.s.topologyDescription) {\n    self.s.topologyDescription = {\n      topologyType: 'Unknown',\n      servers: [{\n        address: self.name, arbiters: [], hosts: [], passives: [], type: 'Unknown'\n      }]\n    }\n  }\n\n  return self.s.topologyDescription;\n}\n\nvar emitTopologyDescriptionChanged = function(self, description) {\n  if(self.listeners('topologyDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('topologyDescriptionChanged', {\n      topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name,\n      previousDescription: getPreviousTopologyDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if(self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Get the server description\n * @method\n * @return {object}\n*/\nServer.prototype.getDescription = function() {\n  var ismaster = this.s.ismaster || {};\n  var description = {\n    type: getTopologyType(this),\n    address: this.name,\n  };\n\n  // Add fields if available\n  if(ismaster.hosts) description.hosts = ismaster.hosts;\n  if(ismaster.arbiters) description.arbiters = ismaster.arbiters;\n  if(ismaster.passives) description.passives = ismaster.passives;\n  if(ismaster.setName) description.setName = ismaster.setName;\n  return description;\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} type Type of BSON parser to use (c++ or js)\n */\nServer.prototype.setBSONParserType = function(type) {\n  var nBSON = null;\n\n  if(type == 'c++') {\n    nBSON = require('bson').native().BSON;\n  } else if(type == 'js') {\n    nBSON = require('bson').pure().BSON;\n  } else {\n    throw new MongoError(f(\"% parser not supported\", type));\n  }\n\n  this.s.options.bson = new nBSON(bsonTypes);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nServer.prototype.lastIsMaster = function() {\n  return this.s.ismaster;\n}\n\n/**\n * Returns the last known ismaster response latency\n * @method\n * @return {object}\n */\nServer.prototype.isMasterLatencyMS = function() {\n  return this.s.isMasterLatencyMS;\n}\n\n/**\n * Initiate server connect\n * @method\n */\nServer.prototype.connect = function(_options) {\n  var self = this;\n  // Set server specific settings\n  _options = _options || {}\n  // Set the promotion\n  if(typeof _options.promoteLongs == 'boolean')  {\n    self.s.options.promoteLongs = _options.promoteLongs;\n  }\n\n  // Destroy existing pool connections if connection called\n  // Multiple times\n  if(self.s.pool) {\n    self.s.pool.destroy();\n  }\n\n  // Set the state to connection\n  self.s.state = CONNECTING;\n\n  // Create a new connection pool\n  self.s.options.messageHandler = messageHandler(self, self.s);\n  self.s.pool = new Pool(self.s.options);\n\n  // Add all the event handlers\n  self.s.pool.on('timeout', timeoutHandler(self, self.s));\n  self.s.pool.on('close', closeHandler(self, self.s));\n  self.s.pool.on('error', errorHandler(self, self.s));\n  self.s.pool.once('connect', connectHandler(self, self.s));\n  self.s.pool.on('parseError', fatalErrorHandler(self, self.s));\n\n  // Emit toplogy opening event if not in topology\n  if(!self.s.inTopology) {\n    this.emit('topologyOpening', { topologyId: this.s.id });\n  }\n\n  // Emit opening server event\n  self.emit('serverOpening', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name\n  });\n\n  //\n  // Handle new connections\n  self.s.pool.on('connection', function(connection) {\n    // No auth handler used, return the connection\n    var keys = Object.keys(self.s.authProviders);\n    if(keys.length == 0) {\n      return self.s.pool.connectionAvailable(connection);\n    }\n\n    // Get all connections\n    var connections = [connection];\n    // Execute all providers\n    var count = keys.length;\n\n    // Iterate over all auth methods\n    for(var i = 0; i < keys.length; i++) {\n      // reauthenticate the connection\n      self.s.authProviders[keys[i]].reauthenticate(self, connections, function(err, r) {\n        count = count - 1;\n\n        // We are done, Make the connection available\n        if(count == 0) {\n          return self.s.pool.connectionAvailable(connection);\n        }\n      });\n    }\n  });\n\n  // Connect the pool\n  self.s.pool.connect();\n}\n\nvar getTopologyType = function(self, ismaster) {\n  if(!ismaster) {\n    ismaster = self.s.ismaster;\n  }\n\n  if(!ismaster) return 'Unknown';\n  if(ismaster.ismaster && !ismaster.hosts) return 'Standalone';\n  if(ismaster.ismaster && ismaster.msg == 'isdbgrid') return 'Mongos';\n  if(ismaster.ismaster) return 'RSPrimary';\n  if(ismaster.secondary) return 'RSSecondary';\n  if(ismaster.arbiterOnly) return 'RSArbiter';\n  return 'Unknown';\n}\n\nvar changedIsMaster = function(self, currentIsmaster, ismaster) {\n  var currentType = getTopologyType(self, currentIsmaster);\n  var newType = getTopologyType(self, ismaster);\n  if(newType != currentType) return true;\n  return false;\n}\n\nvar inquireServerState = function(self) {\n  return function() {\n    if(self.s.state == DESTROYED) return;\n    // Record response time\n    var start = new Date().getTime();\n\n    // emitSDAMEvent\n    emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: self.name });\n\n    // Attempt to execute ismaster command\n    self.command('admin.$cmd', { ismaster:true },  { monitoring:true }, function(err, r) {\n      if(!err) {\n        // Legacy event sender\n        self.emit('ismaster', r, self);\n\n        // Calculate latencyMS\n        var latencyMS = new Date().getTime() - start;\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', { durationMS: latencyMS, reply: r.result, connectionId: self.name });\n\n        // Did the server change\n        if(changedIsMaster(self, self.s.ismaster, r.result)) {\n          // Emit server description changed if something listening\n          emitServerDescriptionChanged(self, {\n            address: self.name, arbiters: [], hosts: [], passives: [], type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n          });\n        }\n\n        // Updat ismaster view\n        self.s.ismaster = r.result;\n\n        // Set server response time\n        self.s.isMasterLatencyMS = latencyMS;\n      } else {\n        emitSDAMEvent(self, 'serverHearbeatFailed', { durationMS: latencyMS, failure: err, connectionId: self.name });\n      }\n\n      // Perform another sweep\n      self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);\n    });\n  };\n}\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nServer.prototype.unref = function() {\n  this.s.pool.unref();\n}\n\n/**\n * Destroy the server connection\n * @method\n */\nServer.prototype.destroy = function(emitClose, emitDestroy) {\n  var self = this;\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('destroy called on server %s', self.name));\n  // If we already destroyed ignore\n  if(self.s.state == DESTROYED) return;\n\n  // Do we have a inquireServerState running\n  if(this.s.inquireServerStateTimeout) {\n    clearTimeout(this.s.inquireServerStateTimeout);\n  }\n\n  // Emit close\n  if(emitClose && self.listeners('close').length > 0) {\n    self.emit('close', null, self);\n  }\n\n  // Emit opening server event\n  if(self.listeners('serverClosed').length > 0) self.emit('serverClosed', {\n    topologyId: self.s.topologyId != -1 ? self.s.topologyId : self.s.id, address: self.name\n  });\n\n  // Emit toplogy opening event if not in topology\n  if(self.listeners('topologyClosed').length > 0 && !self.s.inTopology) {\n    self.emit('topologyClosed', { topologyId: self.s.id });\n  }\n\n  // Emit destroy event\n  if(emitDestroy) self.emit('destroy', self);\n  // Set state as destroyed\n  self.s.state = DESTROYED;\n  // Close the pool\n  if(self.s.pool) self.s.pool.destroy();\n  // Flush out all the callbacks\n  if(self.s.callbacks) self.s.callbacks.flush(new MongoError(f(\"server %s sockets closed\", self.name)));\n}\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nServer.prototype.isConnected = function() {\n  var self = this;\n  if(self.s.pool) return self.s.pool.isConnected();\n  return false;\n}\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nServer.prototype.isDestroyed = function() {\n  return this.s.state == DESTROYED;\n}\n\nvar executeSingleOperation = function(self, ns, cmd, queryOptions, options, onAll, callback) {\n  // Create a query instance\n  var query = new Query(self.s.bson, ns, cmd, queryOptions);\n  // Set slave OK\n  query.slaveOk = slaveOk(options.readPreference);\n\n  // Notify query start to any read Preference strategies\n  if(self.s.readPreferenceStrategies != null) {\n    notifyStrategies(self, self.s, 'startOperation', [self, query, new Date()]);\n  }\n\n  // Raw BSON response\n  var raw = typeof options.raw == 'boolean' ? options.raw : false;\n  // Do not promote longs\n  var promoteLongs = typeof options.promoteLongs == 'boolean' ? options.promoteLongs : true;\n  // Monitoring\n  var monitoring = typeof options.monitoring == 'boolean' ? options.monitoring : false;\n\n  // Execute multiple queries\n  if(onAll) {\n    var connections = self.s.pool.getAll();\n    var total = connections.length;\n    // We have an error\n    var error = null;\n    // Execute on all connections\n    for(var i = 0; i < connections.length; i++) {\n      // Command callback\n      var commandCallback = function(_connection) {\n        return function(err, result) {\n          if(err) error = err;\n          total = total - 1;\n\n          // Done\n          if(total == 0) {\n            // Notify end of command\n            notifyStrategies(self, self.s, 'endOperation', [self, error, result, new Date()]);\n            if(error) return callback(MongoError.create(error));\n\n            // Add the connection details\n            result.hashedName = _connection.hashedName;\n\n            // Execute callback, catch and rethrow if needed\n            try {\n              callback(null, new CommandResult(options.fullResult ? result : result.documents[0], connections));\n            } catch(err) {\n              process.nextTick(function() { throw err});\n            }\n          }\n        }\n      };\n\n      try {\n        query.incRequestId();\n        connections[i].write(query.toBin());\n      } catch(err) {\n        total = total - 1;\n        if(total == 0) return callback(MongoError.create(err));\n      }\n\n      // Return raw BSON docs\n      if(raw) {\n        commandCallback.raw = true;\n      }\n\n      // Add promote long\n      commandCallback.promoteLongs = promoteLongs;\n\n      // Add monitoring\n      commandCallback.monitoring = monitoring;\n\n      // Set the executed connection on the callback\n      commandCallback.connection = connections[i];\n\n      // Register the callback\n      self.s.callbacks.register(query.requestId, commandCallback(connections[i]));\n    }\n\n    return;\n  }\n\n  // Command callback\n  var commandCallback = function(err, result) {\n    // Notify end of command\n    notifyStrategies(self, self.s, 'endOperation', [self, err, result, new Date()]);\n    if(err) return callback(err);\n\n    if(result.documents[0]['$err']\n      || result.documents[0]['errmsg']\n      || result.documents[0]['err']\n      || result.documents[0]['code']) return callback(MongoError.create(result.documents[0]));\n\n      // Add the connection details\n      result.hashedName = result.connection.hashedName;\n\n      // Execute callback, catch and rethrow if needed\n      try {\n        callback(null, new CommandResult(options.fullResult ? result : result.documents[0], result.connection));\n      } catch(err) {\n        process.nextTick(function() { throw err});\n      }\n  };\n\n  try {\n    // Add monitoring\n    commandCallback.monitoring = monitoring;\n    // Write the query out to the passed in connection or use the pool\n    // Passed in connections are used for authentication mechanisms\n    if(options.connection) {\n      // Add the reference to the connection to the callback so\n      // we can flush only the affected operations\n      commandCallback.connection = options.connection;\n      commandCallback.noRelease = true;\n\n      // Write out the command\n      options.connection.write(query.toBin());\n    } else {\n      self.s.pool.write(query.toBin(), commandCallback, options);\n    }\n\n  } catch(err) {\n    return callback(MongoError.create(err));\n  }\n\n  // Return raw BSON docs\n  if(raw) commandCallback.raw = true;\n  // Promote long setting\n  commandCallback.promoteLongs = promoteLongs;\n\n  // Register the callback\n  self.s.callbacks.register(query.requestId, commandCallback);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.command = function(ns, cmd, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Ensure we have no options\n  options = options || {};\n\n  // Do we have a read Preference it need to be of type ReadPreference\n  if(options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    throw new Error(\"readPreference must be an instance of ReadPreference\");\n  }\n\n  // Debug log\n  if(self.s.logger.isDebug()) self.s.logger.debug(f('executing command [%s] against %s', JSON.stringify({\n    ns: ns, cmd: cmd, options: debugOptions(debugFields, options)\n  }), self.name));\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // If we have no connection error\n  if(!self.s.pool.isConnected()) {\n    return callback(new MongoError(f(\"no connection available to server %s\", self.name)));\n  }\n\n  // Execute on all connections\n  var onAll = typeof options.onAll == 'boolean' ? options.onAll : false;\n\n  // Check keys\n  var checkKeys = typeof options.checkKeys == 'boolean' ? options.checkKeys: false;\n\n  // Serialize function\n  var serializeFunctions = typeof options.serializeFunctions == 'boolean' ? options.serializeFunctions : false;\n\n  // Ignore undefined values\n  var ignoreUndefined = typeof options.ignoreUndefined == 'boolean' ? options.ignoreUndefined : false;\n\n  // Raw BSON response\n  var raw = typeof options.raw == 'boolean' ? options.raw : false;\n\n  // Query options\n  var queryOptions = {\n    numberToSkip: 0, numberToReturn: -1, checkKeys: checkKeys\n  };\n\n  // Set up the serialize functions and ignore undefined\n  if(serializeFunctions) queryOptions.serializeFunctions = serializeFunctions;\n  if(ignoreUndefined) queryOptions.ignoreUndefined = ignoreUndefined;\n\n  // Single operation execution\n  executeSingleOperation(self, ns, cmd, queryOptions, options, onAll, callback);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.insert = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.s.wireProtocolHandler.insert(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.update = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n\n  // Execute write\n  return self.s.wireProtocolHandler.update(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.remove = function(ns, ops, options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  var self = this;\n  if(this.s.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if(!self.isConnected() && self.s.disconnectHandler != null) {\n    callback = bindToCurrentDomain(callback);\n    return self.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // Setup the docs as an array\n  ops = Array.isArray(ops) ? ops : [ops];\n  // Execute write\n  return self.s.wireProtocolHandler.remove(self, self.s.ismaster, ns, self.s.bson, self.s.pool, self.s.callbacks, ops, options, callback);\n}\n\n/**\n * Authenticate using a specified mechanism\n * @method\n * @param {string} mechanism The Auth mechanism we are invoking\n * @param {string} db The db we are invoking the mechanism against\n * @param {...object} param Parameters for the specific mechanism\n * @param {authResultCallback} callback A callback function\n */\nServer.prototype.auth = function(mechanism, db) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n\n  // If we don't have the mechanism fail\n  if(self.s.authProviders[mechanism] == null && mechanism != 'default')\n    throw new MongoError(f(\"auth provider %s does not exist\", mechanism));\n\n  // If we have the default mechanism we pick mechanism based on the wire\n  // protocol max version. If it's >= 3 then scram-sha1 otherwise mongodb-cr\n  if(mechanism == 'default' && self.s.ismaster && self.s.ismaster.maxWireVersion >= 3) {\n    mechanism = 'scram-sha-1';\n  } else if(mechanism == 'default') {\n    mechanism = 'mongocr';\n  }\n\n  // Get all available connections\n  var connections = self.s.pool.getAll();\n\n  // Actual arguments\n  var finalArguments = [self, connections, db].concat(args.slice(0)).concat([function(err, r) {\n    if(err) return callback(err);\n    if(!r) return callback(new MongoError('could not authenticate'));\n    callback(null, new Session({}, self));\n  }]);\n\n  // Let's invoke the auth mechanism\n  self.s.authProviders[mechanism].auth.apply(self.s.authProviders[mechanism], finalArguments);\n}\n\n//\n// Plugin methods\n//\n\n/**\n * Add custom read preference strategy\n * @method\n * @param {string} name Name of the read preference strategy\n * @param {object} strategy Strategy object instance\n */\nServer.prototype.addReadPreferenceStrategy = function(name, strategy) {\n  var self = this;\n  if(self.s.readPreferenceStrategies == null) self.s.readPreferenceStrategies = {};\n  self.s.readPreferenceStrategies[name] = strategy;\n}\n\n/**\n * Add custom authentication mechanism\n * @method\n * @param {string} name Name of the authentication mechanism\n * @param {object} provider Authentication object instance\n */\nServer.prototype.addAuthProvider = function(name, provider) {\n  var self = this;\n  self.s.authProviders[name] = provider;\n}\n\n/**\n * Compare two server instances\n * @method\n * @param {Server} server Server to compare equality against\n * @return {boolean}\n */\nServer.prototype.equals = function(server) {\n  if(typeof server == 'string') return server == this.name;\n\n  if(server && server.name) {\n    return server.name == this.name;\n  }\n\n  return false;\n}\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nServer.prototype.connections = function() {\n  return this.s.pool.getAll();\n}\n\n/**\n * Get server\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Server}\n */\nServer.prototype.getServer = function(options) {\n  return this;\n}\n\n/**\n * Get connection\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {Connection}\n */\nServer.prototype.getConnection = function(options) {\n  return this.s.pool.get();\n}\n\n/**\n * Get callbacks object\n * @method\n * @return {Callbacks}\n */\nServer.prototype.getCallbacks = function() {\n  return this.s.callbacks;\n}\n\n/**\n * Name of BSON parser currently used\n * @method\n * @return {string}\n */\nServer.prototype.parserType = function() {\n  var s = this.s;\n  if(s.options.bson.serialize.toString().indexOf('[native code]') != -1)\n    return 'c++';\n  return 'js';\n}\n\n// // Command\n// {\n//     find: ns\n//   , query: <object>\n//   , limit: <n>\n//   , fields: <object>\n//   , skip: <n>\n//   , hint: <string>\n//   , explain: <boolean>\n//   , snapshot: <boolean>\n//   , batchSize: <n>\n//   , returnKey: <boolean>\n//   , maxScan: <n>\n//   , min: <n>\n//   , max: <n>\n//   , showDiskLoc: <boolean>\n//   , comment: <string>\n//   , maxTimeMS: <n>\n//   , raw: <boolean>\n//   , readPreference: <ReadPreference>\n//   , tailable: <boolean>\n//   , oplogReplay: <boolean>\n//   , noCursorTimeout: <boolean>\n//   , awaitdata: <boolean>\n//   , exhaust: <boolean>\n//   , partial: <boolean>\n// }\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {{object}|{Long}} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {opResultCallback} callback A callback function\n */\nServer.prototype.cursor = function(ns, cmd, cursorOptions) {\n  var s = this.s;\n  cursorOptions = cursorOptions || {};\n  // Set up final cursor type\n  var FinalCursor = cursorOptions.cursorFactory || s.Cursor;\n  // Return the cursor\n  return new FinalCursor(s.bson, ns, cmd, cursorOptions, this, s.options);\n}\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Server#connect\n * @type {Server}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Server#close\n * @type {Server}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Server#error\n * @type {Server}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Server#timeout\n * @type {Server}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Server#parseError\n * @type {Server}\n */\n\n/**\n * The server reestablished the connection\n *\n * @event Server#reconnect\n * @type {Server}\n */\n\n/**\n * This is an insert result callback\n *\n * @callback opResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {CommandResult} command result\n */\n\n/**\n * This is an authentication result callback\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {Session} an authenticated session\n */\n\nmodule.exports = Server;\n"]}