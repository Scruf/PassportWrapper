{"version":3,"sources":["shared.js"],"names":[],"mappings":"AAAA,IAAI,iBAAiB,QAAQ,+BAAR,CAAjB;;AAEJ,IAAI,oBAAoB,UAAS,GAAT,EAAc,OAAd,EAAuB;;AAE7C,MAAI,iBAAiB,IAAI,cAAJ,IAAsB,IAAI,cAAJ,CAAmB,SAAnB,CAAtB;;AAFwB,MAI1C,QAAQ,cAAR,EAAwB;AACzB,qBAAiB,QAAQ,cAAR,CADQ;GAA3B;;AAIA,MAAG,OAAO,cAAP,IAAyB,QAAzB,EAAmC;AACpC,qBAAiB,IAAI,cAAJ,CAAmB,cAAnB,CAAjB,CADoC;GAAtC;;AAIA,MAAG,EAAE,0BAA0B,cAA1B,CAAF,EAA6C;AAC9C,UAAM,IAAI,UAAJ,CAAe,kDAAf,CAAN,CAD8C;GAAhD;;AAIA,SAAO,cAAP,CAhB6C;CAAvB;;AAmBxB,OAAO,OAAP,GAAiB;AACf,qBAAmB,iBAAnB;CADF","file":"shared-compiled.js","sourcesContent":["var ReadPreference = require('../topologies/read_preference');\n\nvar getReadPreference = function(cmd, options) {\n  // Default to command version of the readPreference\n  var readPreference = cmd.readPreference || new ReadPreference('primary');\n  // If we have an option readPreference override the command one\n  if(options.readPreference) {\n    readPreference = options.readPreference;\n  }\n\n  if(typeof readPreference == 'string') {\n    readPreference = new ReadPreference(readPreference);\n  }\n\n  if(!(readPreference instanceof ReadPreference)) {\n    throw new MongoError('readPreference must be a ReadPreference instance');\n  }\n\n  return readPreference;\n}\n\nmodule.exports = {\n  getReadPreference: getReadPreference\n}\n"]}