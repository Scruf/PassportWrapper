{"version":3,"sources":["sspi.js"],"names":[],"mappings":"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","file":"sspi-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , require_optional = require('require_optional')\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password, options) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n  this.options = options;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n// Kerberos class\nvar Kerberos = null;\nvar MongoAuthProcess = null;\n\n// Try to grab the Kerberos class\ntry {\n  Kerberos = require_optional('kerberos').Kerberos\n  // Authentication process for Mongo\n  MongoAuthProcess = require_optional('kerberos').processes.MongoAuthProcess\n} catch(err) {}\n\n/**\n * Creates a new SSPI authentication mechanism\n * @class\n * @return {SSPI} A cursor instance\n */\nvar SSPI = function() {\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.auth = function(server, connections, db, username, password, options, callback) {\n  var self = this;\n  // We don't have the Kerberos library\n  if(Kerberos == null) return callback(new Error(\"Kerberos library is not installed\"));\n  var gssapiServiceName = options['gssapiServiceName'] || 'mongodb';\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Start Auth process for a connection\n      SSIPAuthenticate(username, password, gssapiServiceName, server, connection, options, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r && typeof r == 'object' && r.result['$err']) {\n          errorObject = r.result;\n        } else if(r && typeof r == 'object' && r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          credentialsValid = true;\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password, options));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\nvar SSIPAuthenticate = function(username, password, gssapiServiceName, server, connection, options, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n      saslStart: 1\n    , mechanism: 'GSSAPI'\n    , payload: ''\n    , autoAuthorize: 1\n  };\n\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options);\n\n  // Execute first sasl step\n  server.command(\"$external.$cmd\"\n    , command\n    , { connection: connection }, function(err, r) {\n    if(err) return callback(err, false);\n    var doc = r.result;\n\n    mongo_auth_process.init(username, password, function(err) {\n      if(err) return callback(err);\n\n      mongo_auth_process.transition(doc.payload, function(err, payload) {\n        if(err) return callback(err);\n\n        // Perform the next step against mongod\n        var command = {\n            saslContinue: 1\n          , conversationId: doc.conversationId\n          , payload: payload\n        };\n\n        // Execute the command\n        server.command(\"$external.$cmd\"\n          , command\n          , { connection: connection }, function(err, r) {\n          if(err) return callback(err, false);\n          var doc = r.result;\n\n          mongo_auth_process.transition(doc.payload, function(err, payload) {\n            if(err) return callback(err);\n\n            // Perform the next step against mongod\n            var command = {\n                saslContinue: 1\n              , conversationId: doc.conversationId\n              , payload: payload\n            };\n\n            // Execute the command\n            server.command(\"$external.$cmd\"\n              , command\n              , { connection: connection }, function(err, r) {\n              if(err) return callback(err, false);\n              var doc = r.result;\n\n              mongo_auth_process.transition(doc.payload, function(err, payload) {\n                // Perform the next step against mongod\n                var command = {\n                    saslContinue: 1\n                  , conversationId: doc.conversationId\n                  , payload: payload\n                };\n\n                // Execute the command\n                server.command(\"$external.$cmd\"\n                  , command\n                  , { connection: connection }, function(err, r) {\n                  if(err) return callback(err, false);\n                  var doc = r.result;\n\n                  if(doc.done) return callback(null, true);\n                  callback(new Error(\"Authentication failed\"), false);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nSSPI.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var err = null;\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, authStore[i].options, function(err, r) {\n      if(err) err = err;\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = SSPI;\n"]}