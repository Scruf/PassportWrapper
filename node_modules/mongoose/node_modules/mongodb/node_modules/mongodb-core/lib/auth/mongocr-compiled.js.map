{"version":3,"sources":["mongocr.js"],"names":[],"mappings":"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","file":"mongocr-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n/**\n * Creates a new MongoCR authentication mechanism\n * @class\n * @return {MongoCR} A cursor instance\n */\nvar MongoCR = function() {\n  this.authStore = [];\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var executeMongoCR = function(connection) {\n      // Let's start the process\n      server.command(f(\"%s.$cmd\", db)\n        , { getnonce: 1 }\n        , { connection: connection }, function(err, r) {\n          var nonce = null;\n          var key = null;\n\n          // Adjust the number of connections left\n          // Get nonce\n          if(err == null) {\n            nonce = r.result.nonce;\n            // Use node md5 generator\n            var md5 = crypto.createHash('md5');\n            // Generate keys used for authentication\n            md5.update(username + \":mongo:\" + password, 'utf8');\n            var hash_password = md5.digest('hex');\n            // Final key\n            md5 = crypto.createHash('md5');\n            md5.update(nonce + username + hash_password, 'utf8');\n            key = md5.digest('hex');\n          }\n\n          // Execute command\n          server.command(f(\"%s.$cmd\", db)\n            , { authenticate: 1, user: username, nonce: nonce, key:key}\n            , { connection: connection }, function(err, r) {\n              count = count - 1;\n\n              // If we have an error\n              if(err) {\n                errorObject = err;\n              } else if(r.result['$err']) {\n                errorObject = r.result;\n              } else if(r.result['errmsg']) {\n                errorObject = r.result;\n              } else {\n                credentialsValid = true;\n                numberOfValidConnections = numberOfValidConnections + 1;\n              }\n\n              // We have authenticated all connections\n              if(count == 0 && numberOfValidConnections > 0) {\n                // Store the auth details\n                addAuthSession(self.authStore, new AuthSession(db, username, password));\n                // Return correct authentication\n                callback(null, true);\n              } else if(count == 0) {\n                if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n                callback(errorObject, false);\n              }\n          });\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        executeMongoCR(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nMongoCR.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var err = null;\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err, r) {\n      if(err) err = err;\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = MongoCR;\n"]}