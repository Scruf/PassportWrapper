{"version":3,"sources":["x509.js"],"names":[],"mappings":"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","file":"x509-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\n/**\n * Creates a new X509 authentication mechanism\n * @class\n * @return {X509} A cursor instance\n */\nvar X509 = function() {\n  this.authStore = [];\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    // Execute MongoCR\n    var execute = function(connection) {\n      // Let's start the sasl process\n      var command = {\n          authenticate: 1\n        , mechanism: 'MONGODB-X509'\n        , user: username\n      };\n\n      // Let's start the process\n      server.command(\"$external.$cmd\"\n        , command\n        , { connection: connection }, function(err, r) {\n        // Adjust count\n        count = count - 1;\n\n        // If we have an error\n        if(err) {\n          errorObject = err;\n        } else if(r.result['$err']) {\n          errorObject = r.result;\n        } else if(r.result['errmsg']) {\n          errorObject = r.result;\n        } else {\n          credentialsValid = true;\n          numberOfValidConnections = numberOfValidConnections + 1;\n        }\n\n        // We have authenticated all connections\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using mongocr\"));\n          callback(errorObject, false);\n        }\n      });\n    }\n\n    var _execute = function(_connection) {\n      process.nextTick(function() {\n        execute(_connection);\n      });\n    }\n\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nX509.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var err = null;\n  var count = authStore.length;\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err, r) {\n      if(err) err = err;\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\nmodule.exports = X509;\n"]}