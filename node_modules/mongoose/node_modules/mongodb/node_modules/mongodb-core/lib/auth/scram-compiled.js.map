{"version":3,"sources":["scram.js"],"names":[],"mappings":"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","file":"scram-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , crypto = require('crypto')\n  , Binary = require('bson').Binary\n  , MongoError = require('../error');\n\nvar AuthSession = function(db, username, password) {\n  this.db = db;\n  this.username = username;\n  this.password = password;\n}\n\nAuthSession.prototype.equal = function(session) {\n  return session.db == this.db\n    && session.username == this.username\n    && session.password == this.password;\n}\n\nvar id = 0;\n\n/**\n * Creates a new ScramSHA1 authentication mechanism\n * @class\n * @return {ScramSHA1} A cursor instance\n */\nvar ScramSHA1 = function() {\n  this.authStore = [];\n  this.id = id++;\n}\n\nvar parsePayload = function(payload) {\n  var dict = {};\n  var parts = payload.split(',');\n\n  for(var i = 0; i < parts.length; i++) {\n    var valueParts = parts[i].split('=');\n    dict[valueParts[0]] = valueParts[1];\n  }\n\n  return dict;\n}\n\nvar passwordDigest = function(username, password) {\n  if(typeof username != 'string') throw new MongoError(\"username must be a string\");\n  if(typeof password != 'string') throw new MongoError(\"password must be a string\");\n  if(password.length == 0) throw new MongoError(\"password cannot be empty\");\n  // Use node md5 generator\n  var md5 = crypto.createHash('md5');\n  // Generate keys used for authentication\n  md5.update(username + \":mongo:\" + password, 'utf8');\n  return md5.digest('hex');\n}\n\n// XOR two buffers\nvar xor = function(a, b) {\n  if (!Buffer.isBuffer(a)) a = new Buffer(a)\n  if (!Buffer.isBuffer(b)) b = new Buffer(b)\n  var res = []\n  if (a.length > b.length) {\n    for (var i = 0; i < b.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  } else {\n    for (var i = 0; i < a.length; i++) {\n      res.push(a[i] ^ b[i])\n    }\n  }\n  return new Buffer(res);\n}\n\n// Create a final digest\nvar hi = function(data, salt, iterations) {\n  // Create digest\n  var digest = function(msg) {\n    var hmac = crypto.createHmac('sha1', data);\n    hmac.update(msg);\n    return new Buffer(hmac.digest('base64'), 'base64');\n  }\n\n  // Create variables\n  salt = Buffer.concat([salt, new Buffer('\\x00\\x00\\x00\\x01')])\n  var ui = digest(salt);\n  var u1 = ui;\n\n  for(var i = 0; i < iterations - 1; i++) {\n    u1 = digest(u1);\n    ui = xor(ui, u1);\n  }\n\n  return ui;\n}\n\n/**\n * Authenticate\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {string} db Name of the database\n * @param {string} username Username\n * @param {string} password Password\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.auth = function(server, connections, db, username, password, callback) {\n  var self = this;\n  // Total connections\n  var count = connections.length;\n  if(count == 0) return callback(null, null);\n\n  // Valid connections\n  var numberOfValidConnections = 0;\n  var credentialsValid = false;\n  var errorObject = null;\n\n  // Execute MongoCR\n  var executeScram = function(connection) {\n    // Clean up the user\n    username = username.replace('=', \"=3D\").replace(',', '=2C');\n\n    // Create a random nonce\n    var nonce = crypto.randomBytes(24).toString('base64');\n    // var nonce = 'MsQUY9iw0T9fx2MUEz6LZPwGuhVvWAhc'\n    var firstBare = f(\"n=%s,r=%s\", username, nonce);\n\n    // Build command structure\n    var cmd = {\n        saslStart: 1\n      , mechanism: 'SCRAM-SHA-1'\n      , payload: new Binary(f(\"n,,%s\", firstBare))\n      , autoAuthorize: 1\n    }\n\n    // Handle the error\n    var handleError = function(err, r) {\n      if(err) {\n        numberOfValidConnections = numberOfValidConnections - 1;\n        errorObject = err; return false;\n      } else if(r.result['$err']) {\n        errorObject = r.result; return false;\n      } else if(r.result['errmsg']) {\n        errorObject = r.result; return false;\n      } else {\n        credentialsValid = true;\n        numberOfValidConnections = numberOfValidConnections + 1;\n      }\n\n      return true\n    }\n\n    // Finish up\n    var finish = function(_count, _numberOfValidConnections) {\n      if(_count == 0 && _numberOfValidConnections > 0) {\n        // Store the auth details\n        addAuthSession(self.authStore, new AuthSession(db, username, password));\n        // Return correct authentication\n        return callback(null, true);\n      } else if(_count == 0) {\n        if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n        return callback(errorObject, false);\n      }\n    }\n\n    var handleEnd = function(_err, _r) {\n      // Handle any error\n      handleError(_err, _r)\n      // Adjust the number of connections\n      count = count - 1;\n      // Execute the finish\n      finish(count, numberOfValidConnections);\n    }\n\n    // Execute start sasl command\n    server.command(f(\"%s.$cmd\", db)\n      , cmd, { connection: connection }, function(err, r) {\n\n      // Do we have an error, handle it\n      if(handleError(err, r) == false) {\n        count = count - 1;\n\n        if(count == 0 && numberOfValidConnections > 0) {\n          // Store the auth details\n          addAuthSession(self.authStore, new AuthSession(db, username, password));\n          // Return correct authentication\n          return callback(null, true);\n        } else if(count == 0) {\n          if(errorObject == null) errorObject = new MongoError(f(\"failed to authenticate using scram\"));\n          return callback(errorObject, false);\n        }\n\n        return;\n      }\n\n      // Get the dictionary\n      var dict = parsePayload(r.result.payload.value())\n\n      // Unpack dictionary\n      var iterations = parseInt(dict.i, 10);\n      var salt = dict.s;\n      var rnonce = dict.r;\n\n      // Set up start of proof\n      var withoutProof = f(\"c=biws,r=%s\", rnonce);\n      var passwordDig = passwordDigest(username, password);\n      var saltedPassword = hi(passwordDig\n          , new Buffer(salt, 'base64')\n          , iterations);\n\n      // Create the client key\n      var hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer(\"Client Key\"));\n      var clientKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create the stored key\n      var hash = crypto.createHash('sha1');\n      hash.update(clientKey);\n      var storedKey = new Buffer(hash.digest('base64'), 'base64');\n\n      // Create the authentication message\n      var authMsg = [firstBare, r.result.payload.value().toString('base64'), withoutProof].join(',');\n\n      // Create client signature\n      var hmac = crypto.createHmac('sha1', storedKey);\n      hmac.update(new Buffer(authMsg));\n      var clientSig = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Create client proof\n      var clientProof = f(\"p=%s\", new Buffer(xor(clientKey, clientSig)).toString('base64'));\n\n      // Create client final\n      var clientFinal = [withoutProof, clientProof].join(',');\n\n      // Generate server key\n      var hmac = crypto.createHmac('sha1', saltedPassword);\n      hmac.update(new Buffer('Server Key'))\n      var serverKey = new Buffer(hmac.digest('base64'), 'base64');\n\n      // Generate server signature\n      var hmac = crypto.createHmac('sha1', serverKey);\n      hmac.update(new Buffer(authMsg))\n      var serverSig = new Buffer(hmac.digest('base64'), 'base64');\n\n      //\n      // Create continue message\n      var cmd = {\n          saslContinue: 1\n        , conversationId: r.result.conversationId\n        , payload: new Binary(new Buffer(clientFinal))\n      }\n\n      //\n      // Execute sasl continue\n      server.command(f(\"%s.$cmd\", db)\n        , cmd, { connection: connection }, function(err, r) {\n          if(r && r.result.done == false) {\n            var cmd = {\n                saslContinue: 1\n              , conversationId: r.result.conversationId\n              , payload: new Buffer(0)\n            }\n\n            server.command(f(\"%s.$cmd\", db)\n              , cmd, { connection: connection }, function(err, r) {\n                handleEnd(err, r);\n            });\n          } else {\n            handleEnd(err, r);\n          }\n      });\n    });\n  }\n\n  var _execute = function(_connection) {\n    process.nextTick(function() {\n      executeScram(_connection);\n    });\n  }\n\n  // For each connection we need to authenticate\n  while(connections.length > 0) {\n    _execute(connections.shift());\n  }\n}\n\n// Add to store only if it does not exist\nvar addAuthSession = function(authStore, session) {\n  var found = false;\n\n  for(var i = 0; i < authStore.length; i++) {\n    if(authStore[i].equal(session)) {\n      found = true;\n      break;\n    }\n  }\n\n  if(!found) authStore.push(session);\n}\n\n/**\n * Re authenticate pool\n * @method\n * @param {{Server}|{ReplSet}|{Mongos}} server Topology the authentication method is being called on\n * @param {[]Connections} connections Connections to authenticate using this authenticator\n * @param {authResultCallback} callback The callback to return the result from the authentication\n * @return {object}\n */\nScramSHA1.prototype.reauthenticate = function(server, connections, callback) {\n  var authStore = this.authStore.slice(0);\n  var count = authStore.length;\n  var err = null;\n  // No connections\n  if(count == 0) return callback(null, null);\n  // Iterate over all the auth details stored\n  for(var i = 0; i < authStore.length; i++) {\n    this.auth(server, connections, authStore[i].db, authStore[i].username, authStore[i].password, function(err, r) {\n      if(err) err = err;\n      count = count - 1;\n      // Done re-authenticating\n      if(count == 0) {\n        callback(err, null);\n      }\n    });\n  }\n}\n\n\nmodule.exports = ScramSHA1;\n"]}