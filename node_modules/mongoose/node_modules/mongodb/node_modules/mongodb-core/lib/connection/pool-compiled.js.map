{"version":3,"sources":["pool.js"],"names":[],"mappings":"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","file":"pool-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , EventEmitter = require('events').EventEmitter\n  , Connection = require('./connection')\n  , Query = require('./commands').Query\n  , Logger = require('./logger')\n  , f = require('util').format;\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar DESTROYED = 'destroyed';\n\nvar _id = 0;\n\n/**\n * Creates a new Pool instance\n * @class\n * @param {string} options.host The server host\n * @param {number} options.port The server port\n * @param {number} [options.size=1] Max server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=0] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passPhrase] SSL Certificate pass phrase\n * @param {boolean} [options.rejectUnauthorized=false] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @fires Pool#connect\n * @fires Pool#close\n * @fires Pool#error\n * @fires Pool#timeout\n * @fires Pool#parseError\n * @return {Pool} A cursor instance\n */\nvar Pool = function(options) {\n  var self = this;\n  // Add event listener\n  EventEmitter.call(this);\n  // Set empty if no options passed\n  this.options = options || {};\n  this.size = typeof options.size == 'number' && !isNaN(options.size) ? options.size : 5;\n  this.waitMS = typeof options.waitMS == 'number' && !isNaN(options.waitMS) ? options.waitMS : 1000;\n\n  // Save host and port\n  this.host = options.host;\n  this.port = options.port;\n\n  // Message handler\n  this.messageHandler = options.messageHandler;\n  // No bson parser passed in\n  if(!options.bson) throw new Error(\"must pass in valid bson parser\");\n  // // Contains all connections\n  // this.connections = [];\n  // Contains all available connections\n  this.availableConnections = [];\n  this.inUseConnections = [];\n  this.newConnections = [];\n  this.connectingConnections = [];\n  // Current status of the pool\n  this.state = DISCONNECTED;\n  // Round robin index\n  this.index = 0;\n  this.dead = false;\n  // Logger instance\n  this.logger = Logger('Pool', options);\n  // Pool id\n  this.id = _id++;\n  // Grouping tag used for debugging purposes\n  this.tag = options.tag;\n  // Operation work queue\n  this.queue = [];\n  // Currently executing\n  this.executing = false;\n  // Unref pool\n  this.unreference = false;\n}\n\ninherits(Pool, EventEmitter);\n\nvar removeConnection = function(self, connection) {\n  // Destroy connection\n  connection.destroy();\n\n  // Remove connection method\n  var remove = function(connections) {\n    for(var i = 0; i < connections.length; i++) {\n      if(connections[i] === connection) {\n        connections.splice(i, 1);\n        return true;\n      }\n    }\n  }\n\n  // Clean out the connection\n  if(remove(self.availableConnections)) return;\n  if(remove(self.inUseConnections)) return;\n  if(remove(self.newConnections)) return;\n  if(remove(self.connectingConnections)) return;\n}\n\nvar errorHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    // Destroy the connection\n    connection.destroy();\n    // Remove the connection\n    removeConnection(self, connection);\n    // Emit error\n    if(self.listeners('error').length > 0) {\n      self.emit('error', err, connection);\n    }\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] timed out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    // Destroy the connection\n    connection.destroy();\n    // Remove the connection\n    removeConnection(self, connection);\n    // Emit connection timeout to server instance\n    self.emit('timeout', err, connection);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] closed [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    // Destroy the connection\n    connection.destroy();\n    // Remove the connection\n    removeConnection(self, connection);\n    // Emit connection close to server instance\n    self.emit('close', err, connection);\n  }\n}\n\nvar parseErrorHandler = function(self) {\n  return function(err, connection) {\n    if(self.logger.isDebug()) self.logger.debug(f('pool [%s] errored out [%s] with connection [%s]', this.dead, JSON.stringify(err), JSON.stringify(connection)));\n    // Destroy the connection\n    connection.destroy();\n    // Remove the connection\n    removeConnection(self, connection);\n    // Emit error to server instance\n    self.emit('parseError', err, connection);\n  }\n}\n\n/**\n * Unref the pool\n * @method\n */\nPool.prototype.unref = function() {\n  this.unreference = true;\n  this.getAll().forEach(function(c) {\n    c.unref();\n  });\n}\n\n/**\n * Destroy pool\n * @method\n */\nPool.prototype.destroy = function() {\n  this.state = DESTROYED;\n  // Set dead\n  this.dead = true;\n  // Get all the connections\n  var connections = this.getAll();\n  // Destroy all the connections\n  connections.forEach(function(c) {\n    // Destroy all event emitters\n    [\"close\", \"message\", \"error\", \"timeout\", \"parseError\", \"connect\"].forEach(function(e) {\n      c.removeAllListeners(e);\n    });\n\n    // Destroy the connection\n    c.destroy();\n  });\n\n  // Wipe out all connection arrays\n  this.availableConnections = [];\n  this.connectingConnections = [];\n  this.inUseConnections = [];\n  this.newConnections = [];\n}\n\n/**\n * Connect pool\n * @method\n */\nPool.prototype.connect = function(_options) {\n  var self = this;\n  // Set to connecting\n  this.state = CONNECTING\n  // No dead\n  this.dead = false;\n\n  // Set the message handler\n  self.options.messageHandler = self.messageHandler;\n  // Create a new connection\n  var connection = new Connection(self.options);\n\n  // Delete all the event handlers\n  ['close', 'error', 'timeout', 'parseError', 'connect'].forEach(function(x) {\n    connection.removeAllListeners(x);\n  })\n\n  // Add all handlers\n  connection.once('close', closeHandler(self));\n  connection.once('error', errorHandler(self));\n  connection.once('timeout', timeoutHandler(self));\n  connection.once('parseError', parseErrorHandler(self));\n  connection.on('connect', function(connection) {\n    if(self.state == 'DESTROYED') {\n      return connection.destroy();\n    }\n\n    // Add the connection to the list of available connections\n    self.availableConnections.push(connection);\n    // Emit connected event\n    self.emit(\"connect\", self);\n  });\n\n  // Start connection\n  connection.connect(_options);\n}\n\nvar _createConnection = function(self) {\n  self.options.messageHandler = self.messageHandler;\n  var connection = new Connection(self.options);\n\n  // Push the connection\n  self.connectingConnections.push(connection);\n\n  // Handle any errors\n  var tempErrorHandler = function(_connection) {\n    return function(err) {\n      _connection.destroy();\n    }\n  }\n\n  // All event handlers\n  var handlers = [\"close\", \"message\", \"error\", \"timeout\", \"parseError\", \"connect\"];\n\n  // Handle successful connection\n  var tempConnectHandler = function(_connection) {\n    return function() {\n      if(self.state == 'DESTROYED') {\n        // Remove the connection from the connectingConnections\n        var index = self.connectingConnections.indexOf(_connection);\n        if(index != -1) {\n          self.connectingConnections.splice(index, 1);\n        }\n\n        return _connection.destroy();\n      }\n\n      // Destroy all event emitters\n      handlers.forEach(function(e) {\n        _connection.removeAllListeners(e);\n      });\n\n      // Add the final handlers\n      _connection.once('close', closeHandler(self));\n      _connection.once('error', errorHandler(self));\n      _connection.once('timeout', timeoutHandler(self));\n      _connection.once('parseError', parseErrorHandler(self));\n\n      // Remove the connection from the connectingConnections\n      var index = self.connectingConnections.indexOf(_connection);\n      if(index != -1) {\n        self.connectingConnections.splice(index, 1);\n      }\n\n      // Add to queue of new connection\n      self.newConnections.push(_connection);\n      // Emit connection to server instance\n      // alowing it to apply any needed authentication\n      self.emit('connection', _connection);\n\n      // Execute any work waiting\n      _execute(self)();\n    }\n  }\n\n  // Add all handlers\n  connection.once('close', tempErrorHandler(connection));\n  connection.once('error', tempErrorHandler(connection));\n  connection.once('timeout', tempErrorHandler(connection));\n  connection.once('parseError', tempErrorHandler(connection));\n  connection.once('connect', tempConnectHandler(connection));\n\n  // Start connection\n  connection.connect();\n}\n\nvar _execute = function(self) {\n  return function() {\n    if(self.state == 'DESTROYED') return;\n    // Already executing, skip\n    if(self.executing) return;\n    // Set pool as executing\n    self.executing = true;\n\n    // Total availble connections\n    var totalConnections = self.availableConnections.length\n      + self.connectingConnections.length\n      + self.inUseConnections.length\n      + self.newConnections.length;\n\n    // Have we not reached the max connection size yet\n    if(self.availableConnections.length == 0\n      && self.connectingConnections.length == 0\n      && totalConnections < self.size\n      && self.queue.length > 0) {\n      // Create a new connection\n      _createConnection(self);\n      // Attempt to execute again\n      self.executing = false;\n      return;\n    }\n\n    // Number of ops to do\n    var numberOfOps = self.availableConnections.length > self.queue.length\n      ? self.queue.length : self.availableConnections.length;\n\n    // As long as we have available connections\n    while(true) {\n      // No available connections available\n      if(self.availableConnections.length == 0) break;\n      if(self.queue.length == 0) break;\n\n      // Get a connection\n      var connection = self.availableConnections.pop();\n      if(connection.isConnected()) {\n        var workItem = self.queue.shift();\n\n        // Add connection to callback so we can flush out\n        // only ops for that connection on a socket closure\n        if(workItem.cb) {\n          workItem.cb.connection = connection;\n        }\n\n        // Get actual binary commands\n        var buffer = workItem.buffer;\n\n        // Add connection to workers in flight\n        self.inUseConnections.push(connection);\n\n        if(Array.isArray(buffer)) {\n          for(var i = 0; i < buffer.length; i++) {\n            connection.write(buffer[i]);\n          }\n        } else {\n          connection.write(buffer);\n        }\n\n        // Fire and forgot message\n        if(workItem.immediateRelease) {\n          self.availableConnections.push(connection);\n        }\n      }\n    }\n\n    self.executing = false;\n  }\n}\n\n/**\n * Write a message to MongoDB\n * @method\n * @return {Connection}\n */\nPool.prototype.write = function(buffer, cb, options) {\n  // Do we have an operation\n  var operation = {buffer:buffer, cb: cb};\n  // Do we immediately release the connection back to available (fire and forget)\n  if(options && options.immediateRelease) {\n    operation.immediateRelease = true;\n  }\n\n  // Push the operation to the queue of operations in progress\n  this.queue.push(operation);\n  // Attempt to write all buffers out\n  _execute(this)();\n}\n\n/**\n * Make a passed connection available\n * @method\n * @return {Connection}\n */\nPool.prototype.connectionAvailable = function(connection) {\n  // Get the connection from the newConnections\n  var index = this.newConnections.indexOf(connection);\n  if(index != -1) {\n    this.newConnections.splice(index, 1);\n  }\n\n  // If it's in the inUseConnections\n  index = this.inUseConnections.indexOf(connection);\n  if(index != -1) {\n    this.inUseConnections.splice(index, 1);\n  }\n\n  // Add the connection to available connections if it's not a monitoring threads\n  if(this.availableConnections.indexOf(connection) == -1) {\n    this.availableConnections.push(connection);\n  }\n\n  // Fire execute loop\n  _execute(this)();\n}\n\n/**\n * Get a pool connection (round-robin)\n * @method\n * @return {Connection}\n */\nPool.prototype.get = function(options) {\n  options = options || {};\n\n  // Set the current index\n  this.index = this.index + 1;\n\n  // Get all connections\n  var connections = this.availableConnections.slice(0);\n\n  if(connections.length == 1) {\n    return connections[0];\n  } else {\n    this.index = this.index % connections.length;\n    return connections[this.index];\n  }\n}\n\n/**\n * Get all pool connections\n * @method\n * @return {array}\n */\nPool.prototype.getAll = function() {\n  return this.availableConnections\n    .concat(this.inUseConnections)\n    .concat(this.connectingConnections)\n    .concat(this.newConnections);\n}\n\n/**\n * Is the pool connected\n * @method\n * @return {boolean}\n */\nPool.prototype.isConnected = function() {\n  // Available connections\n  for(var i = 0; i < this.availableConnections.length; i++) {\n    if(this.availableConnections[i].isConnected()) return true;\n  }\n\n  // inUseConnections\n  for(var i = 0; i < this.inUseConnections.length; i++) {\n    if(this.inUseConnections[i].isConnected()) return true;\n  }\n\n  for(var i = 0; i < this.newConnections.length; i++) {\n    if(this.newConnections[i].isConnected()) return true;\n  }\n\n  return this.state == CONNECTED;\n}\n\n/**\n * Was the pool destroyed\n * @method\n * @return {boolean}\n */\nPool.prototype.isDestroyed = function() {\n  return this.state == DESTROYED;\n}\n\n\n/**\n * A server connect event, used to verify that the connection is up and running\n *\n * @event Pool#connect\n * @type {Pool}\n */\n\n/**\n * The server connection closed, all pool connections closed\n *\n * @event Pool#close\n * @type {Pool}\n */\n\n/**\n * The server connection caused an error, all pool connections closed\n *\n * @event Pool#error\n * @type {Pool}\n */\n\n/**\n * The server connection timed out, all pool connections closed\n *\n * @event Pool#timeout\n * @type {Pool}\n */\n\n/**\n * The driver experienced an invalid message, all pool connections closed\n *\n * @event Pool#parseError\n * @type {Pool}\n */\n\nmodule.exports = Pool;\n"]}