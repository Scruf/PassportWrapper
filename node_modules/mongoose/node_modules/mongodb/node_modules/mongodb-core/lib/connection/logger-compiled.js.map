{"version":3,"sources":["logger.js"],"names":[],"mappings":"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","file":"logger-compiled.js","sourcesContent":["\"use strict\";\n\nvar f = require('util').format\n  , MongoError = require('../error');\n\n// Filters for classes\nvar classFilters = {};\nvar filteredClasses = {};\nvar level = null;\n// Save the process id\nvar pid = process.pid;\n// current logger\nvar currentLogger = null;\n\n/**\n * Creates a new Logger instance\n * @class\n * @param {string} className The Class name associated with the logging instance\n * @param {object} [options=null] Optional settings.\n * @param {Function} [options.logger=null] Custom logger function;\n * @param {string} [options.loggerLevel=error] Override default global log level.\n * @return {Logger} a Logger instance.\n */\nvar Logger = function(className, options) {\n  if(!(this instanceof Logger)) return new Logger(className, options);\n  options = options || {};\n\n  // Current reference\n  var self = this;\n  this.className = className;\n\n  // Current logger\n  if(currentLogger == null && options.logger) {\n    currentLogger = options.logger;\n  } else if(currentLogger == null) {\n    currentLogger = console.log;\n  }\n\n  // Set level of logging, default is error\n  if(level == null) {\n    level = options.loggerLevel || 'error';\n  }\n\n  // Add all class names\n  if(filteredClasses[this.className] == null) classFilters[this.className] =  true;\n}\n\n/**\n * Log a message at the debug level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.debug = function(message, object) {\n  if(this.isDebug()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'DEBUG', this.className, pid, dateTime, message);        \n    var state = {\n      type: 'debug', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n}\n\n/**\n * Log a message at the info level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.info = function(message, object) {\n  if(this.isInfo()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'INFO', this.className, pid, dateTime, message);\n    var state = {\n      type: 'info', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Log a message at the error level\n * @method\n * @param {string} message The message to log\n * @param {object} object additional meta data to log\n * @return {null}\n */\nLogger.prototype.error = function(message, object) {\n  if(this.isError()\n    && ((Object.keys(filteredClasses).length > 0 && filteredClasses[this.className])\n      || (Object.keys(filteredClasses).length == 0 && classFilters[this.className]))) {\n    var dateTime = new Date().getTime();\n    var msg = f(\"[%s-%s:%s] %s %s\", 'ERROR', this.className, pid, dateTime, message);\n    var state = {\n      type: 'error', message: message, className: this.className, pid: pid, date: dateTime\n    };\n    if(object) state.meta = object;\n    currentLogger(msg, state);\n  }\n},\n\n/**\n * Is the logger set at info level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isInfo = function() {\n  return level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at error level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isError = function() {\n  return level == 'error' || level == 'info' || level == 'debug';\n},\n\n/**\n * Is the logger set at debug level\n * @method\n * @return {boolean}\n */\nLogger.prototype.isDebug = function() {\n  return level == 'debug';\n}\n\n/**\n * Resets the logger to default settings, error and no filtered classes\n * @method\n * @return {null}\n */\nLogger.reset = function() {\n  level = 'error';\n  filteredClasses = {};\n}\n\n/**\n * Get the current logger function\n * @method\n * @return {function}\n */\nLogger.currentLogger = function() {\n  return currentLogger;\n}\n\n/**\n * Set the current logger function\n * @method\n * @param {function} logger Logger function.\n * @return {null}\n */\nLogger.setCurrentLogger = function(logger) {\n  if(typeof logger != 'function') throw new MongoError(\"current logger must be a function\");\n  currentLogger = logger;\n}\n\n/**\n * Set what classes to log.\n * @method\n * @param {string} type The type of filter (currently only class)\n * @param {string[]} values The filters to apply\n * @return {null}\n */\nLogger.filter = function(type, values) {\n  if(type == 'class' && Array.isArray(values)) {\n    filteredClasses = {};\n\n    values.forEach(function(x) {\n      filteredClasses[x] = true;\n    });\n  }\n}\n\n/**\n * Set the current log level\n * @method\n * @param {string} level Set current log level (debug, info, error)\n * @return {null}\n */\nLogger.setLevel = function(_level) {\n  if(_level != 'info' && _level != 'error' && _level != 'debug') throw new Error(f(\"%s is an illegal logging level\", _level));\n  level = _level;\n}\n\nmodule.exports = Logger;"]}