{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA,IAAI,cAAc,QAAQ,IAAR,EAAc,WAAd;IAChB,iBAAiB,QAAQ,IAAR,EAAc,cAAd;;AAEnB,IAAI,MAAM,6DAAN;AACJ,IAAI,MAAM,8DAAN;AACJ,IAAI,MAAM,yGAAN;AACJ,IAAI,WAAW,GAAX;AACJ,IAAI,IAAI,CAAJ;;AAEJ,IAAI,gBAAgB,YAAU;AAC5B,MAAI,IAAI,CAAJ;;;AADwB,MAIzB,KAAK,GAAL,EAAU;AACX,kBAAc,UAAd,EADW;AAEX,gBAAY,YAAW;AACrB,cAAQ,GAAR,CAAY,gBAAZ,EADqB;KAAX,EAET,QAFH,EAFW;GAAb;;AAOA,UAAQ,GAAR,CAAY,yEAAZ,EAX4B;AAY5B,cAAY,OAAZ,CAAoB,GAApB,EAAyB;;;;;;GAAzB,EAMG,UAAS,GAAT,EAAc,EAAd,EAAkB;AACnB,YAAQ,GAAR,CAAY,MAAZ,EADmB;AAEnB,QAAI,cAAc,GAAG,UAAH,CAAc,YAAd,EAA4B,IAA5B,GAAmC,iBAAnC,CAAqD,eAAe,SAAf,CAArD,CAA+E,SAA/E,CAAyF,CAAzF,CAAd,CAFe;AAGnB,gBAAY,OAAZ,CAAoB,UAAS,GAAT,EAAc,IAAd,EAAmB;AACrC,cAAQ,GAAR,CAAY,mDAAZ,EADqC;AAErC,SAAG,YAAH,CAAgB,WAAhB,GAA8B,OAA9B,CAAsC,UAAS,CAAT,EAAY;AAChD,gBAAQ,GAAR,CAAY,SAAS,EAAE,IAAF,CAArB,CADgD;OAAZ,CAAtC;;;;AAFqC,QAQrC,CAAG,KAAH,CAAS,YAAU;;AAEjB,gBAAQ,GAAR,CAAY,2DAAZ,EAFiB;OAAV,CAAT,CARqC;KAAnB,CAApB,CAHmB;GAAlB,CANH,CAZ4B;CAAV;;;AAsCpB,IAAI,aAAa,YAAY,YAAU;AACrC,kBADqC;CAAV,EAE1B,QAFc,CAAb","file":"test-compiled.js","sourcesContent":["var MongoClient = require('./').MongoClient,\n  ReadPreference = require('./').ReadPreference;\n\nvar uri = \"mongodb://admin:admin@localhost:27017,localhost:27018/admin\";\nvar uri = \"mongodb://localhost:31000,localhost:31001/test?replicaSet=rs\";\nvar uri = \"mongodb://muser:mpass@ds015510-a0.mlab.com:15510,ds015510-a1.mlab.com:15510/test?replicaSet=rs-ds015510\";\nvar interval = 500;\nvar i = 0;\n\nvar openThenClose = function(){\n  i = i + 1;\n\n  // if(i == 100) {\n  if(i == 100) {\n    clearInterval(intervalId);\n    setInterval(function() {\n      console.log('wait for drain');\n    }, interval);\n  }\n\n  console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! MongoClient.connect\")\n  MongoClient.connect(uri, {\n    // replSet: {\n    //   socketOptions: {\n    //     connectTimeoutMS: 2000, socketTimeoutMS: 2000\n    //   }\n    // }\n  }, function(err, db) {\n    console.log(\"open\");\n    var descriptors = db.collection(\"collection\").find().setReadPreference(ReadPreference.SECONDARY).batchSize(2);\n    descriptors.toArray(function(err, docs){\n      console.log(\"-------------------------------------------------\")\n      db.serverConfig.connections().forEach(function(x) {\n        console.log(\"--- \" + x.host)\n      })\n      // console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! toArray\")\n      // console.dir(err)\n      // console.dir(docs)\n      db.close(function(){\n        // console.log(\"close\");\n        console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! close\")\n      });\n    });\n  });\n};\n\n// openThenClose();\nvar intervalId = setInterval(function(){\n  openThenClose();\n}, interval);\n\n// var start = null;\n//\n// console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ CLOSE 0\")\n// MongoClient.connect('mongodb://localhost:31000/test?replicaSet=rs', {\n//   replSet: {\n//     socketOptions: {\n//       connectTimeoutMS: 2000, socketTimeoutMS: 2000\n//     }\n//   }\n//\n// }, function(err, db) {\n//   console.log(err)\n//   start = new Date().getTime();\n//   console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ CLOSE 1\")\n//   db.close();\n// });\n//\n// process.on('exit', function() {\n//   console.log(\"--------- exit :: \" + (new Date().getTime() - start));\n// });\n// MongoClient.connect('mongodb://localhost:51000,localhost:51001/test', {\n//   mongos: {\n//     poolSize: 100\n//   },\n//   acceptableLatencyMS: 100\n// }, function(err, db) {\n//   const collection = db.collection(\"tempCollection\");\n//\n//   collection.remove({}, (err) => {\n//     if (err) return console.trace(err);\n//\n//     collection.createIndexes([{key: {number: 1}}], (err) => {\n//       const documents = [];\n//       for (var i = 0; i < 30000; i++) {\n//         documents.push({number: i % 15, prop: '+ftnmrzxEcb+0wCcZjC/YWKP5K0M33FC+FyTaPKxCbyEkFWmXgdU+QW7I6HxDmUPjN8='})\n//       }\n//\n//       collection.insertMany(documents, (err) => {\n//         if (err) return console.trace(err);\n//         console.log(\"finish inserting documents...\");\n//\n//         setInterval(function() {\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 2}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 3000}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 3000}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//\n//           collection.find({number: 3000}).toArray((err, results) => {\n//             if (err) return console.trace(err);\n//             console.log(\"got\", results.length, \"results\");\n//           })\n//         }, 200);\n//       })\n//     })\n//   })\n// });\n\n// MongoClient.connect('mongodb://localhost:31000,localhost:31001,localhost:31002/test?rs_name=rs&maxPoolSize=100', {\n//   replSet: {\n//     socketOptions: {\n//       connectTimeoutMS: 2000,\n//       socketTimeoutMS: 2000,\n//     },\n//     // haInterval: 1500\n//   }\n// }, function(err, db) {\n//   console.dir(err)\n//\n//   db.serverConfig.on('timeout', function() {\n//     console.log(\"----- timeout\")\n//   })\n//\n//   db.serverConfig.on('close', function() {\n//     console.log(\"----- close\")\n//   })\n// MongoClient.connect('mongodb://localhost:31000/test?maxPoolSize=100', function(err, db) {\n  // console.dir(err)\n  //\n  // db.on('reconnect', function() {\n  //   console.log('reconnect', new Error().stack)\n  // });\n  //\n  // setInterval(function() {\n  //   db.collection('t').insertOne({a:1}, function(e) {\n  //     // console.log(\"------ insert\")\n  //     // console.dir(e)\n  //   });\n  // }, 1)\n  //\n  // var doit = true;\n  //\n  // setInterval(function() {\n  //   if(!doit) return\n  //   console.log(\"-------------------------------------\")\n  //   // // force a reconnect\n  //   // var replset = db.serverConfig.s.replset;\n  //   // var state = replset.s.replState;\n  //   // var connections = state.primary.connections();\n  //   var connections = db.serverConfig.connections();\n  //\n  //   for(var i = 0; i < connections.length; i++) {\n  //     connections[i].connection.write(\"da12123123213213123233123213123123123123asdacsdcdv \")\n  //   }\n  // }, 5000);\n\n  // setInterval(function() {\n  //   doit = false;\n  //\n  //   // db.close();\n  // }, 10000);\n\n  // db.close();\n// })\n"]}