{"version":3,"sources":["index.js"],"names":[],"mappings":";AACA,IAAI,OAAO,QAAQ,cAAR,CAAP;IACF,kBAAkB,QAAQ,WAAR,CAAlB;;;AAGF,IAAI,UAAU,QAAQ,oBAAR,EAA8B,OAA9B;;;AAGd,QAAQ,UAAR,GAAqB,KAAK,UAAL;;;AAGrB,QAAQ,KAAR,GAAgB,QAAQ,aAAR,CAAhB;AACA,QAAQ,WAAR,GAAsB,QAAQ,oBAAR,CAAtB;AACA,QAAQ,EAAR,GAAa,QAAQ,UAAR,CAAb;AACA,QAAQ,UAAR,GAAqB,QAAQ,kBAAR,CAArB;AACA,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,OAAR,GAAkB,QAAQ,eAAR,CAAlB;AACA,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,cAAR,GAAyB,QAAQ,uBAAR,CAAzB;AACA,QAAQ,SAAR,GAAoB,QAAQ,yBAAR,CAApB;AACA,QAAQ,KAAR,GAAgB,QAAQ,oBAAR,CAAhB;AACA,QAAQ,MAAR,GAAiB,KAAK,MAAL;AACjB,QAAQ,MAAR,GAAiB,QAAQ,cAAR,CAAjB;AACA,QAAQ,YAAR,GAAuB,QAAQ,qBAAR,CAAvB;;;AAGA,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAAV;AACjB,QAAQ,IAAR,GAAe,KAAK,IAAL,CAAU,IAAV;AACf,QAAQ,GAAR,GAAc,KAAK,IAAL,CAAU,GAAV;AACd,QAAQ,KAAR,GAAgB,KAAK,IAAL,CAAU,KAAV;AAChB,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAAV;AACjB,QAAQ,IAAR,GAAe,KAAK,IAAL,CAAU,IAAV;AACf,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAAV;AACjB,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAAV;AACjB,QAAQ,QAAR,GAAmB,KAAK,IAAL,CAAU,QAAV;AACnB,QAAQ,QAAR,GAAmB,KAAK,IAAL,CAAU,QAAV;AACnB,QAAQ,MAAR,GAAiB,KAAK,IAAL,CAAU,MAAV;AACjB,QAAQ,SAAR,GAAoB,KAAK,IAAL,CAAU,SAAV;;;AAGpB,QAAQ,OAAR,GAAkB,OAAlB;;;AAGA,QAAQ,UAAR,GAAqB,UAAS,OAAT,EAAkB,QAAlB,EAA4B;AAC/C,MAAG,OAAO,OAAP,IAAkB,UAAlB,EAA8B,WAAW,OAAX,EAAoB,UAAU,EAAV,CAArD;AACA,SAAO,IAAI,eAAJ,CAAoB,IAApB,EAA0B,OAA1B,EAAmC,QAAnC,CAAP,CAF+C;CAA5B;;;AAMrB,OAAO,OAAP,GAAiB,OAAjB","file":"index-compiled.js","sourcesContent":["// Core module\nvar core = require('mongodb-core'),\n  Instrumentation = require('./lib/apm');\n\n// Set up the connect function\nvar connect = require('./lib/mongo_client').connect;\n\n// Expose error class\nconnect.MongoError = core.MongoError;\n\n// Actual driver classes exported\nconnect.Admin = require('./lib/admin');\nconnect.MongoClient = require('./lib/mongo_client');\nconnect.Db = require('./lib/db');\nconnect.Collection = require('./lib/collection');\nconnect.Server = require('./lib/server');\nconnect.ReplSet = require('./lib/replset');\nconnect.Mongos = require('./lib/mongos');\nconnect.ReadPreference = require('./lib/read_preference');\nconnect.GridStore = require('./lib/gridfs/grid_store');\nconnect.Chunk = require('./lib/gridfs/chunk');\nconnect.Logger = core.Logger;\nconnect.Cursor = require('./lib/cursor');\nconnect.GridFSBucket = require('./lib/gridfs-stream');\n\n// BSON types exported\nconnect.Binary = core.BSON.Binary;\nconnect.Code = core.BSON.Code;\nconnect.Map = core.BSON.Map;\nconnect.DBRef = core.BSON.DBRef;\nconnect.Double = core.BSON.Double;\nconnect.Long = core.BSON.Long;\nconnect.MinKey = core.BSON.MinKey;\nconnect.MaxKey = core.BSON.MaxKey;\nconnect.ObjectID = core.BSON.ObjectID;\nconnect.ObjectId = core.BSON.ObjectID;\nconnect.Symbol = core.BSON.Symbol;\nconnect.Timestamp = core.BSON.Timestamp;\n\n// Add connect method\nconnect.connect = connect;\n\n// Set up the instrumentation method\nconnect.instrument = function(options, callback) {\n  if(typeof options == 'function') callback = options, options = {};\n  return new Instrumentation(core, options, callback);\n}\n\n// Set our exports to be the connect function\nmodule.exports = connect;\n"]}