{"version":3,"sources":["mongos.js"],"names":[],"mappings":"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","file":"mongos-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , MongoCR = require('mongodb-core').MongoCR\n  , MongoError = require('mongodb-core').MongoError\n  , CMongos = require('mongodb-core').Mongos\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , Define = require('./metadata')\n  , Server = require('./server')\n  , Store = require('./topology_base').Store\n  , shallowClone = require('./utils').shallowClone\n  , MAX_JS_INT = require('./utils').MAX_JS_INT;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n *\n * **Mongos Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Mongos = require('mongodb').Mongos,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using Mongos\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new Mongos([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new Mongos instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=5000] Time between each replicaset status check.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @fires Mongos#connect\n * @fires Mongos#ha\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#fullsetup\n * @fires Mongos#open\n * @fires Mongos#close\n * @fires Mongos#error\n * @fires Mongos#timeout\n * @fires Mongos#parseError\n * @return {Mongos} a Mongos instance.\n */\nvar Mongos = function(servers, options) {\n  if(!(this instanceof Mongos)) return new Mongos(servers, options);\n  options = options || {};\n  var self = this;\n\n  // Ensure all the instances are Server\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) {\n      throw MongoError.create({message: \"all seed list instances must be of the Server type\", driver:true});\n    }\n  }\n\n  // Store option defaults\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: -1\n  }\n\n  // If we have \"unlimited\" set to max Number\n  if(storeOptions.bufferMaxEntries == -1) {\n    storeOptions.bufferMaxEntries = MAX_JS_INT;\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Debug tag\n  var tag = options.tag;\n\n  // Build seed list\n  var seedlist = servers.map(function(x) {\n    return {host: x.host, port: x.port}\n  });\n\n  // Final options\n  var finalOptions = shallowClone(options);\n\n  // Default values\n  finalOptions.size = typeof options.poolSize == 'number' ? options.poolSize : 5;\n  finalOptions.reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  finalOptions.emitError = typeof options.emitError == 'boolean' ? options.emitError : true;\n  finalOptions.cursorFactory = Cursor;\n\n  // Add the store\n  finalOptions.disconnectHandler = store;\n\n  // Ensure we change the sslCA option to ca if available\n  if(options.sslCA) finalOptions.ca = options.sslCA;\n  if(typeof options.sslValidate == 'boolean') finalOptions.rejectUnauthorized = options.sslValidate;\n  if(options.sslKey) finalOptions.key = options.sslKey;\n  if(options.sslCert) finalOptions.cert = options.sslCert;\n  if(options.sslPass) finalOptions.passphrase = options.sslPass;\n  if(options.checkServerIdentity) finalOptions.checkServerIdentity = options.checkServerIdentity;\n\n  // Socket options passed down\n  if(options.socketOptions) {\n    if(options.socketOptions.connectTimeoutMS) {\n      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;\n      finalOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;\n    }\n    if(options.socketOptions.socketTimeoutMS)\n      finalOptions.socketTimeout = options.socketOptions.socketTimeoutMS;\n  }\n\n  // Are we running in debug mode\n  var debug = typeof options.debug == 'boolean' ? options.debug : false;\n  if(debug) {\n    finalOptions.debug = debug;\n  }\n\n  // Map keep alive setting\n  if(options.socketOptions && typeof options.socketOptions.keepAlive == 'number') {\n    finalOptions.keepAlive = true;\n    if(typeof options.socketOptions.keepAlive == 'number') {\n      finalOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;\n    }\n  }\n\n  // Connection timeout\n  if(options.socketOptions && typeof options.socketOptions.connectionTimeout == 'number') {\n    finalOptions.connectionTimeout = options.socketOptions.connectionTimeout;\n  }\n\n  // Socket timeout\n  if(options.socketOptions && typeof options.socketOptions.socketTimeout == 'number') {\n    finalOptions.socketTimeout = options.socketOptions.socketTimeout;\n  }\n\n  // noDelay\n  if(options.socketOptions && typeof options.socketOptions.noDelay == 'boolean') {\n    finalOptions.noDelay = options.socketOptions.noDelay;\n  }\n\n  if(typeof options.acceptableLatencyMS == 'number') {\n    finalOptions.localThresholdMS = options.acceptableLatencyMS || 15;\n  }\n\n  // Add the non connection store\n  finalOptions.disconnectHandler = store;\n\n  // Create the Mongos\n  var mongos = new CMongos(seedlist, finalOptions)\n  // Server capabilities\n  var sCapabilities = null;\n  // Add auth prbufferMaxEntriesoviders\n  mongos.addAuthProvider('mongocr', new MongoCR());\n\n  // Internal state\n  this.s = {\n    // Create the Mongos\n      mongos: mongos\n    // Server capabilities\n    , sCapabilities: sCapabilities\n    // Debug turned on\n    , debug: debug\n    // Store option defaults\n    , storeOptions: storeOptions\n    // Cloned options\n    , clonedOptions: finalOptions\n    // Actual store of callbacks\n    , store: store\n    // Options\n    , options: options\n  }\n\n\n  // Last ismaster\n  Object.defineProperty(this, 'isMasterDoc', {\n    enumerable:true, get: function() { return self.s.mongos.lastIsMaster(); }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'numberOfConnectedServers', {\n    enumerable:true, get: function() {\n      return self.s.mongos.s.mongosState.connectedServers().length;\n    }\n  });\n\n  // BSON property\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      return self.s.mongos.bson;\n    }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return self.s.mongos.haInterval; }\n  });\n}\n\n/**\n * @ignore\n */\ninherits(Mongos, EventEmitter);\n\nvar define = Mongos.define = new Define('Mongos', Mongos, false);\n\n// Connect\nMongos.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function(event) {\n    return function(err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function(e) {\n        self.removeListener(e, connectErrorHandler);\n      });\n\n      self.s.mongos.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Error handler\n  var reconnectHandler = function(err) {\n    self.emit('reconnect');\n    self.s.store.execute();\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed', 'topologyOpening',\n      'topologyClosed', 'topologyDescriptionChanged'].forEach(function(e) {\n      self.s.mongos.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.mongos.once('timeout', errorHandler('timeout'));\n    self.s.mongos.once('error', errorHandler('error'));\n    self.s.mongos.once('close', errorHandler('close'));\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      }\n    }\n\n    // Set up SDAM listeners\n    self.s.mongos.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.mongos.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.mongos.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.mongos.on('serverHearbeatFailed', relay('serverHearbeatFailed'));\n    self.s.mongos.on('serverOpening', relay('serverOpening'));\n    self.s.mongos.on('serverClosed', relay('serverClosed'));\n    self.s.mongos.on('topologyOpening', relay('topologyOpening'));\n    self.s.mongos.on('topologyClosed', relay('topologyClosed'));\n    self.s.mongos.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    // Set up serverConfig listeners\n    self.s.mongos.on('joined', relay('joined'));\n    self.s.mongos.on('left', relay('left'));\n    self.s.mongos.on('fullsetup', relay('fullsetup'));\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Set up listeners\n  self.s.mongos.once('timeout', connectErrorHandler('timeout'));\n  self.s.mongos.once('error', connectErrorHandler('error'));\n  self.s.mongos.once('close', connectErrorHandler('close'));\n  self.s.mongos.once('connect', connectHandler);\n  // Reconnect server\n  self.s.mongos.on('reconnect', reconnectHandler);\n\n  // Start connection\n  self.s.mongos.connect(_options);\n}\n\nMongos.prototype.parserType = function() {\n  return this.s.mongos.parserType();\n}\n\ndefine.classMethod('parserType', {callback: false, promise:false, returns: [String]});\n\n// Server capabilities\nMongos.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.mongos.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.mongos.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  this.s.mongos.command(ns, cmd, options, callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  this.s.mongos.insert(ns, ops, options, function(e, m) {\n    callback(e, m)\n  });\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nMongos.prototype.update = function(ns, ops, options, callback) {\n  this.s.mongos.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  this.s.mongos.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// Destroyed\nMongos.prototype.isDestroyed = function() {\n  return this.s.mongos.isDestroyed();\n}\n\n// IsConnected\nMongos.prototype.isConnected = function() {\n  return this.s.mongos.isConnected();\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.mongos.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nMongos.prototype.setBSONParserType = function(type) {\n  return this.s.mongos.setBSONParserType(type);\n}\n\nMongos.prototype.lastIsMaster = function() {\n  return this.s.mongos.lastIsMaster();\n}\n\nMongos.prototype.close = function(forceClosed) {\n  this.s.mongos.destroy();\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nMongos.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.mongos.auth.apply(this.s.mongos, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nMongos.prototype.connections = function() {\n  return this.s.mongos.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * The mongos high availability event\n *\n * @event Mongos#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the mongos set\n *\n * @event Mongos#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos set\n *\n * @event Mongos#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * Mongos fullsetup event, emitted when all proxies in the topology have been connected to.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * Mongos open event, emitted when mongos can start processing commands.\n *\n * @event Mongos#open\n * @type {Mongos}\n */\n\n/**\n * Mongos close event\n *\n * @event Mongos#close\n * @type {object}\n */\n\n/**\n * Mongos error event, emitted if there is an error listener.\n *\n * @event Mongos#error\n * @type {MongoError}\n */\n\n/**\n * Mongos timeout event\n *\n * @event Mongos#timeout\n * @type {object}\n */\n\n/**\n * Mongos parseError event\n *\n * @event Mongos#parseError\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]}