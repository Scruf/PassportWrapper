{"version":3,"sources":["replset.js"],"names":[],"mappings":"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","file":"replset-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , f = require('util').format\n  , Server = require('./server')\n  , Mongos = require('./mongos')\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , ReadPreference = require('./read_preference')\n  , MongoCR = require('mongodb-core').MongoCR\n  , MongoError = require('mongodb-core').MongoError\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , Store = require('./topology_base').Store\n  , Define = require('./metadata')\n  , CServer = require('mongodb-core').Server\n  , CReplSet = require('mongodb-core').ReplSet\n  , CoreReadPreference = require('mongodb-core').ReadPreference\n  , shallowClone = require('./utils').shallowClone\n  , MAX_JS_INT = require('./utils').MAX_JS_INT;\n\n/**\n * @fileOverview The **ReplSet** class is a class that represents a Replicaset topology and is\n * used to construct connections.\n *\n * **ReplSet Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   ReplSet = require('mongodb').ReplSet,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using ReplSet\n * var server = new Server('localhost', 27017);\n * var db = new Db('test', new ReplSet([server]));\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new ReplSet instance\n * @class\n * @deprecated\n * @param {Server[]} servers A seedlist of servers participating in the replicaset.\n * @param {object} [options=null] Optional settings.\n * @param {booelan} [options.ha=true] Turn on high availability monitoring.\n * @param {number} [options.haInterval=10000] Time between each replicaset status check.\n * @param {string} options.replicaSet The name of the replicaset to connect to.\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Sets the range of servers to pick when using NEAREST (lowest ping ms + the latency fence, ex: range of 1 to (1 + 15) ms)\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=10000] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#fullsetup\n * @fires ReplSet#open\n * @fires ReplSet#close\n * @fires ReplSet#error\n * @fires ReplSet#timeout\n * @fires ReplSet#parseError\n * @return {ReplSet} a ReplSet instance.\n */\nvar ReplSet = function(servers, options) {\n  if(!(this instanceof ReplSet)) return new ReplSet(servers, options);\n  options = options || {};\n  var self = this;\n\n  // Ensure all the instances are Server\n  for(var i = 0; i < servers.length; i++) {\n    if(!(servers[i] instanceof Server)) {\n      throw MongoError.create({message: \"all seed list instances must be of the Server type\", driver:true});\n    }\n  }\n\n  // Store option defaults\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: -1\n  }\n\n  // If we have \"unlimited\" set to max Number\n  if(storeOptions.bufferMaxEntries == -1) {\n    storeOptions.bufferMaxEntries = MAX_JS_INT;\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // Debug tag\n  var tag = options.tag;\n\n  // Build seed list\n  var seedlist = servers.map(function(x) {\n    return {host: x.host, port: x.port}\n  });\n\n  // Final options\n  var finalOptions = shallowClone(options);\n\n  // Default values\n  finalOptions.size = typeof options.poolSize == 'number' ? options.poolSize : 5;\n  finalOptions.reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  finalOptions.emitError = typeof options.emitError == 'boolean' ? options.emitError : true;\n  finalOptions.cursorFactory = Cursor;\n\n  // Add the store\n  finalOptions.disconnectHandler = store;\n\n  // Socket options passed down\n  if(options.socketOptions) {\n    if(options.socketOptions.connectTimeoutMS) {\n      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;\n      finalOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;\n    }\n\n    if(options.socketOptions.socketTimeoutMS) {\n      finalOptions.socketTimeout = options.socketOptions.socketTimeoutMS;\n    }\n  }\n\n  // Get the name\n  var replicaSet = options.replicaSet || options.rs_name;\n\n  // Set up options\n  finalOptions.setName = replicaSet;\n\n  // Are we running in debug mode\n  var debug = typeof options.debug == 'boolean' ? options.debug : false;\n  if(debug) {\n    finalOptions.debug = debug;\n  }\n\n  // Map keep alive setting\n  if(options.socketOptions && typeof options.socketOptions.keepAlive == 'number') {\n    finalOptions.keepAlive = true;\n    if(typeof options.socketOptions.keepAlive == 'number') {\n      finalOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;\n    }\n  }\n\n  // Connection timeout\n  if(options.socketOptions && typeof options.socketOptions.connectionTimeout == 'number') {\n    finalOptions.connectionTimeout = options.socketOptions.connectionTimeout;\n  }\n\n  // Socket timeout\n  if(options.socketOptions && typeof options.socketOptions.socketTimeout == 'number') {\n    finalOptions.socketTimeout = options.socketOptions.socketTimeout;\n  }\n\n  // noDelay\n  if(options.socketOptions && typeof options.socketOptions.noDelay == 'boolean') {\n    finalOptions.noDelay = options.socketOptions.noDelay;\n  }\n\n  if(typeof options.secondaryAcceptableLatencyMS == 'number') {\n    finalOptions.acceptableLatency = options.secondaryAcceptableLatencyMS;\n  }\n\n  if(options.connectWithNoPrimary == true) {\n    finalOptions.secondaryOnlyConnectionAllowed = true;\n  }\n\n  // Add the non connection store\n  finalOptions.disconnectHandler = store;\n\n  // Translate the options\n  if(options.sslCA) finalOptions.ca = options.sslCA;\n  if(typeof options.sslValidate == 'boolean') finalOptions.rejectUnauthorized = options.sslValidate;\n  if(options.sslKey) finalOptions.key = options.sslKey;\n  if(options.sslCert) finalOptions.cert = options.sslCert;\n  if(options.sslPass) finalOptions.passphrase = options.sslPass;\n  if(options.checkServerIdentity) finalOptions.checkServerIdentity = options.checkServerIdentity;\n\n  // Create the ReplSet\n  var replset = new CReplSet(seedlist, finalOptions)\n  // Server capabilities\n  var sCapabilities = null;\n\n  // Listen to reconnect event\n  replset.on('reconnect', function() {\n    self.emit('reconnect');\n    store.execute();\n  });\n\n  // Internal state\n  this.s = {\n    // Replicaset\n    replset: replset\n    // Server capabilities\n    , sCapabilities: null\n    // Debug tag\n    , tag: options.tag\n    // Store options\n    , storeOptions: storeOptions\n    // Cloned options\n    , clonedOptions: finalOptions\n    // Store\n    , store: store\n    // Options\n    , options: options\n  }\n\n  // Debug\n  if(debug) {\n    // Last ismaster\n    Object.defineProperty(this, 'replset', {\n      enumerable:true, get: function() { return replset; }\n    });\n  }\n\n  // Last ismaster\n  Object.defineProperty(this, 'isMasterDoc', {\n    enumerable:true, get: function() { return replset.lastIsMaster(); }\n  });\n\n  // BSON property\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      return replset.bson;\n    }\n  });\n\n  Object.defineProperty(this, 'haInterval', {\n    enumerable:true, get: function() { return replset.haInterval; }\n  });\n}\n\n/**\n * @ignore\n */\ninherits(ReplSet, EventEmitter);\n\nvar define = ReplSet.define = new Define('ReplSet', ReplSet, false);\n\n// Ensure the right read Preference object\nvar translateReadPreference = function(options) {\n  if(typeof options.readPreference == 'string') {\n    options.readPreference = new CoreReadPreference(options.readPreference);\n  } else if(options.readPreference instanceof ReadPreference) {\n    options.readPreference = new CoreReadPreference(options.readPreference.mode\n      , options.readPreference.tags);\n  }\n\n  return options;\n}\n\nReplSet.prototype.parserType = function() {\n  return this.s.replset.parserType();\n}\n\ndefine.classMethod('parserType', {callback: false, promise:false, returns: [String]});\n\n// Connect method\nReplSet.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed', 'topologyOpening',\n      'topologyClosed', 'topologyDescriptionChanged'].forEach(function(e) {\n      self.s.replset.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.replset.once('timeout', errorHandler('timeout'));\n    self.s.replset.once('error', errorHandler('error'));\n    self.s.replset.once('close', errorHandler('close'));\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      }\n    }\n\n    // Replset events relay\n    var replsetRelay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server.lastIsMaster(), server);\n      }\n    }\n\n    // Relay ha\n    var relayHa = function(t, state) {\n      self.emit('ha', t, state);\n\n      if(t == 'start') {\n        self.emit('ha_connect', t, state);\n      } else if(t == 'end') {\n        self.emit('ha_ismaster', t, state);\n      }\n    }\n\n    // Set up serverConfig listeners\n    self.s.replset.on('joined', replsetRelay('joined'));\n    self.s.replset.on('left', relay('left'));\n    self.s.replset.on('ping', relay('ping'));\n    self.s.replset.on('ha', relayHa);\n\n    // Set up SDAM listeners\n    self.s.replset.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.replset.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.replset.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.replset.on('serverHearbeatFailed', relay('serverHearbeatFailed'));\n    self.s.replset.on('serverOpening', relay('serverOpening'));\n    self.s.replset.on('serverClosed', relay('serverClosed'));\n    self.s.replset.on('topologyOpening', relay('topologyOpening'));\n    self.s.replset.on('topologyClosed', relay('topologyClosed'));\n    self.s.replset.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    self.s.replset.on('fullsetup', function(topology) {\n      self.emit('fullsetup', null, self);\n    });\n\n    self.s.replset.on('all', function(topology) {\n      self.emit('all', null, self);\n    });\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Error handler\n  var connectErrorHandler = function(event) {\n    return function(err) {\n      ['timeout', 'error', 'close'].forEach(function(e) {\n        self.s.replset.removeListener(e, connectErrorHandler);\n      });\n\n      self.s.replset.removeListener('connect', connectErrorHandler);\n      // Destroy the replset\n      self.s.replset.destroy();\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        if(!self.s.replset.isConnected())\n          process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Set up listeners\n  self.s.replset.once('timeout', connectErrorHandler('timeout'));\n  self.s.replset.once('error', connectErrorHandler('error'));\n  self.s.replset.once('close', connectErrorHandler('close'));\n  self.s.replset.once('connect', connectHandler);\n\n  // Start connection\n  self.s.replset.connect(_options);\n}\n\n// Server capabilities\nReplSet.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.replset.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.replset.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  options = translateReadPreference(options);\n  this.s.replset.command(ns, cmd, options, callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  this.s.replset.insert(ns, ops, options, callback);\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  this.s.replset.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  this.s.replset.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// Destroyed\nReplSet.prototype.isDestroyed = function() {\n  return this.s.replset.isDestroyed();\n}\n\n// IsConnected\nReplSet.prototype.isConnected = function() {\n  return this.s.replset.isConnected();\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\nReplSet.prototype.setBSONParserType = function(type) {\n  return this.s.replset.setBSONParserType(type);\n}\n\n// Insert\nReplSet.prototype.cursor = function(ns, cmd, options) {\n  options = translateReadPreference(options);\n  options.disconnectHandler = this.s.store;\n  return this.s.replset.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nReplSet.prototype.lastIsMaster = function() {\n  return this.s.replset.lastIsMaster();\n}\n\nReplSet.prototype.close = function(forceClosed) {\n  var self = this;\n  this.s.replset.destroy();\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n\n  var events = ['timeout', 'error', 'close', 'joined', 'left'];\n  events.forEach(function(e) {\n    self.removeAllListeners(e);\n  });\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nReplSet.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.replset.auth.apply(this.s.replset, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nReplSet.prototype.connections = function() {\n  return this.s.replset.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * The replset high availability event\n *\n * @event ReplSet#ha\n * @type {function}\n * @param {string} type The stage in the high availability event (start|end)\n * @param {boolean} data.norepeat This is a repeating high availability process or a single execution only\n * @param {number} data.id The id for this high availability request\n * @param {object} data.state An object containing the information about the current replicaset\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * ReplSet open event, emitted when replicaset can start processing commands.\n *\n * @event ReplSet#open\n * @type {Replset}\n */\n\n/**\n * ReplSet fullsetup event, emitted when all servers in the topology have been connected to.\n *\n * @event ReplSet#fullsetup\n * @type {Replset}\n */\n\n/**\n * ReplSet close event\n *\n * @event ReplSet#close\n * @type {object}\n */\n\n/**\n * ReplSet error event, emitted if there is an error listener.\n *\n * @event ReplSet#error\n * @type {MongoError}\n */\n\n/**\n * ReplSet timeout event\n *\n * @event ReplSet#timeout\n * @type {object}\n */\n\n/**\n * ReplSet parseError event\n *\n * @event ReplSet#parseError\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n"]}