{"version":3,"sources":["chunk.js"],"names":[],"mappings":"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","file":"chunk-compiled.js","sourcesContent":["\"use strict\";\n\nvar Binary = require('mongodb-core').BSON.Binary,\n  ObjectID = require('mongodb-core').BSON.ObjectID;\n\n/**\n * Class for representing a single chunk in GridFS.\n *\n * @class\n *\n * @param file {GridStore} The {@link GridStore} object holding this chunk.\n * @param mongoObject {object} The mongo object representation of this chunk.\n *\n * @throws Error when the type of data field for {@link mongoObject} is not\n *     supported. Currently supported types for data field are instances of\n *     {@link String}, {@link Array}, {@link Binary} and {@link Binary}\n *     from the bson module\n *\n * @see Chunk#buildMongoObject\n */\nvar Chunk = function(file, mongoObject, writeConcern) {\n  if(!(this instanceof Chunk)) return new Chunk(file, mongoObject);\n\n  this.file = file;\n  var self = this;\n  var mongoObjectFinal = mongoObject == null ? {} : mongoObject;\n  this.writeConcern = writeConcern || {w:1};\n  this.objectId = mongoObjectFinal._id == null ? new ObjectID() : mongoObjectFinal._id;\n  this.chunkNumber = mongoObjectFinal.n == null ? 0 : mongoObjectFinal.n;\n  this.data = new Binary();\n\n  if(mongoObjectFinal.data == null) {\n  } else if(typeof mongoObjectFinal.data == \"string\") {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    buffer.write(mongoObjectFinal.data, 0, mongoObjectFinal.data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if(Array.isArray(mongoObjectFinal.data)) {\n    var buffer = new Buffer(mongoObjectFinal.data.length);\n    var data = mongoObjectFinal.data.join('');\n    buffer.write(data, 0, data.length, 'binary');\n    this.data = new Binary(buffer);\n  } else if(mongoObjectFinal.data._bsontype === 'Binary') {\n    this.data = mongoObjectFinal.data;\n  } else if(Buffer.isBuffer(mongoObjectFinal.data)) {\n  } else {\n    throw Error(\"Illegal chunk format\");\n  }\n\n  // Update position\n  this.internalPosition = 0;\n};\n\n/**\n * Writes a data to this object and advance the read/write head.\n *\n * @param data {string} the data to write\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.write = function(data, callback) {\n  this.data.write(data, this.internalPosition, data.length, 'binary');\n  this.internalPosition = this.data.length();\n  if(callback != null) return callback(null, this);\n  return this;\n};\n\n/**\n * Reads data and advances the read/write head.\n *\n * @param length {number} The length of data to read.\n *\n * @return {string} The data read if the given length will not exceed the end of\n *     the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.read = function(length) {\n  // Default to full read if no index defined\n  length = length == null || length == 0 ? this.length() : length;\n\n  if(this.length() - this.internalPosition + 1 >= length) {\n    var data = this.data.read(this.internalPosition, length);\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return '';\n  }\n};\n\nChunk.prototype.readSlice = function(length) {\n  if ((this.length() - this.internalPosition) >= length) {\n    var data = null;\n    if (this.data.buffer != null) { //Pure BSON\n      data = this.data.buffer.slice(this.internalPosition, this.internalPosition + length);\n    } else { //Native BSON\n      data = new Buffer(length);\n      length = this.data.readInto(data, this.internalPosition);\n    }\n    this.internalPosition = this.internalPosition + length;\n    return data;\n  } else {\n    return null;\n  }\n};\n\n/**\n * Checks if the read/write head is at the end.\n *\n * @return {boolean} Whether the read/write head has reached the end of this\n *     chunk.\n */\nChunk.prototype.eof = function() {\n  return this.internalPosition == this.length() ? true : false;\n};\n\n/**\n * Reads one character from the data of this chunk and advances the read/write\n * head.\n *\n * @return {string} a single character data read if the the read/write head is\n *     not at the end of the chunk. Returns an empty String otherwise.\n */\nChunk.prototype.getc = function() {\n  return this.read(1);\n};\n\n/**\n * Clears the contents of the data in this chunk and resets the read/write head\n * to the initial position.\n */\nChunk.prototype.rewind = function() {\n  this.internalPosition = 0;\n  this.data = new Binary();\n};\n\n/**\n * Saves this chunk to the database. Also overwrites existing entries having the\n * same id as this chunk.\n *\n * @param callback {function(*, GridStore)} This will be called after executing\n *     this method. The first parameter will contain null and the second one\n *     will contain a reference to this object.\n */\nChunk.prototype.save = function(options, callback) {\n  var self = this;\n  if(typeof options == 'function') {\n    callback = options;\n    options = {};\n  }\n\n  self.file.chunkCollection(function(err, collection) {\n    if(err) return callback(err);\n\n    // Merge the options\n    var writeOptions = { upsert: true };\n    for(var name in options) writeOptions[name] = options[name];\n    for(var name in self.writeConcern) writeOptions[name] = self.writeConcern[name];\n\n    if(self.data.length() > 0) {\n      self.buildMongoObject(function(mongoObject) {\n        var options = {forceServerObjectId:true};\n        for(var name in self.writeConcern) {\n          options[name] = self.writeConcern[name];\n        }\n\n        collection.replaceOne({'_id':self.objectId}, mongoObject, writeOptions, function(err, collection) {\n          callback(err, self);\n        });\n      });\n    } else {\n      callback(null, self);\n    }\n    // });\n  });\n};\n\n/**\n * Creates a mongoDB object representation of this chunk.\n *\n * @param callback {function(Object)} This will be called after executing this\n *     method. The object will be passed to the first parameter and will have\n *     the structure:\n *\n *        <pre><code>\n *        {\n *          '_id' : , // {number} id for this chunk\n *          'files_id' : , // {number} foreign key to the file collection\n *          'n' : , // {number} chunk number\n *          'data' : , // {bson#Binary} the chunk data itself\n *        }\n *        </code></pre>\n *\n * @see <a href=\"http://www.mongodb.org/display/DOCS/GridFS+Specification#GridFSSpecification-{{chunks}}\">MongoDB GridFS Chunk Object Structure</a>\n */\nChunk.prototype.buildMongoObject = function(callback) {\n  var mongoObject = {\n    'files_id': this.file.fileId,\n    'n': this.chunkNumber,\n    'data': this.data};\n  // If we are saving using a specific ObjectId\n  if(this.objectId != null) mongoObject._id = this.objectId;\n\n  callback(mongoObject);\n};\n\n/**\n * @return {number} the length of the data\n */\nChunk.prototype.length = function() {\n  return this.data.length();\n};\n\n/**\n * The position of the read/write head\n * @name position\n * @lends Chunk#\n * @field\n */\nObject.defineProperty(Chunk.prototype, \"position\", { enumerable: true\n  , get: function () {\n      return this.internalPosition;\n    }\n  , set: function(value) {\n      this.internalPosition = value;\n    }\n});\n\n/**\n * The default chunk size\n * @constant\n */\nChunk.DEFAULT_CHUNK_SIZE = 1024 * 255;\n\nmodule.exports = Chunk;\n"]}