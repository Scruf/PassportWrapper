{"version":3,"sources":["mongo_client.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,cAAR,CAAR;IACA,SAAS,QAAQ,UAAR,CAAT;IACA,SAAS,QAAQ,UAAR,CAAT;IACA,UAAU,QAAQ,WAAR,CAAV;IACA,SAAS,QAAQ,YAAR,CAAT;IACA,iBAAiB,QAAQ,mBAAR,CAAjB;IACA,KAAK,QAAQ,MAAR,CAAL;;;;;;;;;;;;;;;;;;;;;;AAsBJ,SAAS,WAAT,GAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BrB,OAAK,OAAL,GAAe,YAAY,OAAZ,CA3BM;CAAvB;;AA8BA,IAAI,SAAS,YAAY,MAAZ,GAAqB,IAAI,MAAJ,CAAW,aAAX,EAA0B,WAA1B,EAAuC,KAAvC,CAArB;;;;;;;;;;;;;;;;;;;;;;AAsBb,YAAY,OAAZ,GAAsB,UAAS,GAAT,EAAc,OAAd,EAAuB,QAAvB,EAAiC;AACrD,MAAI,OAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAP,CADiD;AAErD,aAAW,OAAO,KAAK,KAAK,MAAL,GAAc,CAAd,CAAZ,IAAgC,UAAhC,GAA6C,KAAK,GAAL,EAA7C,GAA0D,IAA1D,CAF0C;AAGrD,YAAU,KAAK,MAAL,GAAc,KAAK,KAAL,EAAd,GAA6B,IAA7B,CAH2C;AAIrD,YAAU,WAAW,EAAX;;;AAJ2C,MAOjD,iBAAiB,QAAQ,cAAR;;;AAPgC,MAUlD,CAAC,cAAD,EAAiB;AAClB,qBAAiB,OAAO,OAAO,OAAP,IAAkB,UAAzB,GACf,OAAO,OAAP,GAAiB,QAAQ,aAAR,EAAuB,OAAvB,CAFD;GAApB;;;AAVqD,MAgBlD,OAAO,QAAP,IAAmB,UAAnB,EAA+B;AAChC,WAAO,IAAI,cAAJ,CAAmB,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AAClD,cAAQ,GAAR,EAAa,OAAb,EAAsB,UAAS,GAAT,EAAc,EAAd,EAAkB;AACtC,YAAG,GAAH,EAAQ,OAAO,OAAO,GAAP,CAAP,CAAR;AACA,gBAAQ,EAAR,EAFsC;OAAlB,CAAtB,CADkD;KAA1B,CAA1B,CADgC;GAAlC;;;AAhBqD,SA0BrD,CAAQ,GAAR,EAAa,OAAb,EAAsB,QAAtB,EA1BqD;CAAjC;;AA6BtB,OAAO,YAAP,CAAoB,SAApB,EAA+B,EAAC,UAAU,IAAV,EAAgB,SAAQ,IAAR,EAAhD;;AAEA,IAAI,gBAAgB,CAAC,UAAD,EAAa,KAAb,EAAoB,aAApB,EAAmC,qBAAnC,EAClB,OADkB,EACT,SADS,EACE,QADF,EACY,SADZ,EACuB,eADvB,EACwC,SADxC,EAElB,WAFkB,EAEL,qBAFK,EAEkB,iBAFlB,EAEqC,gBAFrC,EAGlB,mBAHkB,CAAhB;;AAKJ,IAAI,iBAAiB,CAAC,IAAD,EAAO,YAAP,EAAqB,YAArB,EAAmC,8BAAnC,EACnB,sBADmB,EACK,UADL,EACiB,KADjB,EACwB,qBADxB,EAC+C,aAD/C,EAEnB,OAFmB,EAEV,SAFU,EAEC,QAFD,EAEW,SAFX,EAEsB,SAFtB,EAEiC,WAFjC,EAE8C,kBAF9C,EAGnB,iBAHmB,CAAjB;;AAKJ,IAAI,gBAAgB,CAAC,IAAD,EAAO,YAAP,EAAqB,UAArB,EAAiC,KAAjC,EAAwC,qBAAxC,EAA+D,aAA/D,EAClB,OADkB,EACT,SADS,EACE,QADF,EACY,SADZ,EACuB,SADvB,EACkC,WADlC,EAC+C,kBAD/C,EAElB,iBAFkB,EAEC,qBAFD,CAAhB;;AAIJ,IAAI,YAAY,CAAC,YAAD,EAAe,GAAf,EAAoB,UAApB,EAAgC,GAAhC,EAAqC,eAArC,EAAsD,qBAAtD,EACd,oBADc,EACQ,iBADR,EAC2B,KAD3B,EACkC,cADlC,EACkD,kBADlD,EACsE,gBADtE,EAEd,WAFc,EAED,gBAFC,EAEiB,aAFjB,CAAZ;;;;;AAOJ,IAAI,gBAAgB,UAAS,MAAT,EAAiB,OAAjB,EAA0B;AAC5C,MAAG,CAAC,OAAO,cAAP,EAAuB,OAAO,cAAP,GAAwB,EAAxB,CAA3B;AACA,MAAG,CAAC,OAAO,UAAP,EAAmB,OAAO,UAAP,GAAoB,EAApB,CAAvB;AACA,MAAG,CAAC,OAAO,UAAP,EAAmB,OAAO,UAAP,GAAoB,EAApB,CAAvB;AACA,MAAG,CAAC,OAAO,cAAP,EAAuB,OAAO,cAAP,GAAwB,EAAxB,CAA3B;;AAEA,OAAI,IAAI,IAAJ,IAAY,OAAhB,EAAyB;AACvB,QAAG,cAAc,OAAd,CAAsB,IAAtB,KAA+B,CAAC,CAAD,EAAI;AACpC,aAAO,cAAP,CAAsB,IAAtB,IAA8B,QAAQ,IAAR,CAA9B,CADoC;KAAtC;;AAIA,QAAG,eAAe,OAAf,CAAuB,IAAvB,KAAgC,CAAC,CAAD,EAAI;AACrC,aAAO,UAAP,CAAkB,IAAlB,IAA0B,QAAQ,IAAR,CAA1B,CADqC;KAAvC;;AAIA,QAAG,cAAc,OAAd,CAAsB,IAAtB,KAA+B,CAAC,CAAD,EAAI;AACpC,aAAO,cAAP,CAAsB,IAAtB,IAA8B,QAAQ,IAAR,CAA9B,CADoC;KAAtC;;AAIA,QAAG,UAAU,OAAV,CAAkB,IAAlB,KAA2B,CAAC,CAAD,EAAI;AAChC,aAAO,UAAP,CAAkB,IAAlB,IAA0B,QAAQ,IAAR,CAA1B,CADgC;KAAlC;GAbF;;AAkBA,SAAO,MAAP,CAxB4C;CAA1B;;;;;AA8BpB,IAAI,UAAU,UAAS,GAAT,EAAc,OAAd,EAAuB,QAAvB,EAAiC;AAC7C,MAAI,gBAAgB,QAAQ,MAAR,IAAkB,EAAlB,CADyB;AAE7C,MAAI,gBAAgB,QAAQ,MAAR,IAAkB,EAAlB,CAFyB;AAG7C,MAAI,wBAAwB,QAAQ,OAAR,IAAmB,QAAQ,cAAR,IAA0B,EAA7C,CAHiB;AAI7C,MAAI,YAAY,QAAQ,EAAR,IAAc,EAAd;;;AAJ6B,MAO1C,YAAY,IAAZ,EACD,MAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN,CADF;;;AAP6C,MAWzC,SAAS,MAAM,GAAN,EAAW,OAAX,CAAT;;;AAXyC,MAc1C,SAAH,EAAc;AACZ,SAAI,IAAI,IAAJ,IAAY,SAAhB,EAA2B,OAAO,UAAP,CAAkB,IAAlB,IAA0B,UAAU,IAAV,CAA1B,CAA3B;GADF;;;AAd6C,QAmB7C,CAAO,UAAP,CAAkB,GAAlB,GAAwB,GAAxB;;;AAnB6C,MAsB1C,aAAH,EAAkB;AAChB,SAAI,IAAI,IAAJ,IAAY,aAAhB,EAA+B,OAAO,cAAP,CAAsB,IAAtB,IAA8B,cAAc,IAAd,CAA9B,CAA/B;GADF;;;AAtB6C,MA2B1C,qBAAH,EAA0B;AACxB,SAAI,IAAI,IAAJ,IAAY,qBAAhB,EAAuC,OAAO,UAAP,CAAkB,IAAlB,IAA0B,sBAAsB,IAAtB,CAA1B,CAAvC;GADF;;AAIA,MAAG,sBAAsB,GAAtB,IACE,sBAAsB,WAAtB,IACA,sBAAsB,mBAAtB,IACA,sBAAsB,KAAtB,IACA,sBAAsB,OAAtB,IACA,sBAAsB,MAAtB,IACA,sBAAsB,OAAtB,EAA+B;AAClC,WAAO,cAAP,CAAsB,GAAtB,GAA4B,sBAAsB,GAAtB,CADM;AAElC,WAAO,cAAP,CAAsB,WAAtB,GAAoC,sBAAsB,WAAtB,CAFF;AAGlC,WAAO,cAAP,CAAsB,mBAAtB,GAA4C,sBAAsB,mBAAtB,CAHV;AAIlC,WAAO,cAAP,CAAsB,KAAtB,GAA8B,sBAAsB,KAAtB,CAJI;AAKlC,WAAO,cAAP,CAAsB,OAAtB,GAAgC,sBAAsB,OAAtB,CALE;AAMlC,WAAO,cAAP,CAAsB,MAAtB,GAA+B,sBAAsB,MAAtB,CANG;AAOlC,WAAO,cAAP,CAAsB,OAAtB,GAAgC,sBAAsB,OAAtB,CAPE;GANpC;;;AA/B6C,MAgD1C,aAAH,EAAkB;AAChB,SAAI,IAAI,IAAJ,IAAY,aAAhB,EAA+B,OAAO,cAAP,CAAsB,IAAtB,IAA8B,cAAc,IAAd,CAA9B,CAA/B;GADF;;AAIA,MAAG,OAAO,OAAO,cAAP,CAAsB,QAAtB,IAAkC,QAAzC,EAAmD;AACpD,QAAG,CAAC,OAAO,cAAP,CAAsB,QAAtB,EAAgC,OAAO,cAAP,CAAsB,QAAtB,GAAiC,OAAO,cAAP,CAAsB,QAAtB,CAArE;AACA,QAAG,CAAC,OAAO,UAAP,CAAkB,QAAlB,EAA4B,OAAO,UAAP,CAAkB,QAAlB,GAA6B,OAAO,cAAP,CAAsB,QAAtB,CAA7D;GAFF;;AAKA,MAAG,cAAc,GAAd,IACE,cAAc,WAAd,IACA,cAAc,mBAAd,IACA,cAAc,KAAd,IACA,cAAc,OAAd,IACA,cAAc,MAAd,IACA,cAAc,OAAd,EAAuB;AAC1B,WAAO,cAAP,CAAsB,GAAtB,GAA4B,cAAc,GAAd,CADF;AAE1B,WAAO,cAAP,CAAsB,WAAtB,GAAoC,cAAc,WAAd,CAFV;AAG1B,WAAO,cAAP,CAAsB,mBAAtB,GAA4C,cAAc,mBAAd,CAHlB;AAI1B,WAAO,cAAP,CAAsB,KAAtB,GAA8B,cAAc,KAAd,CAJJ;AAK1B,WAAO,cAAP,CAAsB,OAAtB,GAAgC,cAAc,OAAd,CALN;AAM1B,WAAO,cAAP,CAAsB,MAAtB,GAA+B,cAAc,MAAd,CANL;AAO1B,WAAO,cAAP,CAAsB,OAAtB,GAAgC,cAAc,OAAd,CAPN;GAN5B;;;AAzD6C,QA0E7C,CAAO,UAAP,CAAkB,cAAlB,GAAmC,QAAQ,cAAR;;;;AA1EU,MA8EzC,uBAAuB,OAAO,OAAP,CAAe,MAAf,CA9EkB;AA+E7C,MAAI,6BAA6B,CAA7B,CA/EyC;AAgF7C,MAAI,6BAA6B,CAA7B,CAhFyC;AAiF7C,MAAI,eAAe,IAAf,CAjFyC;AAkF7C,MAAI,eAAe,EAAf;;;AAlFyC,MAqF1C,OAAO,OAAP,CAAe,MAAf,IAAyB,CAAzB,EAA4B,MAAM,IAAI,KAAJ,CAAU,uDAAV,CAAN,CAA/B;;;AArF6C,QAwF7C,CAAO,UAAP,CAAkB,aAAlB,GAAkC,iBAAiB,OAAO,UAAP,CAAnD;;AAxF6C,MA0F1C,OAAO,OAAO,cAAP,CAAsB,cAAtB,IAAwC,SAA/C,EAA0D;AAC3D,WAAO,cAAP,CAAsB,cAAtB,GAAuC,IAAvC,CAD2D;GAA7D;;;AA1F6C,QA+F7C,GAAS,cAAc,MAAd,EAAsB,OAAtB,CAAT;;;;;AA/F6C,OAoGzC,IAAI,IAAI,CAAJ,EAAO,IAAI,OAAO,OAAP,CAAe,MAAf,EAAuB,GAA1C,EAA+C;;AAE7C,QAAI,wBAAwB,OAAO,cAAP,CAAsB,aAAtB,IAAuC,EAAvC,CAFiB;;AAI7C,QAAI,kBAAkB;AAClB,gBAAS,CAAT;AACA,qBAAe;AACb,0BAAkB,sBAAsB,gBAAtB,IAA2C,OAAO,GAAP;AAC7D,yBAAkB,sBAAsB,eAAtB,IAA0C,OAAO,GAAP;OAF9D;AAIA,sBAAe,KAAf,EANA;;;AAJyC,QAa1C,OAAO,cAAP,CAAsB,GAAtB,EAA2B;AAC5B,sBAAgB,GAAhB,GAAsB,OAAO,cAAP,CAAsB,GAAtB,CADM;AAE5B,sBAAgB,WAAhB,GAA8B,OAAO,cAAP,CAAsB,WAAtB,CAFF;AAG5B,sBAAgB,mBAAhB,GAAsC,OAAO,cAAP,CAAsB,mBAAtB,CAHV;AAI5B,sBAAgB,KAAhB,GAAwB,OAAO,cAAP,CAAsB,KAAtB,CAJI;AAK5B,sBAAgB,OAAhB,GAA0B,OAAO,cAAP,CAAsB,OAAtB,CALE;AAM5B,sBAAgB,MAAhB,GAAyB,OAAO,cAAP,CAAsB,MAAtB,CANG;AAO5B,sBAAgB,OAAhB,GAA0B,OAAO,cAAP,CAAsB,OAAtB,CAPE;KAA9B,MAQO,IAAG,OAAO,UAAP,CAAkB,GAAlB,EAAuB;AAC/B,sBAAgB,GAAhB,GAAsB,OAAO,UAAP,CAAkB,GAAlB,CADS;AAE/B,sBAAgB,WAAhB,GAA8B,OAAO,UAAP,CAAkB,WAAlB,CAFC;AAG/B,sBAAgB,mBAAhB,GAAsC,OAAO,UAAP,CAAkB,mBAAlB,CAHP;AAI/B,sBAAgB,KAAhB,GAAwB,OAAO,UAAP,CAAkB,KAAlB,CAJO;AAK/B,sBAAgB,OAAhB,GAA0B,OAAO,UAAP,CAAkB,OAAlB,CALK;AAM/B,sBAAgB,MAAhB,GAAyB,OAAO,UAAP,CAAkB,MAAlB,CANM;AAO/B,sBAAgB,OAAhB,GAA0B,OAAO,UAAP,CAAkB,OAAlB,CAPK;KAA1B;;;AArBsC,QAgCzC,QAAQ,IAAR;;AAhCyC,QAkCzC,UAAU,OAAO,OAAP,CAAe,CAAf,EAAkB,aAAlB,GACR,IAAI,MAAJ,CAAW,OAAO,OAAP,CAAe,CAAf,EAAkB,aAAlB,EAAiC,eAA5C,CADQ,GAER,IAAI,MAAJ,CAAW,OAAO,OAAP,CAAe,CAAf,EAAkB,IAAlB,EAAwB,OAAO,OAAP,CAAe,CAAf,EAAkB,IAAlB,EAAwB,eAA3D,CAFQ,CAlC+B;;AAsC7C,QAAI,kBAAkB,UAAS,QAAT,EAAmB;;AAEvC,UAAI,EAAJ,CAAO,OAAO,MAAP,EAAe,QAAtB,EAAgC,EAAC,GAAE,CAAF,EAAK,eAAc,KAAd,EAAqB,gBAAe,QAAQ,cAAR,EAA1E,EAAmG,IAAnG,CAAwG,UAAS,GAAT,EAAc,EAAd,EAAkB;;AAExH,+BAAuB,uBAAuB,CAAvB;;;AAFiG,YAKrH,CAAC,GAAD,EAAM;;AAEP,aAAG,KAAH;;AAFO,cAIH,cAAc,GAAG,YAAH,CAAgB,WAAhB;;;AAJX,cAOJ,YAAY,OAAZ,EAAqB;AACtB,yCADsB;WAAxB;;AAIA,cAAG,YAAY,GAAZ,IAAmB,YAAY,GAAZ,IAAmB,UAAnB,EAA+B,6BAArD;SAXF,MAYO;AACL,kBAAQ,GAAR,CADK;AAEL,uBAAa,SAAS,IAAT,GAAgB,GAAhB,GAAsB,SAAS,IAAT,CAAnC,GAAoD,QAApD,CAFK;SAZP;;AAiBA,YAAG,wBAAwB,CAAxB,EAA2B;;AAE5B,cAAG,8BAA8B,CAA9B,IAAmC,8BAA8B,CAA9B,IAAmC,KAAtE,EAA6E;AAC9E,mBAAO,SAAS,KAAT,EAAgB,IAAhB,CAAP,CAD8E;WAAhF;;;AAF4B,cAOzB,6BAA6B,CAA7B,IAAkC,6BAA6B,CAA7B,EAAgC;AACnE,gBAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,mBAAO,QAAQ,QAAR,CAAiB,YAAW;AACjC,kBAAI;AACF,yBAAS,IAAI,KAAJ,CAAU,4DAAV,CAAT,EADE;eAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,sBAAM,GAAN,CADY;eAAZ;aAHoB,CAAxB,CAFmE;WAArE;;AAWA,cAAG,8BAA8B,CAA9B,IACE,8BAA8B,CAA9B,IACA,OAAO,OAAP,CAAe,MAAf,IAAyB,CAAzB,KACC,CAAC,OAAO,UAAP,CAAkB,UAAlB,IAAgC,CAAC,OAAO,UAAP,CAAkB,OAAlB,CAHrC,EAGiE;;AAElE,gBAAI,MAAM,OAAO,OAAP,CAAe,CAAf,CAAN,CAF8D;AAGlE,2BAAe,IAAI,aAAJ,GACX,IAAI,MAAJ,CAAW,IAAI,aAAJ,EAAmB,OAAO,cAAP,CADnB,GAEX,IAAI,MAAJ,CAAW,IAAI,IAAJ,EAAU,IAAI,IAAJ,EAAU,OAAO,cAAP,CAFpB,CAHmD;WAHpE,MAUO,IAAG,6BAA6B,CAA7B,IACL,6BAA6B,CAA7B,IACA,OAAO,UAAP,CAAkB,UAAlB,IAAgC,OAAO,UAAP,CAAkB,OAAlB,EAA2B;;AAE9D,gBAAI,eAAe,OAAO,OAAP,CAChB,MADgB,CACT,UAAS,SAAT,EAAoB;AAC1B,qBAAO,aAAa,UAAU,IAAV,GAAiB,GAAjB,GAAuB,UAAU,IAAV,CAApC,IAAuD,IAAvD,CADmB;aAApB,CADS,CAIhB,GAJgB,CAIZ,UAAS,SAAT,EAAoB;AACvB,qBAAO,UAAU,aAAV,GACL,IAAI,MAAJ,CAAW,UAAU,aAAV,EAAyB,KAApC,EAA2C,OAAO,cAAP,CADtC,GAEL,IAAI,MAAJ,CAAW,UAAU,IAAV,EAAgB,UAAU,IAAV,EAAgB,OAAO,cAAP,CAFtC,CADgB;aAApB,CAJH;;;AAF0D,wBAa9D,GAAe,EAAf;;;AAb8D,gBAgB3D,6BAA6B,CAA7B,EAAgC;AACjC,kBAAI;;;;AAIF,oBAAG,8BAA8B,CAA9B,IACG,CAAC,OAAO,UAAP,CAAkB,UAAlB,IAAgC,CAAC,OAAO,UAAP,CAAkB,OAAlB,EAA4B;AAClE,iCAAe,aAAa,CAAb,CAAf,CADkE;iBADpE,MAGO,IAAG,8BAA8B,CAA9B,EAAiC;AACzC,yBAAO,UAAP,CAAkB,UAAlB,GAA+B,OAAO,UAAP,CAAkB,UAAlB,IAAgC,OAAO,UAAP,CAAkB,OAAlB,CADtB;AAEzC,iCAAe,IAAI,OAAJ,CAAY,YAAZ,EAA0B,OAAO,UAAP,CAAzC,CAFyC;iBAApC,MAGA;AACL,iCAAe,IAAI,OAAJ,CAAY,YAAZ,EAA0B,OAAO,UAAP,CAAzC,CADK;iBAHA;eAPT,CAcE,OAAM,GAAN,EAAW;AACX,uBAAO,SAAS,GAAT,EAAc,IAAd,CAAP,CADW;eAAX;aAfJ,MAkBO;AACL,6BAAe,IAAI,MAAJ,CAAW,YAAX,EAAyB,OAAO,cAAP,CAAxC,CADK;aAlBP;WAlBK;;AAyCP,cAAG,gBAAgB,IAAhB,EAAsB;AACvB,mBAAO,QAAQ,QAAR,CAAiB,YAAW;AACjC,kBAAI;AACF,yBAAS,IAAI,KAAJ,CAAU,yDAAV,CAAT,EADE;eAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,oBAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,sBAAM,GAAN,CAFY;eAAZ;aAHoB,CAAxB,CADuB;WAAzB;;;AArE4B,sBAiF5B,CAAa,QAAb,GAAwB,KAAxB;;AAjF4B,2BAmF5B,CAAkB,YAAlB,EAAgC,MAAhC,EAAwC,OAAxC,EAAiD,QAAjD,EAnF4B;SAA9B;OAtBsG,CAAxG,CAFuC;KAAnB;;;AAtCuB,mBAuJ7C,CAAgB,OAAhB,EAvJ6C;GAA/C;CApGY;;AA+Pd,IAAI,mBAAmB,UAAS,UAAT,EAAqB;AAC1C,MAAG,OAAO,WAAW,aAAX,IAA4B,SAAnC,EAA8C,OAAO,WAAW,aAAX,CAAxD;;AAEA,MAAI;AACF,YAAQ,cAAR,EAAwB,IAAxB,CAA6B,UAA7B,CAAwC,IAAxC,CADE;AAEF,WAAO,IAAP,CAFE;GAAJ,CAGE,OAAM,GAAN,EAAW;AACX,WAAO,KAAP,CADW;GAAX;CANmB;;AAWvB,IAAI,oBAAoB,UAAS,YAAT,EAAuB,MAAvB,EAA+B,OAA/B,EAAwC,QAAxC,EAAkD;;AAExE,MAAG,OAAO,OAAO,UAAP,CAAkB,cAAlB,IAAoC,QAA3C,EAAqD;AACtD,WAAO,UAAP,CAAkB,cAAlB,GAAmC,IAAI,cAAJ,CAAmB,OAAO,UAAP,CAAkB,cAAlB,CAAtD,CADsD;GAAxD,MAEO,IAAG,OAAO,OAAO,UAAP,CAAkB,eAAlB,IAAqC,QAA5C,EAAsD;AAC9D,WAAO,UAAP,CAAkB,cAAlB,GAAmC,IAAI,cAAJ,CAAmB,OAAO,UAAP,CAAkB,eAAlB,CAAtD,CAD8D;GAAzD;;;AAJiE,MASrE,OAAO,UAAP,CAAkB,cAAlB,IAAoC,OAAO,UAAP,CAAkB,kBAAlB,EAAsC;AAC3E,WAAO,UAAP,CAAkB,cAAlB,CAAiC,IAAjC,GAAwC,OAAO,UAAP,CAAkB,kBAAlB,CADmC;GAA7E,MAEO,IAAG,OAAO,UAAP,CAAkB,cAAlB,IAAoC,OAAO,UAAP,CAAkB,oBAAlB,EAAwC;AACpF,WAAO,UAAP,CAAkB,cAAlB,CAAiC,IAAjC,GAAwC,OAAO,UAAP,CAAkB,oBAAlB,CAD4C;GAA/E;;;AAXiE,MAgBpE,kBAAkB,OAAO,cAAP,CAAsB,aAAtB,CAAoC,eAApC,IAAuD,CAAvD;;;AAhBkD,MAmBrE,wBAAwB,OAAxB,EAAiC;AAClC,sBAAkB,OAAO,UAAP,CAAkB,aAAlB,CAAgC,eAAhC,IAAmD,eAAnD,CADgB;GAApC;;;AAnBwE,cAwBxE,CAAa,gBAAb,GAAgC,aAAa,gBAAb,IAAiC,KAAjC,CAxBwC;AAyBxE,eAAa,eAAb,GAA+B,aAAa,gBAAb;;;AAzByC,MA4BpE,KAAK,IAAI,EAAJ,CAAO,OAAO,MAAP,EAAe,YAAtB,EAAoC,OAAO,UAAP,CAAzC;;AA5BoE,IA8BxE,CAAG,IAAH,CAAQ,UAAS,GAAT,EAAc,EAAd,EAAiB;;AAEvB,QAAG,GAAH,EAAQ;AACN,aAAO,QAAQ,QAAR,CAAiB,YAAW;AACjC,YAAI;AACF,mBAAS,GAAT,EAAc,IAAd,EADE;SAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,cAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,gBAAM,GAAN,CAFY;SAAZ;OAHoB,CAAxB,CADM;KAAR;;;AAFuB,gBAcvB,CAAa,eAAb,GAA+B,mBAAmB,CAAnB;;;AAdR,QAiBpB,OAAO,IAAP,IAAe,OAAO,IAAP,EAAY;;AAE5B,UAAI,oBAAoB,EAApB,CAFwB;AAG5B,UAAG,OAAO,UAAP,IAAqB,OAAO,UAAP,CAAkB,UAAlB,EAA8B;AACpD,4BAAoB,GAAG,EAAH,CAAM,OAAO,UAAP,CAAkB,UAAlB,CAA1B,CADoD;OAAtD;;;AAH4B,UAQxB,UAAU,EAAV;;AARwB,UAUzB,OAAO,UAAP,CAAkB,aAAlB,EAAiC,QAAQ,aAAR,GAAwB,OAAO,UAAP,CAAkB,aAAlB,CAA5D;AACA,UAAG,OAAO,UAAP,CAAkB,iBAAlB,EAAqC,QAAQ,iBAAR,GAA4B,OAAO,UAAP,CAAkB,iBAAlB,CAApE;AACA,UAAG,OAAO,UAAP,CAAkB,kBAAlB,EAAsC,QAAQ,kBAAR,GAA6B,OAAO,UAAP,CAAkB,kBAAlB,CAAtE;AACA,UAAG,OAAO,UAAP,CAAkB,0BAAlB,EAA8C,QAAQ,0BAAR,GAAqC,OAAO,UAAP,CAAkB,0BAAlB,CAAtF;;;AAb4B,uBAgB5B,CAAkB,YAAlB,CAA+B,OAAO,IAAP,CAAY,IAAZ,EAAkB,OAAO,IAAP,CAAY,QAAZ,EAAsB,OAAvE,EAAgF,UAAS,GAAT,EAAc,OAAd,EAAsB;AACpG,YAAG,OAAH,EAAW;AACT,kBAAQ,QAAR,CAAiB,YAAW;AAC1B,gBAAI;AACF,uBAAS,IAAT,EAAe,EAAf,EADE;aAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,kBAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,oBAAM,GAAN,CAFY;aAAZ;WAHa,CAAjB,CADS;SAAX,MASO;AACL,cAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,kBAAQ,QAAR,CAAiB,YAAW;AAC1B,gBAAI;AACF,uBAAS,MAAM,GAAN,GAAY,IAAI,KAAJ,CAAU,iCAAiC,OAAO,IAAP,CAAY,CAAZ,CAAjC,CAAtB,EAAwE,IAAjF,EADE;aAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,kBAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,oBAAM,GAAN,CAFY;aAAZ;WAHa,CAAjB,CAFK;SATP;OAD8E,CAAhF,CAhB4B;KAA9B,MAsCO;AACL,cAAQ,QAAR,CAAiB,YAAW;AAC1B,YAAI;AACF,mBAAS,GAAT,EAAc,EAAd,EADE;SAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,cAAG,EAAH,EAAO,GAAG,KAAH,GAAP;AACA,gBAAM,GAAN,CAFY;SAAZ;OAHa,CAAjB,CADK;KAtCP;GAjBM,CAAR,CA9BwE;CAAlD;;AAkGxB,OAAO,OAAP,GAAiB,WAAjB","file":"mongo_client-compiled.js","sourcesContent":["\"use strict\";\n\nvar parse = require('./url_parser')\n  , Server = require('./server')\n  , Mongos = require('./mongos')\n  , ReplSet = require('./replset')\n  , Define = require('./metadata')\n  , ReadPreference = require('./read_preference')\n  , Db = require('./db');\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @return {MongoClient} a MongoClient instance.\n */\nfunction MongoClient() {\n  /**\n   * The callback format for results\n   * @callback MongoClient~connectCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {Db} db The connected database.\n   */\n\n  /**\n   * Connect to MongoDB using a url as documented at\n   *\n   *  docs.mongodb.org/manual/reference/connection-string/\n   *\n   * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n   *\n   * @method\n   * @param {string} url The connection URI string\n   * @param {object} [options=null] Optional settings.\n   * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication\n   * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**\n   * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**\n   * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**\n   * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**\n   * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n   * @param {MongoClient~connectCallback} [callback] The command result callback\n   * @return {Promise} returns Promise if no callback passed\n   */\n  this.connect = MongoClient.connect;\n}\n\nvar define = MongoClient.define = new Define('MongoClient', MongoClient, false);\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options=null] Optional settings.\n * @param {boolean} [options.uri_decode_auth=false] Uri decode the user name and password for authentication\n * @param {object} [options.db=null] A hash of options to set on the db object, see **Db constructor**\n * @param {object} [options.server=null] A hash of options to set on the server objects, see **Server** constructor**\n * @param {object} [options.replSet=null] A hash of options to set on the replSet object, see **ReplSet** constructor**\n * @param {object} [options.mongos=null] A hash of options to set on the mongos object, see **Mongos** constructor**\n * @param {object} [options.promiseLibrary=null] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.connect = function(url, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] == 'function' ? args.pop() : null;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Return a promise\n  if(typeof callback != 'function') {\n    return new promiseLibrary(function(resolve, reject) {\n      connect(url, options, function(err, db) {\n        if(err) return reject(err);\n        resolve(db);\n      });\n    });\n  }\n\n  // Fallback to callback based connect\n  connect(url, options, callback);\n}\n\ndefine.staticMethod('connect', {callback: true, promise:true});\n\nvar serverOptions = ['poolSize', 'ssl', 'sslValidate', 'checkServerIdentity',\n  'sslCA', 'sslCert', 'sslKey', 'sslPass', 'autoReconnect', 'noDelay',\n  'keepAlive', 'connectionTimeoutMS', 'socketTimeoutMS', 'reconnectTries',\n  'reconnectInterval'];\n\nvar replsetOptions = ['ha', 'haInterval', 'replicaSet', 'secondaryAcceptableLatencyMS',\n  'connectWithNoPrimary', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate',\n  'sslCA', 'sslCert', 'sslKey', 'sslPass', 'noDelay', 'keepAlive', 'connectTimeoutMS',\n  'socketTimeoutMS'];\n\nvar mongosOptions = ['ha', 'haInterval', 'poolSize', 'ssl', 'checkServerIdentity', 'sslValidate',\n  'sslCA', 'sslCert', 'sslKey', 'sslPass', 'noDelay', 'keepAlive', 'connectTimeoutMS',\n  'socketTimeoutMS', 'acceptableLatencyMS'];\n\nvar dbOptions = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId',\n  'serializeFunctions', 'ignoreUndefined', 'raw', 'promoteLongs', 'bufferMaxEntries', 'readPreference',\n  'pkFactory', 'promiseLibrary', 'readConcern']\n\n/*\n * Merge top level options into final options object\n */\nvar mergeTopLevel = function(object, options) {\n  if(!object.server_options) object.server_options = {};\n  if(!object.db_options) object.db_options = {};\n  if(!object.rs_options) object.rs_options = {};\n  if(!object.mongos_options) object.mongos_options = {};\n\n  for(var name in options) {\n    if(serverOptions.indexOf(name) != -1) {\n      object.server_options[name] = options[name];\n    }\n\n    if(replsetOptions.indexOf(name) != -1) {\n      object.rs_options[name] = options[name];\n    }\n\n    if(mongosOptions.indexOf(name) != -1) {\n      object.mongos_options[name] = options[name];\n    }\n\n    if(dbOptions.indexOf(name) != -1) {\n      object.db_options[name] = options[name];\n    }\n  }\n\n  return object;\n}\n\n/*\n * Connect using MongoClient\n */\nvar connect = function(url, options, callback) {\n  var serverOptions = options.server || {};\n  var mongosOptions = options.mongos || {};\n  var replSetServersOptions = options.replSet || options.replSetServers || {};\n  var dbOptions = options.db || {};\n\n  // If callback is null throw an exception\n  if(callback == null)\n    throw new Error(\"no callback function provided\");\n\n  // Parse the string\n  var object = parse(url, options);\n\n  // Merge in any options for db in options object\n  if(dbOptions) {\n    for(var name in dbOptions) object.db_options[name] = dbOptions[name];\n  }\n\n  // Added the url to the options\n  object.db_options.url = url;\n\n  // Merge in any options for server in options object\n  if(serverOptions) {\n    for(var name in serverOptions) object.server_options[name] = serverOptions[name];\n  }\n\n  // Merge in any replicaset server options\n  if(replSetServersOptions) {\n    for(var name in replSetServersOptions) object.rs_options[name] = replSetServersOptions[name];\n  }\n\n  if(replSetServersOptions.ssl\n    || replSetServersOptions.sslValidate\n    || replSetServersOptions.checkServerIdentity\n    || replSetServersOptions.sslCA\n    || replSetServersOptions.sslCert\n    || replSetServersOptions.sslKey\n    || replSetServersOptions.sslPass) {\n    object.server_options.ssl = replSetServersOptions.ssl;\n    object.server_options.sslValidate = replSetServersOptions.sslValidate;\n    object.server_options.checkServerIdentity = replSetServersOptions.checkServerIdentity;\n    object.server_options.sslCA = replSetServersOptions.sslCA;\n    object.server_options.sslCert = replSetServersOptions.sslCert;\n    object.server_options.sslKey = replSetServersOptions.sslKey;\n    object.server_options.sslPass = replSetServersOptions.sslPass;\n  }\n\n  // Merge in any replicaset server options\n  if(mongosOptions) {\n    for(var name in mongosOptions) object.mongos_options[name] = mongosOptions[name];\n  }\n\n  if(typeof object.server_options.poolSize == 'number') {\n    if(!object.mongos_options.poolSize) object.mongos_options.poolSize = object.server_options.poolSize;\n    if(!object.rs_options.poolSize) object.rs_options.poolSize = object.server_options.poolSize;\n  }\n\n  if(mongosOptions.ssl\n    || mongosOptions.sslValidate\n    || mongosOptions.checkServerIdentity\n    || mongosOptions.sslCA\n    || mongosOptions.sslCert\n    || mongosOptions.sslKey\n    || mongosOptions.sslPass) {\n    object.server_options.ssl = mongosOptions.ssl;\n    object.server_options.sslValidate = mongosOptions.sslValidate;\n    object.server_options.checkServerIdentity = mongosOptions.checkServerIdentity;\n    object.server_options.sslCA = mongosOptions.sslCA;\n    object.server_options.sslCert = mongosOptions.sslCert;\n    object.server_options.sslKey = mongosOptions.sslKey;\n    object.server_options.sslPass = mongosOptions.sslPass;\n  }\n\n  // Set the promise library\n  object.db_options.promiseLibrary = options.promiseLibrary;\n\n  // We need to ensure that the list of servers are only either direct members or mongos\n  // they cannot be a mix of monogs and mongod's\n  var totalNumberOfServers = object.servers.length;\n  var totalNumberOfMongosServers = 0;\n  var totalNumberOfMongodServers = 0;\n  var serverConfig = null;\n  var errorServers = {};\n\n  // Failure modes\n  if(object.servers.length == 0) throw new Error(\"connection string must contain at least one seed host\");\n\n  // If we have no db setting for the native parser try to set the c++ one first\n  object.db_options.native_parser = _setNativeParser(object.db_options);\n  // If no auto_reconnect is set, set it to true as default for single servers\n  if(typeof object.server_options.auto_reconnect != 'boolean') {\n    object.server_options.auto_reconnect = true;\n  }\n\n  // Merge in the top level options if any specified\n  object = mergeTopLevel(object, options);\n\n  // If we have more than a server, it could be replicaset or mongos list\n  // need to verify that it's one or the other and fail if it's a mix\n  // Connect to all servers and run ismaster\n  for(var i = 0; i < object.servers.length; i++) {\n    // Set up socket options\n    var providedSocketOptions = object.server_options.socketOptions || {};\n\n    var _server_options = {\n        poolSize:1\n      , socketOptions: {\n          connectTimeoutMS: providedSocketOptions.connectTimeoutMS || (1000 * 120)\n        , socketTimeoutMS:  providedSocketOptions.socketTimeoutMS || (1000 * 120)\n      }\n      , auto_reconnect:false};\n\n    // Ensure we have ssl setup for the servers\n    if(object.server_options.ssl) {\n      _server_options.ssl = object.server_options.ssl;\n      _server_options.sslValidate = object.server_options.sslValidate;\n      _server_options.checkServerIdentity = object.server_options.checkServerIdentity;\n      _server_options.sslCA = object.server_options.sslCA;\n      _server_options.sslCert = object.server_options.sslCert;\n      _server_options.sslKey = object.server_options.sslKey;\n      _server_options.sslPass = object.server_options.sslPass;\n    } else if(object.rs_options.ssl) {\n      _server_options.ssl = object.rs_options.ssl;\n      _server_options.sslValidate = object.rs_options.sslValidate;\n      _server_options.checkServerIdentity = object.rs_options.checkServerIdentity;\n      _server_options.sslCA = object.rs_options.sslCA;\n      _server_options.sslCert = object.rs_options.sslCert;\n      _server_options.sslKey = object.rs_options.sslKey;\n      _server_options.sslPass = object.rs_options.sslPass;\n    }\n\n    // Error\n    var error = null;\n    // Set up the Server object\n    var _server = object.servers[i].domain_socket\n        ? new Server(object.servers[i].domain_socket, _server_options)\n        : new Server(object.servers[i].host, object.servers[i].port, _server_options);\n\n    var connectFunction = function(__server) {\n      // Attempt connect\n      new Db(object.dbName, __server, {w:1, native_parser:false, promiseLibrary:options.promiseLibrary}).open(function(err, db) {\n        // Update number of servers\n        totalNumberOfServers = totalNumberOfServers - 1;\n\n        // If no error do the correct checks\n        if(!err) {\n          // Close the connection\n          db.close();\n          // Get the last ismaster document\n          var isMasterDoc = db.serverConfig.isMasterDoc;\n\n          // Check what type of server we have\n          if(isMasterDoc.setName) {\n            totalNumberOfMongodServers++;\n          }\n\n          if(isMasterDoc.msg && isMasterDoc.msg == \"isdbgrid\") totalNumberOfMongosServers++;\n        } else {\n          error = err;\n          errorServers[__server.host + \":\" + __server.port] = __server;\n        }\n\n        if(totalNumberOfServers == 0) {\n          // Error out\n          if(totalNumberOfMongodServers == 0 && totalNumberOfMongosServers == 0 && error) {\n            return callback(error, null);\n          }\n\n          // If we have a mix of mongod and mongos, throw an error\n          if(totalNumberOfMongosServers > 0 && totalNumberOfMongodServers > 0) {\n            if(db) db.close();\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"cannot combine a list of replicaset seeds and mongos seeds\"));\n              } catch (err) {\n                throw err\n              }\n            })\n          }\n\n          if(totalNumberOfMongodServers == 0\n            && totalNumberOfMongosServers == 0\n            && object.servers.length == 1\n            && (!object.rs_options.replicaSet || !object.rs_options.rs_name)) {\n\n            var obj = object.servers[0];\n            serverConfig = obj.domain_socket ?\n                new Server(obj.domain_socket, object.server_options)\n              : new Server(obj.host, obj.port, object.server_options);\n\n          } else if(totalNumberOfMongodServers > 0\n            || totalNumberOfMongosServers > 0\n            || object.rs_options.replicaSet || object.rs_options.rs_name) {\n\n            var finalServers = object.servers\n              .filter(function(serverObj) {\n                return errorServers[serverObj.host + \":\" + serverObj.port] == null;\n              })\n              .map(function(serverObj) {\n                return serverObj.domain_socket ?\n                  new Server(serverObj.domain_socket, 27017, object.server_options)\n                : new Server(serverObj.host, serverObj.port, object.server_options);\n              });\n\n            // Clean out any error servers\n            errorServers = {};\n\n            // Set up the final configuration\n            if(totalNumberOfMongodServers > 0) {\n              try {\n\n                // If no replicaset name was provided, we wish to perform a\n                // direct connection\n                if(totalNumberOfMongodServers == 1\n                  && (!object.rs_options.replicaSet && !object.rs_options.rs_name)) {\n                  serverConfig = finalServers[0];\n                } else if(totalNumberOfMongodServers == 1) {\n                  object.rs_options.replicaSet = object.rs_options.replicaSet || object.rs_options.rs_name;\n                  serverConfig = new ReplSet(finalServers, object.rs_options);\n                } else {\n                  serverConfig = new ReplSet(finalServers, object.rs_options);\n                }\n\n              } catch(err) {\n                return callback(err, null);\n              }\n            } else {\n              serverConfig = new Mongos(finalServers, object.mongos_options);\n            }\n          }\n\n          if(serverConfig == null) {\n            return process.nextTick(function() {\n              try {\n                callback(new Error(\"Could not locate any valid servers in initial seed list\"));\n              } catch (err) {\n                if(db) db.close();\n                throw err\n              }\n            });\n          }\n\n          // Ensure no firing of open event before we are ready\n          serverConfig.emitOpen = false;\n          // Set up all options etc and connect to the database\n          _finishConnecting(serverConfig, object, options, callback)\n        }\n      });\n    }\n\n    // Wrap the context of the call\n    connectFunction(_server);\n  }\n}\n\nvar _setNativeParser = function(db_options) {\n  if(typeof db_options.native_parser == 'boolean') return db_options.native_parser;\n\n  try {\n    require('mongodb-core').BSON.BSONNative.BSON;\n    return true;\n  } catch(err) {\n    return false;\n  }\n}\n\nvar _finishConnecting = function(serverConfig, object, options, callback) {\n  // If we have a readPreference passed in by the db options\n  if(typeof object.db_options.readPreference == 'string') {\n    object.db_options.readPreference = new ReadPreference(object.db_options.readPreference);\n  } else if(typeof object.db_options.read_preference == 'string') {\n    object.db_options.readPreference = new ReadPreference(object.db_options.read_preference);\n  }\n\n  // Do we have readPreference tags\n  if(object.db_options.readPreference && object.db_options.readPreferenceTags) {\n    object.db_options.readPreference.tags = object.db_options.readPreferenceTags;\n  } else if(object.db_options.readPreference && object.db_options.read_preference_tags) {\n    object.db_options.readPreference.tags = object.db_options.read_preference_tags;\n  }\n\n  // Get the socketTimeoutMS\n  var socketTimeoutMS = object.server_options.socketOptions.socketTimeoutMS || 0;\n\n  // If we have a replset, override with replicaset socket timeout option if available\n  if(serverConfig instanceof ReplSet) {\n    socketTimeoutMS = object.rs_options.socketOptions.socketTimeoutMS || socketTimeoutMS;\n  }\n\n  // Set socketTimeout to the same as the connectTimeoutMS or 30 sec\n  serverConfig.connectTimeoutMS = serverConfig.connectTimeoutMS || 30000;\n  serverConfig.socketTimeoutMS = serverConfig.connectTimeoutMS;\n\n  // Set up the db options\n  var db = new Db(object.dbName, serverConfig, object.db_options);\n  // Open the db\n  db.open(function(err, db){\n\n    if(err) {\n      return process.nextTick(function() {\n        try {\n          callback(err, null);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      });\n    }\n\n    // Reset the socket timeout\n    serverConfig.socketTimeoutMS = socketTimeoutMS || 0;\n\n    // Return object\n    if(err == null && object.auth){\n      // What db to authenticate against\n      var authentication_db = db;\n      if(object.db_options && object.db_options.authSource) {\n        authentication_db = db.db(object.db_options.authSource);\n      }\n\n      // Build options object\n      var options = {};\n      // Ensure we pass in the correct authentication options\n      if(object.db_options.authMechanism) options.authMechanism = object.db_options.authMechanism;\n      if(object.db_options.gssapiServiceName) options.gssapiServiceName = object.db_options.gssapiServiceName;\n      if(object.db_options.gssapiServiceRealm) options.gssapiServiceRealm = object.db_options.gssapiServiceRealm;\n      if(object.db_options.gssapiCanonicalizeHostName) options.gssapiCanonicalizeHostName = object.db_options.gssapiCanonicalizeHostName;\n\n      // Authenticate\n      authentication_db.authenticate(object.auth.user, object.auth.password, options, function(err, success){\n        if(success){\n          process.nextTick(function() {\n            try {\n              callback(null, db);\n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        } else {\n          if(db) db.close();\n          process.nextTick(function() {\n            try {\n              callback(err ? err : new Error('Could not authenticate user ' + object.auth[0]), null);\n            } catch (err) {\n              if(db) db.close();\n              throw err\n            }\n          });\n        }\n      });\n    } else {\n      process.nextTick(function() {\n        try {\n          callback(err, db);\n        } catch (err) {\n          if(db) db.close();\n          throw err\n        }\n      })\n    }\n  });\n}\n\nmodule.exports = MongoClient\n"]}