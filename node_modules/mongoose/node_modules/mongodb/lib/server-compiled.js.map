{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["\"use strict\";\n\nvar EventEmitter = require('events').EventEmitter\n  , inherits = require('util').inherits\n  , CServer = require('mongodb-core').Server\n  , Cursor = require('./cursor')\n  , AggregationCursor = require('./aggregation_cursor')\n  , CommandCursor = require('./command_cursor')\n  , f = require('util').format\n  , ServerCapabilities = require('./topology_base').ServerCapabilities\n  , Store = require('./topology_base').Store\n  , Define = require('./metadata')\n  , MongoError = require('mongodb-core').MongoError\n  , shallowClone = require('./utils').shallowClone\n  , MAX_JS_INT = require('./utils').MAX_JS_INT;\n\n/**\n * @fileOverview The **Server** class is a class that represents a single server topology and is\n * used to construct connections.\n *\n * **Server Should not be used, use MongoClient.connect**\n * @example\n * var Db = require('mongodb').Db,\n *   Server = require('mongodb').Server,\n *   test = require('assert');\n * // Connect using single Server\n * var db = new Db('test', new Server('localhost', 27017););\n * db.open(function(err, db) {\n *   // Get an additional db\n *   db.close();\n * });\n */\n\n/**\n * Creates a new Server instance\n * @class\n * @deprecated\n * @param {string} host The host for the server, can be either an IP4, IP6 or domain socket style host.\n * @param {number} [port] The server port if IP4.\n * @param {object} [options=null] Optional settings.\n * @param {number} [options.poolSize=5] Number of connections in the connection pool for each server instance, set to 5 as default for legacy reasons.\n * @param {boolean} [options.ssl=false] Use ssl connection (needs to have a mongod server with ssl support)\n * @param {object} [options.sslValidate=true] Validate mongod server certificate against ca (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {array} [options.sslCA=null] Array of valid certificates either as Buffers or Strings (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslCert=null] String or buffer containing the certificate we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslKey=null] String or buffer containing the certificate private key we wish to present (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {(Buffer|string)} [options.sslPass=null] String or buffer containing the certificate password (needs to have a mongod server with ssl support, 2.4 or higher)\n * @param {object} [options.socketOptions=null] Socket options\n * @param {boolean} [options.socketOptions.autoReconnect=true] Reconnect on error.\n * @param {boolean} [options.socketOptions.noDelay=true] TCP Socket NoDelay option.\n * @param {number} [options.socketOptions.keepAlive=0] TCP KeepAlive on the socket with a X ms delay before start.\n * @param {number} [options.socketOptions.connectTimeoutMS=0] TCP Connection timeout setting\n * @param {number} [options.socketOptions.socketTimeoutMS=0] TCP Socket timeout setting\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @fires Server#connect\n * @fires Server#close\n * @fires Server#error\n * @fires Server#timeout\n * @fires Server#parseError\n * @fires Server#reconnect\n * @return {Server} a Server instance.\n */\nvar Server = function(host, port, options) {\n  options = options || {};\n  if(!(this instanceof Server)) return new Server(host, port, options);\n  EventEmitter.call(this);\n  var self = this;\n\n  // Store option defaults\n  var storeOptions = {\n      force: false\n    , bufferMaxEntries: -1\n  }\n\n  // If we have \"unlimited\" set to max Number\n  if(storeOptions.bufferMaxEntries == -1) {\n    storeOptions.bufferMaxEntries = MAX_JS_INT;\n  }\n\n  // Shared global store\n  var store = options.store || new Store(self, storeOptions);\n\n  // Detect if we have a socket connection\n  if(host.indexOf('\\/') != -1) {\n    if(port != null && typeof port == 'object') {\n      options = port;\n      port = null;\n    }\n  } else if(port == null) {\n    throw MongoError.create({message: 'port must be specified', driver:true});\n  }\n\n  // Clone options\n  var clonedOptions = shallowClone(options);\n  clonedOptions.host = host;\n  clonedOptions.port = port;\n\n  // Reconnect\n  var reconnect = typeof options.auto_reconnect == 'boolean' ? options.auto_reconnect : true;\n  reconnect = typeof options.autoReconnect == 'boolean' ? options.autoReconnect : reconnect;\n  var emitError = typeof options.emitError == 'boolean' ? options.emitError : true;\n  var poolSize = typeof options.poolSize == 'number' ? options.poolSize : 5;\n\n  // Socket options passed down\n  if(options.socketOptions) {\n    if(options.socketOptions.connectTimeoutMS) {\n      this.connectTimeoutMS = options.socketOptions.connectTimeoutMS;\n      clonedOptions.connectionTimeout = options.socketOptions.connectTimeoutMS;\n    }\n\n    if(options.socketOptions.socketTimeoutMS) {\n      clonedOptions.socketTimeout = options.socketOptions.socketTimeoutMS;\n    }\n\n    if(typeof options.socketOptions.keepAlive == 'number') {\n      clonedOptions.keepAliveInitialDelay = options.socketOptions.keepAlive;\n      clonedOptions.keepAlive = true;\n    }\n\n    if(typeof options.socketOptions.noDelay == 'boolean') {\n      clonedOptions.noDelay = options.socketOptions.noDelay;\n    }\n  }\n\n  // Add the cursor factory function\n  clonedOptions.cursorFactory = Cursor;\n  clonedOptions.reconnect = reconnect;\n  clonedOptions.emitError = emitError;\n  clonedOptions.size = poolSize;\n\n  // Translate the options\n  if(clonedOptions.sslCA) clonedOptions.ca = clonedOptions.sslCA;\n  if(typeof clonedOptions.sslValidate == 'boolean') clonedOptions.rejectUnauthorized = clonedOptions.sslValidate;\n  if(clonedOptions.sslKey) clonedOptions.key = clonedOptions.sslKey;\n  if(clonedOptions.sslCert) clonedOptions.cert = clonedOptions.sslCert;\n  if(clonedOptions.sslPass) clonedOptions.passphrase = clonedOptions.sslPass;\n\n  // Add the non connection store\n  clonedOptions.disconnectHandler = store;\n\n  // Create an instance of a server instance from mongodb-core\n  var server = new CServer(clonedOptions);\n  // Server capabilities\n  var sCapabilities = null;\n\n  // Define the internal properties\n  this.s = {\n    // Create an instance of a server instance from mongodb-core\n      server: server\n    // Server capabilities\n    , sCapabilities: null\n    // Cloned options\n    , clonedOptions: clonedOptions\n    // Reconnect\n    , reconnect: reconnect\n    // Emit error\n    , emitError: emitError\n    // Pool size\n    , poolSize: poolSize\n    // Store Options\n    , storeOptions: storeOptions\n    // Store\n    , store: store\n    // Host\n    , host: host\n    // Port\n    , port: port\n    // Options\n    , options: options\n  }\n\n  // BSON property\n  Object.defineProperty(this, 'bson', {\n    enumerable: true, get: function() {\n      return self.s.server.bson;\n    }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'isMasterDoc', {\n    enumerable:true, get: function() {\n      return self.s.server.lastIsMaster();\n    }\n  });\n\n  // Last ismaster\n  Object.defineProperty(this, 'poolSize', {\n    enumerable:true, get: function() { return self.s.server.connections().length; }\n  });\n\n  Object.defineProperty(this, 'autoReconnect', {\n    enumerable:true, get: function() { return self.s.reconnect; }\n  });\n\n  Object.defineProperty(this, 'host', {\n    enumerable:true, get: function() { return self.s.host; }\n  });\n\n  Object.defineProperty(this, 'port', {\n    enumerable:true, get: function() { return self.s.port; }\n  });\n}\n\ninherits(Server, EventEmitter);\n\nvar define = Server.define = new Define('Server', Server, false);\n\nServer.prototype.parserType = function() {\n  return this.s.server.parserType();\n}\n\ndefine.classMethod('parserType', {callback: false, promise:false, returns: [String]});\n\n// Connect\nServer.prototype.connect = function(db, _options, callback) {\n  var self = this;\n  if('function' === typeof _options) callback = _options, _options = {};\n  if(_options == null) _options = {};\n  if(!('function' === typeof callback)) callback = null;\n  self.s.options = _options;\n\n  // Update bufferMaxEntries\n  self.s.storeOptions.bufferMaxEntries = db.bufferMaxEntries;\n\n  // Error handler\n  var connectErrorHandler = function(event) {\n    return function(err) {\n      // Remove all event handlers\n      var events = ['timeout', 'error', 'close'];\n      events.forEach(function(e) {\n        self.s.server.removeListener(e, connectHandlers[e]);\n      });\n\n      self.s.server.removeListener('connect', connectErrorHandler);\n\n      // Try to callback\n      try {\n        callback(err);\n      } catch(err) {\n        process.nextTick(function() { throw err; })\n      }\n    }\n  }\n\n  // Actual handler\n  var errorHandler = function(event) {\n    return function(err) {\n      if(event != 'error') {\n        self.emit(event, err);\n      }\n    }\n  }\n\n  // Error handler\n  var reconnectHandler = function(err) {\n    self.emit('reconnect', self);\n    self.s.store.execute();\n  }\n\n  // Destroy called on topology, perform cleanup\n  var destroyHandler = function() {\n    self.s.store.flush();\n  }\n\n  // Connect handler\n  var connectHandler = function() {\n    // Clear out all the current handlers left over\n    [\"timeout\", \"error\", \"close\", 'serverOpening', 'serverDescriptionChanged', 'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded', 'serverHearbeatFailed', 'serverClosed', 'topologyOpening',\n      'topologyClosed', 'topologyDescriptionChanged'].forEach(function(e) {\n      self.s.server.removeAllListeners(e);\n    });\n\n    // Set up listeners\n    self.s.server.once('timeout', errorHandler('timeout'));\n    self.s.server.once('error', errorHandler('error'));\n    self.s.server.on('close', errorHandler('close'));\n    // Only called on destroy\n    self.s.server.once('destroy', destroyHandler);\n\n    // relay the event\n    var relay = function(event) {\n      return function(t, server) {\n        self.emit(event, t, server);\n      }\n    }\n\n    // Set up SDAM listeners\n    self.s.server.on('serverDescriptionChanged', relay('serverDescriptionChanged'));\n    self.s.server.on('serverHeartbeatStarted', relay('serverHeartbeatStarted'));\n    self.s.server.on('serverHeartbeatSucceeded', relay('serverHeartbeatSucceeded'));\n    self.s.server.on('serverHearbeatFailed', relay('serverHearbeatFailed'));\n    self.s.server.on('serverOpening', relay('serverOpening'));\n    self.s.server.on('serverClosed', relay('serverClosed'));\n    self.s.server.on('topologyOpening', relay('topologyOpening'));\n    self.s.server.on('topologyClosed', relay('topologyClosed'));\n    self.s.server.on('topologyDescriptionChanged', relay('topologyDescriptionChanged'));\n\n    // Emit open event\n    self.emit('open', null, self);\n\n    // Return correctly\n    try {\n      callback(null, self);\n    } catch(err) {\n      console.log(err.stack)\n      process.nextTick(function() { throw err; })\n    }\n  }\n\n  // Set up listeners\n  var connectHandlers = {\n    timeout: connectErrorHandler('timeout'),\n    error: connectErrorHandler('error'),\n    close: connectErrorHandler('close')\n  };\n\n  // Add the event handlers\n  self.s.server.once('timeout', connectHandlers.timeout);\n  self.s.server.once('error', connectHandlers.error);\n  self.s.server.once('close', connectHandlers.close);\n  self.s.server.once('connect', connectHandler);\n  // Reconnect server\n  self.s.server.on('reconnect', reconnectHandler);\n\n  // Start connection\n  self.s.server.connect(_options);\n}\n\n// Server capabilities\nServer.prototype.capabilities = function() {\n  if(this.s.sCapabilities) return this.s.sCapabilities;\n  if(this.s.server.lastIsMaster() == null) return null;\n  this.s.sCapabilities = new ServerCapabilities(this.s.server.lastIsMaster());\n  return this.s.sCapabilities;\n}\n\ndefine.classMethod('capabilities', {callback: false, promise:false, returns: [ServerCapabilities]});\n\n// Command\nServer.prototype.command = function(ns, cmd, options, callback) {\n  this.s.server.command(ns, cmd, options, callback);\n}\n\ndefine.classMethod('command', {callback: true, promise:false});\n\n// Insert\nServer.prototype.insert = function(ns, ops, options, callback) {\n  this.s.server.insert(ns, ops, options, callback);\n}\n\ndefine.classMethod('insert', {callback: true, promise:false});\n\n// Update\nServer.prototype.update = function(ns, ops, options, callback) {\n  this.s.server.update(ns, ops, options, callback);\n}\n\ndefine.classMethod('update', {callback: true, promise:false});\n\n// Remove\nServer.prototype.remove = function(ns, ops, options, callback) {\n  this.s.server.remove(ns, ops, options, callback);\n}\n\ndefine.classMethod('remove', {callback: true, promise:false});\n\n// IsConnected\nServer.prototype.isConnected = function() {\n  return this.s.server.isConnected();\n}\n\nServer.prototype.isDestroyed = function() {\n  return this.s.server.isDestroyed();\n}\n\ndefine.classMethod('isConnected', {callback: false, promise:false, returns: [Boolean]});\n\n// Insert\nServer.prototype.cursor = function(ns, cmd, options) {\n  options.disconnectHandler = this.s.store;\n  return this.s.server.cursor(ns, cmd, options);\n}\n\ndefine.classMethod('cursor', {callback: false, promise:false, returns: [Cursor, AggregationCursor, CommandCursor]});\n\nServer.prototype.setBSONParserType = function(type) {\n  return this.s.server.setBSONParserType(type);\n}\n\nServer.prototype.lastIsMaster = function() {\n  return this.s.server.lastIsMaster();\n}\n\nServer.prototype.close = function(forceClosed) {\n  this.s.server.destroy();\n  // We need to wash out all stored processes\n  if(forceClosed == true) {\n    this.s.storeOptions.force = forceClosed;\n    this.s.store.flush();\n  }\n}\n\ndefine.classMethod('close', {callback: false, promise:false});\n\nServer.prototype.auth = function() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  this.s.server.auth.apply(this.s.server, args);\n}\n\ndefine.classMethod('auth', {callback: true, promise:false});\n\n/**\n * All raw connections\n * @method\n * @return {array}\n */\nServer.prototype.connections = function() {\n  return this.s.server.connections();\n}\n\ndefine.classMethod('connections', {callback: false, promise:false, returns:[Array]});\n\n/**\n * Server connect event\n *\n * @event Server#connect\n * @type {object}\n */\n\n/**\n * Server close event\n *\n * @event Server#close\n * @type {object}\n */\n\n/**\n * Server reconnect event\n *\n * @event Server#reconnect\n * @type {object}\n */\n\n/**\n * Server error event\n *\n * @event Server#error\n * @type {MongoError}\n */\n\n/**\n * Server timeout event\n *\n * @event Server#timeout\n * @type {object}\n */\n\n/**\n * Server parseError event\n *\n * @event Server#parseError\n * @type {object}\n */\n\nmodule.exports = Server;\n"]}