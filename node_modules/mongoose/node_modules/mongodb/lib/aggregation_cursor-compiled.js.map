{"version":3,"sources":["aggregation_cursor.js"],"names":[],"mappings":"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","file":"aggregation_cursor-compiled.js","sourcesContent":["\"use strict\";\n\nvar inherits = require('util').inherits\n  , f = require('util').format\n  , toError = require('./utils').toError\n  , getSingleProperty = require('./utils').getSingleProperty\n  , formattedOrderClause = require('./utils').formattedOrderClause\n  , handleCallback = require('./utils').handleCallback\n  , Logger = require('mongodb-core').Logger\n  , EventEmitter = require('events').EventEmitter\n  , ReadPreference = require('./read_preference')\n  , MongoError = require('mongodb-core').MongoError\n  , Readable = require('stream').Readable || require('readable-stream').Readable\n  , Define = require('./metadata')\n  , CoreCursor = require('./cursor')\n  , Query = require('mongodb-core').Query\n  , CoreReadPreference = require('mongodb-core').ReadPreference;\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 0.10.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * var MongoClient = require('mongodb').MongoClient,\n *   test = require('assert');\n * // Connection url\n * var url = 'mongodb://localhost:27017/test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, db) {\n *   // Create a collection we want to drop later\n *   var col = db.collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       db.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nvar AggregationCursor = function(bson, ns, cmd, options, topology, topologyOptions) {\n  CoreCursor.apply(this, Array.prototype.slice.call(arguments, 0));\n  var self = this;\n  var state = AggregationCursor.INIT;\n  var streamOptions = {};\n\n  // MaxTimeMS\n  var maxTimeMS = null;\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Set up\n  Readable.call(this, {objectMode: true});\n\n  // Internal state\n  this.s = {\n    // MaxTimeMS\n      maxTimeMS: maxTimeMS\n    // State\n    , state: state\n    // Stream options\n    , streamOptions: streamOptions\n    // BSON\n    , bson: bson\n    // Namespae\n    , ns: ns\n    // Command\n    , cmd: cmd\n    // Options\n    , options: options\n    // Topology\n    , topology: topology\n    // Topology Options\n    , topologyOptions: topologyOptions\n    // Promise library\n    , promiseLibrary: promiseLibrary\n  }\n}\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n// Inherit from Readable\ninherits(AggregationCursor, Readable);\n\n// Set the methods to inherit from prototype\nvar methodsToInherit = ['_next', 'next', 'each', 'forEach', 'toArray'\n  , 'rewind', 'bufferedCount', 'readBufferedDocuments', 'close', 'isClosed', 'kill'\n  , '_find', '_getmore', '_killcursor', 'isDead', 'explain', 'isNotified'];\n\n// Extend the Cursor\nfor(var name in CoreCursor.prototype) {\n  AggregationCursor.prototype[name] = CoreCursor.prototype[name];\n}\n\nvar define = AggregationCursor.define = new Define('AggregationCursor', AggregationCursor, true);\n\n/**\n * Set the batch size for the cursor.\n * @method\n * @param {number} value The batchSize for the cursor.\n * @throws {MongoError}\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.batchSize = function(value) {\n  if(this.s.state == AggregationCursor.CLOSED || this.isDead()) throw MongoError.create({message: \"Cursor is closed\", driver:true });\n  if(typeof value != 'number') throw MongoError.create({message: \"batchSize requires an integer\", drvier:true });\n  if(this.s.cmd.cursor) this.s.cmd.cursor.batchSize = value;\n  this.setCursorBatchSize(value);\n  return this;\n}\n\ndefine.classMethod('batchSize', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a geoNear stage to the aggregation pipeline\n * @method\n * @param {object} document The geoNear stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.geoNear = function(document) {\n  this.s.cmd.pipeline.push({$geoNear: document});\n  return this;\n}\n\ndefine.classMethod('geoNear', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a group stage to the aggregation pipeline\n * @method\n * @param {object} document The group stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.group = function(document) {\n  this.s.cmd.pipeline.push({$group: document});\n  return this;\n}\n\ndefine.classMethod('group', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a limit stage to the aggregation pipeline\n * @method\n * @param {number} value The state limit value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.limit = function(value) {\n  this.s.cmd.pipeline.push({$limit: value});\n  return this;\n}\n\ndefine.classMethod('limit', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a match stage to the aggregation pipeline\n * @method\n * @param {object} document The match stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.match = function(document) {\n  this.s.cmd.pipeline.push({$match: document});\n  return this;\n}\n\ndefine.classMethod('match', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a maxTimeMS stage to the aggregation pipeline\n * @method\n * @param {number} value The state maxTimeMS value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.maxTimeMS = function(value) {\n  if(this.s.topology.lastIsMaster().minWireVersion > 2) {\n    this.s.cmd.maxTimeMS = value;\n  }\n  return this;\n}\n\ndefine.classMethod('maxTimeMS', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a out stage to the aggregation pipeline\n * @method\n * @param {number} destination The destination name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.out = function(destination) {\n  this.s.cmd.pipeline.push({$out: destination});\n  return this;\n}\n\ndefine.classMethod('out', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a project stage to the aggregation pipeline\n * @method\n * @param {object} document The project stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.project = function(document) {\n  this.s.cmd.pipeline.push({$project: document});\n  return this;\n}\n\ndefine.classMethod('project', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a lookup stage to the aggregation pipeline\n * @method\n * @param {object} document The lookup stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.lookup = function(document) {\n  this.s.cmd.pipeline.push({$lookup: document});\n  return this;\n}\n\ndefine.classMethod('lookup', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a redact stage to the aggregation pipeline\n * @method\n * @param {object} document The redact stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.redact = function(document) {\n  this.s.cmd.pipeline.push({$redact: document});\n  return this;\n}\n\ndefine.classMethod('redact', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a skip stage to the aggregation pipeline\n * @method\n * @param {number} value The state skip value.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.skip = function(value) {\n  this.s.cmd.pipeline.push({$skip: value});\n  return this;\n}\n\ndefine.classMethod('skip', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a sort stage to the aggregation pipeline\n * @method\n * @param {object} document The sort stage document.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.sort = function(document) {\n  this.s.cmd.pipeline.push({$sort: document});\n  return this;\n}\n\ndefine.classMethod('sort', {callback: false, promise:false, returns: [AggregationCursor]});\n\n/**\n * Add a unwind stage to the aggregation pipeline\n * @method\n * @param {number} field The unwind field name.\n * @return {AggregationCursor}\n */\nAggregationCursor.prototype.unwind = function(field) {\n  this.s.cmd.pipeline.push({$unwind: field});\n  return this;\n}\n\ndefine.classMethod('unwind', {callback: false, promise:false, returns: [AggregationCursor]});\n\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n// Inherited methods\ndefine.classMethod('toArray', {callback: true, promise:true});\ndefine.classMethod('each', {callback: true, promise:false});\ndefine.classMethod('forEach', {callback: true, promise:false});\ndefine.classMethod('next', {callback: true, promise:true});\ndefine.classMethod('close', {callback: true, promise:true});\ndefine.classMethod('isClosed', {callback: false, promise:false, returns: [Boolean]});\ndefine.classMethod('rewind', {callback: false, promise:false});\ndefine.classMethod('bufferedCount', {callback: false, promise:false, returns: [Number]});\ndefine.classMethod('readBufferedDocuments', {callback: false, promise:false, returns: [Array]});\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previouly accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previouly accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n * @method AggregationCursor.prototype.explain\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/*\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nAggregationCursor.INIT = 0;\nAggregationCursor.OPEN = 1;\nAggregationCursor.CLOSED = 2;\n\nmodule.exports = AggregationCursor;\n"]}