{"version":3,"sources":["unordered.js"],"names":[],"mappings":"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","file":"unordered-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n  , f = require('util').format\n\t, handleCallback = require('../utils').handleCallback\n  , shallowClone = utils.shallowClone\n  , WriteError = common.WriteError\n  , BulkWriteResult = common.BulkWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n\t, BSON = require('mongodb-core').BSON\n  , Define = require('../metadata')\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON.BSONPure();\n\n/**\n * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {FindOperatorsUnordered} a FindOperatorsUnordered instance.\n */\nvar FindOperatorsUnordered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.removeOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nFindOperatorsUnordered.prototype.remove = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n//\n// Add to the operations list\n//\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, false);\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n  // Holds the current batch\n  _self.s.currentBatch = null;\n  // Get the right type of batch\n  if(docType == common.INSERT) {\n    _self.s.currentBatch = _self.s.currentInsertBatch;\n  } else if(docType == common.UPDATE) {\n    _self.s.currentBatch = _self.s.currentUpdateBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentBatch = _self.s.currentRemoveBatch;\n  }\n\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatch.size + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatch.sizeBytes + bsonSize) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.operations.push(document);\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Save back the current Batch to the right type\n  if(docType == common.INSERT) {\n    _self.s.currentInsertBatch = _self.s.currentBatch;\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  } else if(docType == common.UPDATE) {\n    _self.s.currentUpdateBatch = _self.s.currentBatch;\n  } else if(docType == common.REMOVE) {\n    _self.s.currentRemoveBatch = _self.s.currentBatch;\n  }\n\n  // Update current batch size\n  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;\n  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nvar UnorderedBulkOperation = function(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\n\t// Contains reference to self\n\tvar self = this;\n\t// Get the namesspace for the write operations\n  var namespace = collection.collectionName;\n  // Used to mark operation as executed\n  var executed = false;\n\n\t// Current item\n  // var currentBatch = null;\n\tvar currentOp = null;\n\tvar currentIndex = 0;\n  var batches = [];\n\n  // The current Batches for the different operations\n  var currentInsertBatch = null;\n  var currentUpdateBatch = null;\n  var currentRemoveBatch = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n  // Set max byte size\n  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);\n  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n    ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentInsertBatch: null\n    , currentUpdateBatch: null\n    , currentRemoveBatch: null\n    , currentBatch: null\n    , currentIndex: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  }\n}\n\nvar define = UnorderedBulkOperation.define = new Define('UnorderedBulkOperation', UnorderedBulkOperation, false);\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {UnorderedBulkOperation}\n */\nUnorderedBulkOperation.prototype.insert = function(document) {\n  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsUnordered}\n */\nUnorderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsUnordered(this);\n}\n\nObject.defineProperty(UnorderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\nUnorderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    if(op[key].upsert) operation.upsert = true;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    var operation = {q: op[key].filter, limit: limit}\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n//\n// Execute the command\nvar executeBatch = function(self, batch, callback) {\n  var finalOptions = {ordered: false}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n  var resultHandler = function(err, result) {\n\t\t// Error is a driver related error not a bulk op error, terminate\n\t\tif(err && err.driver || err && err.message) {\n\t\t\treturn handleCallback(callback, err);\n\t\t}\n\n    // If we have and error\n    if(err) err.ok = 0;\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));\n  }\n\n\t// Set an operationIf if provided\n\tif(self.operationId) {\n\t\tresultHandler.operationId = self.operationId;\n\t}\n\n\t// Serialize functions\n\tif(self.s.options.serializeFunctions) {\n\t\tfinalOptions.serializeFunctions = true\n\t}\n\n  // Is the bypassDocumentValidation options specific\n  if(self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n//\n// Execute all the commands\nvar executeBatches = function(self, callback) {\n  var numberOfCommandsToExecute = self.s.batches.length;\n\tvar error = null;\n  // Execute over all the batches\n  for(var i = 0; i < self.s.batches.length; i++) {\n    executeBatch(self, self.s.batches[i], function(err, result) {\n\t\t\t// Driver layer error capture it\n\t\t\tif(err) error = err;\n\t\t\t// Count down the number of commands left to execute\n      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;\n\n      // Execute\n      if(numberOfCommandsToExecute == 0) {\n\t\t\t\t// Driver level error\n\t\t\t\tif(error) return handleCallback(callback, error);\n\t\t\t\t// Treat write errors\n        var error = self.s.bulkResult.writeErrors.length > 0 ? toError(self.s.bulkResult.writeErrors[0]) : null;\n        handleCallback(callback, error, new BulkWriteResult(self.s.bulkResult));\n      }\n    });\n  }\n}\n\n/**\n * The callback format for results\n * @callback UnorderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {UnorderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nUnorderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  var self = this;\n  if(this.s.executed) throw toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n  if(this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n  if(this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if(typeof callback == 'function') return executeBatches(this, callback);\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    executeBatches(self, function(err, r) {\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n}\n\ndefine.classMethod('execute', {callback: true, promise:false});\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeUnorderedBulkOp = function(topology, collection, options) {\n\treturn new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n"]}