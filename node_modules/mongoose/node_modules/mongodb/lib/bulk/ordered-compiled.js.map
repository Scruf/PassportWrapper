{"version":3,"sources":["ordered.js"],"names":[],"mappings":"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","file":"ordered-compiled.js","sourcesContent":["\"use strict\";\n\nvar common = require('./common')\n\t, utils = require('../utils')\n  , toError = require('../utils').toError\n\t, f = require('util').format\n\t, handleCallback = require('../utils').handleCallback\n\t, shallowClone = utils.shallowClone\n  , WriteError = common.WriteError\n  , BulkWriteResult = common.BulkWriteResult\n  , LegacyOp = common.LegacyOp\n  , ObjectID = require('mongodb-core').BSON.ObjectID\n  , Define = require('../metadata')\n\t, BSON = require('mongodb-core').BSON\n  , Batch = common.Batch\n  , mergeBatchResults = common.mergeBatchResults;\n\nvar bson = new BSON.BSONPure();\n\n/**\n * Create a FindOperatorsOrdered instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @return {FindOperatorsOrdered} a FindOperatorsOrdered instance.\n */\nvar FindOperatorsOrdered = function(self) {\n  this.s = self.s;\n}\n\n/**\n * Add a single update document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.update = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: true\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a single update one document to the bulk operation\n *\n * @method\n * @param {object} doc update operations\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.updateOne = function(updateDocument) {\n  // Perform upsert\n  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;\n\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , u: updateDocument\n    , multi: false\n    , upsert: upsert\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the update document to the list\n  return addToOperationsList(this, common.UPDATE, document);\n}\n\n/**\n * Add a replace one operation to the bulk operation\n *\n * @method\n * @param {object} doc the new document to replace the existing one with\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.replaceOne = function(updateDocument) {\n  this.updateOne(updateDocument);\n}\n\n/**\n * Upsert modifier for update bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nFindOperatorsOrdered.prototype.upsert = function() {\n  this.s.currentOp.upsert = true;\n  return this;\n}\n\n/**\n * Add a remove one operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.deleteOne = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 1\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.removeOne = FindOperatorsOrdered.prototype.deleteOne;\n\n/**\n * Add a remove operation to the bulk operation\n *\n * @method\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nFindOperatorsOrdered.prototype.delete = function() {\n  // Establish the update command\n  var document = {\n      q: this.s.currentOp.selector\n    , limit: 0\n  }\n\n  // Clear out current Op\n  this.s.currentOp = null;\n  // Add the remove document to the list\n  return addToOperationsList(this, common.REMOVE, document);\n}\n\n// Backward compatibility\nFindOperatorsOrdered.prototype.remove = FindOperatorsOrdered.prototype.delete;\n\n// Add to internal list of documents\nvar addToOperationsList = function(_self, docType, document) {\n  // Get the bsonSize\n  var bsonSize = bson.calculateObjectSize(document, false);\n\n  // Throw error if the doc is bigger than the max BSON size\n  if(bsonSize >= _self.s.maxBatchSizeBytes) {\n\t\tthrow toError(\"document is larger than the maximum size \" + _self.s.maxBatchSizeBytes);\n\t}\n\n  // Create a new batch object if we don't have a current one\n  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if(((_self.s.currentBatchSize + 1) >= _self.s.maxWriteBatchSize)\n    || ((_self.s.currentBatchSizeBytes +  _self.s.currentBatchSizeBytes) >= _self.s.maxBatchSizeBytes)\n    || (_self.s.currentBatch.batchType != docType)) {\n    // Save the batch to the execution stack\n    _self.s.batches.push(_self.s.currentBatch);\n\n    // Create a new batch\n    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);\n\n    // Reset the current size trackers\n    _self.s.currentBatchSize = 0;\n    _self.s.currentBatchSizeBytes = 0;\n  } else {\n    // Update current batch size\n    _self.s.currentBatchSize = _self.s.currentBatchSize + 1;\n    _self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n  }\n\n  if(docType == common.INSERT) {\n    _self.s.bulkResult.insertedIds.push({index: _self.s.currentIndex, _id: document._id});\n  }\n\n  // We have an array of documents\n  if(Array.isArray(document)) {\n    throw toError(\"operation passed in cannot be an Array\");\n  } else {\n    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);\n    _self.s.currentBatch.operations.push(document)\n\t\t_self.s.currentBatchSizeBytes = _self.s.currentBatchSizeBytes + bsonSize;\n    _self.s.currentIndex = _self.s.currentIndex + 1;\n  }\n\n  // Return self\n  return _self;\n}\n\n/**\n * Create a new OrderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @property {number} length Get the number of operations in the bulk.\n * @return {OrderedBulkOperation} a OrderedBulkOperation instance.\n */\nfunction OrderedBulkOperation(topology, collection, options) {\n\toptions = options == null ? {} : options;\n\t// TODO Bring from driver information in isMaster\n\tvar self = this;\n\tvar executed = false;\n\n\t// Current item\n\tvar currentOp = null;\n\n\t// Handle to the bson serializer, used to calculate running sizes\n\tvar bson = topology.bson;\n\n\t// Namespace for the operation\n  var namespace = collection.collectionName;\n\n  // Set max byte size\n\tvar maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize\n    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);\n\tvar maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize\n    ? topology.isMasterDoc.maxWriteBatchSize : 1000;\n\n  // Get the write concern\n  var writeConcern = common.writeConcern(shallowClone(options), collection, options);\n\n  // Get the promiseLibrary\n  var promiseLibrary = options.promiseLibrary;\n\n  // No promise library selected fall back\n  if(!promiseLibrary) {\n    promiseLibrary = typeof global.Promise == 'function' ?\n      global.Promise : require('es6-promise').Promise;\n  }\n\n  // Current batch\n  var currentBatch = null;\n  var currentIndex = 0;\n  var currentBatchSize = 0;\n  var currentBatchSizeBytes = 0;\n  var batches = [];\n\n  // Final results\n  var bulkResult = {\n  \t  ok: 1\n    , writeErrors: []\n    , writeConcernErrors: []\n    , insertedIds: []\n    , nInserted: 0\n    , nUpserted: 0\n    , nMatched: 0\n    , nModified: 0\n    , nRemoved: 0\n    , upserted: []\n  };\n\n  // Internal state\n  this.s = {\n    // Final result\n      bulkResult: bulkResult\n    // Current batch state\n    , currentBatch: null\n    , currentIndex: 0\n    , currentBatchSize: 0\n    , currentBatchSizeBytes: 0\n    , batches: []\n    // Write concern\n    , writeConcern: writeConcern\n    // Max batch size options\n    , maxBatchSizeBytes: maxBatchSizeBytes\n    , maxWriteBatchSize: maxWriteBatchSize\n    // Namespace\n    , namespace: namespace\n    // BSON\n    , bson: bson\n    // Topology\n    , topology: topology\n    // Options\n    , options: options\n    // Current operation\n    , currentOp: currentOp\n    // Executed\n    , executed: executed\n    // Collection\n    , collection: collection\n    // Promise Library\n    , promiseLibrary: promiseLibrary\n\t\t// Fundamental error\n\t\t, err: null\n    // Bypass validation\n    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false\n  }\n}\n\nvar define = OrderedBulkOperation.define = new Define('OrderedBulkOperation', OrderedBulkOperation, false);\n\nOrderedBulkOperation.prototype.raw = function(op) {\n  var key = Object.keys(op)[0];\n\n  // Set up the force server object id\n  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'\n    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;\n\n  // Update operations\n  if((op.updateOne && op.updateOne.q)\n    || (op.updateMany && op.updateMany.q)\n    || (op.replaceOne && op.replaceOne.q)) {\n    op[key].multi = op.updateOne || op.replaceOne ? false : true;\n    return addToOperationsList(this, common.UPDATE, op[key]);\n  }\n\n  // Crud spec update format\n  if(op.updateOne || op.updateMany || op.replaceOne) {\n    var multi = op.updateOne || op.replaceOne ? false : true;\n    var operation = {q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi}\n    operation.upsert = op[key].upsert ? true: false;\n    return addToOperationsList(this, common.UPDATE, operation);\n  }\n\n  // Remove operations\n  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) {\n    op[key].limit = op.removeOne ? 1 : 0;\n    return addToOperationsList(this, common.REMOVE, op[key]);\n  }\n\n  // Crud spec delete operations, less efficient\n  if(op.deleteOne || op.deleteMany) {\n    var limit = op.deleteOne ? 1 : 0;\n    var operation = {q: op[key].filter, limit: limit}\n    return addToOperationsList(this, common.REMOVE, operation);\n  }\n\n  // Insert operations\n  if(op.insertOne && op.insertOne.document == null) {\n    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne);\n  } else if(op.insertOne && op.insertOne.document) {\n    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();\n    return addToOperationsList(this, common.INSERT, op.insertOne.document);\n  }\n\n  if(op.insertMany) {\n    for(var i = 0; i < op.insertMany.length; i++) {\n      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();\n      addToOperationsList(this, common.INSERT, op.insertMany[i]);\n    }\n\n    return;\n  }\n\n  // No valid type of operation\n  throw toError(\"bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany\");\n}\n\n/**\n * Add a single insert document to the bulk operation\n *\n * @param {object} doc the document to insert\n * @throws {MongoError}\n * @return {OrderedBulkOperation}\n */\nOrderedBulkOperation.prototype.insert = function(document) {\n  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();\n  return addToOperationsList(this, common.INSERT, document);\n}\n\n/**\n * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne\n *\n * @method\n * @param {object} selector The selector for the bulk operation.\n * @throws {MongoError}\n * @return {FindOperatorsOrdered}\n */\nOrderedBulkOperation.prototype.find = function(selector) {\n  if (!selector) {\n    throw toError(\"Bulk find operation must specify a selector\");\n  }\n\n  // Save a current selector\n  this.s.currentOp = {\n    selector: selector\n  }\n\n  return new FindOperatorsOrdered(this);\n}\n\nObject.defineProperty(OrderedBulkOperation.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n//\n// Execute next write command in a chain\nvar executeCommands = function(self, callback) {\n  if(self.s.batches.length == 0) {\n    return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n  }\n\n  // Ordered execution of the command\n  var batch = self.s.batches.shift();\n\n  var resultHandler = function(err, result) {\n\t\t// Error is a driver related error not a bulk op error, terminate\n\t\tif(err && err.driver || err && err.message) {\n\t\t\treturn handleCallback(callback, err);\n\t\t}\n\n    // If we have and error\n    if(err) err.ok = 0;\n    // Merge the results together\n    var mergeResult = mergeBatchResults(true, batch, self.s.bulkResult, err, result);\n    if(mergeResult != null) {\n      return handleCallback(callback, null, new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // If we are ordered and have errors and they are\n    // not all replication errors terminate the operation\n    if(self.s.bulkResult.writeErrors.length > 0) {\n      return handleCallback(callback, toError(self.s.bulkResult.writeErrors[0]), new BulkWriteResult(self.s.bulkResult));\n    }\n\n    // Execute the next command in line\n    executeCommands(self, callback);\n  }\n\n  var finalOptions = {ordered: true}\n  if(self.s.writeConcern != null) {\n    finalOptions.writeConcern = self.s.writeConcern;\n  }\n\n\t// Set an operationIf if provided\n\tif(self.operationId) {\n\t\tresultHandler.operationId = self.operationId;\n\t}\n\n\t// Serialize functions\n\tif(self.s.options.serializeFunctions) {\n\t\tfinalOptions.serializeFunctions = true\n\t}\n\n  // Serialize functions\n  if(self.s.options.ignoreUndefined) {\n    finalOptions.ignoreUndefined = true\n  }\n\n  // Is the bypassDocumentValidation options specific\n  if(self.s.bypassDocumentValidation == true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n\n  try {\n    if(batch.batchType == common.INSERT) {\n      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.UPDATE) {\n      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    } else if(batch.batchType == common.REMOVE) {\n      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);\n    }\n  } catch(err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));\n  }\n}\n\n/**\n * The callback format for results\n * @callback OrderedBulkOperation~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {BulkWriteResult} result The bulk write result.\n */\n\n/**\n * Execute the ordered bulk operation\n *\n * @method\n * @param {object} [options=null] Optional settings.\n * @param {(number|string)} [options.w=null] The write concern.\n * @param {number} [options.wtimeout=null] The write concern timeout.\n * @param {boolean} [options.j=false] Specify a journal write concern.\n * @param {boolean} [options.fsync=false] Specify a file sync write concern.\n * @param {OrderedBulkOperation~resultCallback} [callback] The result callback\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\nOrderedBulkOperation.prototype.execute = function(_writeConcern, callback) {\n  var self = this;\n  if(this.s.executed) throw new toError(\"batch cannot be re-executed\");\n  if(typeof _writeConcern == 'function') {\n    callback = _writeConcern;\n  } else {\n    this.s.writeConcern = _writeConcern;\n  }\n\n  // If we have current batch\n  if(this.s.currentBatch) this.s.batches.push(this.s.currentBatch)\n\n  // If we have no operations in the bulk raise an error\n  if(this.s.batches.length == 0) {\n    throw toError(\"Invalid Operation, No operations in bulk\");\n  }\n\n  // Execute using callback\n  if(typeof callback == 'function') {\n\t\treturn executeCommands(this, callback);\n\t}\n\n  // Return a Promise\n  return new this.s.promiseLibrary(function(resolve, reject) {\n    executeCommands(self, function(err, r) {\n      if(err) return reject(err);\n      resolve(r);\n    });\n  });\n}\n\ndefine.classMethod('execute', {callback: true, promise:false});\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nvar initializeOrderedBulkOp = function(topology, collection, options) {\n\treturn new OrderedBulkOperation(topology, collection, options);\n}\n\ninitializeOrderedBulkOp.OrderedBulkOperation = OrderedBulkOperation;\nmodule.exports = initializeOrderedBulkOp;\nmodule.exports.Bulk = OrderedBulkOperation;\n"]}