{"version":3,"sources":["bson.js"],"names":[],"mappings":"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","file":"bson-compiled.js","sourcesContent":["// \"use strict\"\n\nvar writeIEEE754 = require('./float_parser').writeIEEE754,\n\treadIEEE754 = require('./float_parser').readIEEE754,\n  Map = require('./map'),\n\tLong = require('./long').Long,\n  Double = require('./double').Double,\n  Timestamp = require('./timestamp').Timestamp,\n  ObjectID = require('./objectid').ObjectID,\n  BSONRegExp = require('./regexp').BSONRegExp,\n  Symbol = require('./symbol').Symbol,\n  Code = require('./code').Code,\n  MinKey = require('./min_key').MinKey,\n  MaxKey = require('./max_key').MaxKey,\n  DBRef = require('./db_ref').DBRef,\n  Binary = require('./binary').Binary;\n\n// Parts of the parser\nvar deserialize = require('./parser/deserializer'),\n\tserializer = require('./parser/serializer'),\n\tcalculateObjectSize = require('./parser/calculate_size');\n\n/**\n * @ignore\n * @api private\n */\n// Max Size\nvar MAXSIZE = (1024*1024*17);\n// Max Document Buffer size\nvar buffer = new Buffer(MAXSIZE);\n\nvar BSON = function() {\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Boolean} asBuffer return the serialized object as a Buffer object **(ignore)**.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Buffer} returns the Buffer object containing the serialized object.\n * @api public\n */\nBSON.prototype.serialize = function serialize(object, checkKeys, asBuffer, serializeFunctions, index, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, index || 0, 0, serializeFunctions, ignoreUndefined);\n\t// Create the final buffer\n\tvar finishedBuffer = new Buffer(serializationIndex);\n\t// Copy into the finished buffer\n\tbuffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);\n\t// Return the buffer\n\treturn finishedBuffer;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer, useful when pre-allocating the space for serialization.\n *\n * @param {Object} object the Javascript object to serialize.\n * @param {Boolean} checkKeys the serializer will check if keys are valid.\n * @param {Buffer} buffer the Buffer you pre-allocated to store the serialized BSON object.\n * @param {Number} index the index in the buffer where we wish to start serializing into.\n * @param {Boolean} serializeFunctions serialize the javascript functions **(default:false)**.\n * @return {Number} returns the new write index in the Buffer.\n * @api public\n */\nBSON.prototype.serializeWithBufferAndIndex = function(object, checkKeys, finalBuffer, startIndex, serializeFunctions, ignoreUndefined) {\n\t// Attempt to serialize\n\tvar serializationIndex = serializer(buffer, object, checkKeys, startIndex || 0, 0, serializeFunctions, ignoreUndefined);\n\tbuffer.copy(finalBuffer, startIndex, 0, serializationIndex);\n\t// Return the index\n\treturn startIndex + serializationIndex - 1;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} buffer the buffer containing the serialized set of BSON documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @param {Boolean} [isArray] ignore used for recursive parsing.\n * @return {Object} returns the deserialized Javascript Object.\n * @api public\n */\nBSON.prototype.deserialize = function(data, options) {\n  return deserialize(data, options);\n}\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param {Object} object the Javascript object to calculate the BSON byte size for.\n * @param {Boolean} [serializeFunctions] serialize all functions in the object **(default:false)**.\n * @return {Number} returns the number of bytes the BSON object will take up.\n * @api public\n */\nBSON.prototype.calculateObjectSize = function(object, serializeFunctions, ignoreUndefined) {\n  return calculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * Options\n *  - **evalFunctions** {Boolean, default:false}, evaluate functions in the BSON document scoped to the object deserialized.\n *  - **cacheFunctions** {Boolean, default:false}, cache evaluated functions for reuse.\n *  - **cacheFunctionsCrc32** {Boolean, default:false}, use a crc32 code for caching, otherwise use the string of the function.\n *  - **promoteLongs** {Boolean, default:true}, when deserializing a Long will fit it into a Number if it's smaller than 53 bits\n *\n * @param {Buffer} data the buffer containing the serialized set of BSON documents.\n * @param {Number} startIndex the start index in the data Buffer where the deserialization is to start.\n * @param {Number} numberOfDocuments number of documents to deserialize.\n * @param {Array} documents an array where to store the deserialized documents.\n * @param {Number} docStartIndex the index in the documents array from where to start inserting documents.\n * @param {Object} [options] additional options used for the deserialization.\n * @return {Number} returns the next index in the buffer after deserialization **x** numbers of documents.\n * @api public\n */\nBSON.prototype.deserializeStream = function(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  // if(numberOfDocuments !== documents.length) throw new Error(\"Number of expected results back is less than the number of documents\");\n  options = options != null ? options : {};\n  var index = startIndex;\n  // Loop over all documents\n  for(var i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    var size = data[index] | data[index + 1] << 8 | data[index + 2] << 16 | data[index + 3] << 24;\n    // Update options with index\n    options['index'] = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = this.deserialize(data, options);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n\n/**\n * @ignore\n * @api private\n */\n// BSON MAX VALUES\nBSON.BSON_INT32_MAX = 0x7FFFFFFF;\nBSON.BSON_INT32_MIN = -0x80000000;\n\nBSON.BSON_INT64_MAX = Math.pow(2, 63) - 1;\nBSON.BSON_INT64_MIN = -Math.pow(2, 63);\n\n// JS MAX PRECISE VALUES\nBSON.JS_INT_MAX = 0x20000000000000;  // Any integer up to 2^53 can be precisely represented by a double.\nBSON.JS_INT_MIN = -0x20000000000000;  // Any integer down to -2^53 can be precisely represented by a double.\n\n// Internal long versions\nvar JS_INT_MAX_LONG = Long.fromNumber(0x20000000000000);  // Any integer up to 2^53 can be precisely represented by a double.\nvar JS_INT_MIN_LONG = Long.fromNumber(-0x20000000000000);  // Any integer down to -2^53 can be precisely represented by a double.\n\n/**\n * Number BSON Type\n *\n * @classconstant BSON_DATA_NUMBER\n **/\nBSON.BSON_DATA_NUMBER = 1;\n/**\n * String BSON Type\n *\n * @classconstant BSON_DATA_STRING\n **/\nBSON.BSON_DATA_STRING = 2;\n/**\n * Object BSON Type\n *\n * @classconstant BSON_DATA_OBJECT\n **/\nBSON.BSON_DATA_OBJECT = 3;\n/**\n * Array BSON Type\n *\n * @classconstant BSON_DATA_ARRAY\n **/\nBSON.BSON_DATA_ARRAY = 4;\n/**\n * Binary BSON Type\n *\n * @classconstant BSON_DATA_BINARY\n **/\nBSON.BSON_DATA_BINARY = 5;\n/**\n * ObjectID BSON Type\n *\n * @classconstant BSON_DATA_OID\n **/\nBSON.BSON_DATA_OID = 7;\n/**\n * Boolean BSON Type\n *\n * @classconstant BSON_DATA_BOOLEAN\n **/\nBSON.BSON_DATA_BOOLEAN = 8;\n/**\n * Date BSON Type\n *\n * @classconstant BSON_DATA_DATE\n **/\nBSON.BSON_DATA_DATE = 9;\n/**\n * null BSON Type\n *\n * @classconstant BSON_DATA_NULL\n **/\nBSON.BSON_DATA_NULL = 10;\n/**\n * RegExp BSON Type\n *\n * @classconstant BSON_DATA_REGEXP\n **/\nBSON.BSON_DATA_REGEXP = 11;\n/**\n * Code BSON Type\n *\n * @classconstant BSON_DATA_CODE\n **/\nBSON.BSON_DATA_CODE = 13;\n/**\n * Symbol BSON Type\n *\n * @classconstant BSON_DATA_SYMBOL\n **/\nBSON.BSON_DATA_SYMBOL = 14;\n/**\n * Code with Scope BSON Type\n *\n * @classconstant BSON_DATA_CODE_W_SCOPE\n **/\nBSON.BSON_DATA_CODE_W_SCOPE = 15;\n/**\n * 32 bit Integer BSON Type\n *\n * @classconstant BSON_DATA_INT\n **/\nBSON.BSON_DATA_INT = 16;\n/**\n * Timestamp BSON Type\n *\n * @classconstant BSON_DATA_TIMESTAMP\n **/\nBSON.BSON_DATA_TIMESTAMP = 17;\n/**\n * Long BSON Type\n *\n * @classconstant BSON_DATA_LONG\n **/\nBSON.BSON_DATA_LONG = 18;\n/**\n * MinKey BSON Type\n *\n * @classconstant BSON_DATA_MIN_KEY\n **/\nBSON.BSON_DATA_MIN_KEY = 0xff;\n/**\n * MaxKey BSON Type\n *\n * @classconstant BSON_DATA_MAX_KEY\n **/\nBSON.BSON_DATA_MAX_KEY = 0x7f;\n\n/**\n * Binary Default Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_DEFAULT\n **/\nBSON.BSON_BINARY_SUBTYPE_DEFAULT = 0;\n/**\n * Binary Function Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_FUNCTION\n **/\nBSON.BSON_BINARY_SUBTYPE_FUNCTION = 1;\n/**\n * Binary Byte Array Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_BYTE_ARRAY\n **/\nBSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n/**\n * Binary UUID Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_UUID\n **/\nBSON.BSON_BINARY_SUBTYPE_UUID = 3;\n/**\n * Binary MD5 Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_MD5\n **/\nBSON.BSON_BINARY_SUBTYPE_MD5 = 4;\n/**\n * Binary User Defined Type\n *\n * @classconstant BSON_BINARY_SUBTYPE_USER_DEFINED\n **/\nBSON.BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n// Return BSON\nmodule.exports = BSON;\nmodule.exports.Code = Code;\nmodule.exports.Map = Map;\nmodule.exports.Symbol = Symbol;\nmodule.exports.BSON = BSON;\nmodule.exports.DBRef = DBRef;\nmodule.exports.Binary = Binary;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.Long = Long;\nmodule.exports.Timestamp = Timestamp;\nmodule.exports.Double = Double;\nmodule.exports.MinKey = MinKey;\nmodule.exports.MaxKey = MaxKey;\nmodule.exports.BSONRegExp = BSONRegExp;\n"]}