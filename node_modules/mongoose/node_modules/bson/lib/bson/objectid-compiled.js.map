{"version":3,"sources":["objectid.js"],"names":[],"mappings":"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","file":"objectid-compiled.js","sourcesContent":["/**\n * Module dependencies.\n * @ignore\n */\nvar BinaryParser = require('./binary_parser').BinaryParser;\n\n/**\n * Machine id.\n *\n * Create a random 3-byte value (i.e. unique for this\n * process). Other drivers use a md5 of the machine id here, but\n * that would mean an asyc call to gethostname, so we don't bother.\n * @ignore\n */\nvar MACHINE_ID = parseInt(Math.random() * 0xFFFFFF, 10);\n\n// Regular expression that checks for hex value\nvar checkForHexRegExp = new RegExp(\"^[0-9a-fA-F]{24}$\");\n\n/**\n* Create a new ObjectID instance\n*\n* @class\n* @param {(string|number)} id Can be a 24 byte hex string, 12 byte binary string or a Number.\n* @property {number} generationTime The generation time of this ObjectId instance\n* @return {ObjectID} instance of ObjectID.\n*/\nvar ObjectID = function ObjectID(id) {\n  if(!(this instanceof ObjectID)) return new ObjectID(id);\n  // Duck-typing to support ObjectId from different npm packages\n  if((id instanceof ObjectID) || (id && id.toHexString)) return id;\n\n  this._bsontype = 'ObjectID';\n  var __id = null;\n  var valid = ObjectID.isValid(id);\n\n  // Throw an error if it's not a valid setup\n  if(!valid && id != null){\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n  } else if(valid && typeof id == 'string' && id.length == 24) {\n    return ObjectID.createFromHexString(id);\n  } else if(id == null || typeof id == 'number') {\n    // convert to 12 byte binary string\n    this.id = this.generate(id);\n  } else if(id != null && id.length === 12) {\n    // assume 12 byte string\n    this.id = id;\n  }\n\n  if(ObjectID.cacheHexString) this.__id = this.toHexString();\n};\n\n// Allow usage of ObjectId as well as ObjectID\nvar ObjectId = ObjectID;\n\n// Precomputed hex table enables speedy hex string conversion\nvar hexTable = [];\nfor (var i = 0; i < 256; i++) {\n  hexTable[i] = (i <= 15 ? '0' : '') + i.toString(16);\n}\n\n/**\n* Return the ObjectID id as a 24 byte hex string representation\n*\n* @method\n* @return {string} return the 24 byte hex string representation.\n*/\nObjectID.prototype.toHexString = function() {\n  if(ObjectID.cacheHexString && this.__id) return this.__id;\n\n  var hexString = '';\n\n  for (var i = 0; i < this.id.length; i++) {\n    hexString += hexTable[this.id.charCodeAt(i)];\n  }\n\n  if(ObjectID.cacheHexString) this.__id = hexString;\n  return hexString;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.get_inc = function() {\n  return ObjectID.index = (ObjectID.index + 1) % 0xFFFFFF;\n};\n\n/**\n* Update the ObjectID index used in generating new ObjectID's on the driver\n*\n* @method\n* @return {number} returns next index value.\n* @ignore\n*/\nObjectID.prototype.getInc = function() {\n  return this.get_inc();\n};\n\n/**\n* Generate a 12 byte id string used in ObjectID's\n*\n* @method\n* @param {number} [time] optional parameter allowing to pass in a second based timestamp.\n* @return {string} return the 12 byte id binary string.\n*/\nObjectID.prototype.generate = function(time) {\n  if ('number' != typeof time) {\n    time = parseInt(Date.now()/1000,10);\n  }\n\n  var time4Bytes = BinaryParser.encodeInt(time, 32, true, true);\n  /* for time-based ObjectID the bytes following the time will be zeroed */\n  var machine3Bytes = BinaryParser.encodeInt(MACHINE_ID, 24, false);\n  var pid2Bytes = BinaryParser.fromShort((typeof process === 'undefined' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF);\n  var index3Bytes = BinaryParser.encodeInt(this.get_inc(), 24, false, true);\n\n  return time4Bytes + machine3Bytes + pid2Bytes + index3Bytes;\n};\n\n/**\n* Converts the id into a 24 byte hex string for printing\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toString = function() {\n  return this.toHexString();\n};\n\n/**\n* Converts to a string representation of this Id.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.inspect = ObjectID.prototype.toString;\n\n/**\n* Converts to its JSON representation.\n*\n* @return {String} return the 24 byte hex string representation.\n* @ignore\n*/\nObjectID.prototype.toJSON = function() {\n  return this.toHexString();\n};\n\n/**\n* Compares the equality of this ObjectID with `otherID`.\n*\n* @method\n* @param {object} otherID ObjectID instance to compare against.\n* @return {boolean} the result of comparing two ObjectID's\n*/\nObjectID.prototype.equals = function equals (otherID) {\n  var id;\n\n  if(otherID != null && (otherID instanceof ObjectID || otherID.toHexString)) {\n    id = otherID.id;\n  } else if(typeof otherID == 'string' && ObjectID.isValid(otherID)) {\n    id = ObjectID.createFromHexString(otherID).id;\n  } else {\n    return false;\n  }\n\n  return this.id === id;\n}\n\n/**\n* Returns the generation date (accurate up to the second) that this ID was generated.\n*\n* @method\n* @return {date} the generation date\n*/\nObjectID.prototype.getTimestamp = function() {\n  var timestamp = new Date();\n  timestamp.setTime(Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true)) * 1000);\n  return timestamp;\n}\n\n/**\n* @ignore\n*/\nObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\n\n/**\n* @ignore\n*/\nObjectID.createPk = function createPk () {\n  return new ObjectID();\n};\n\n/**\n* Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n*\n* @method\n* @param {number} time an integer number representing a number of seconds.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromTime = function createFromTime (time) {\n  var id = BinaryParser.encodeInt(time, 32, true, true) +\n           BinaryParser.encodeInt(0, 64, true, true);\n  return new ObjectID(id);\n};\n\n/**\n* Creates an ObjectID from a hex string representation of an ObjectID.\n*\n* @method\n* @param {string} hexString create a ObjectID from a passed in 24 byte hexstring.\n* @return {ObjectID} return the created ObjectID\n*/\nObjectID.createFromHexString = function createFromHexString (hexString) {\n  // Throw an error if it's not a valid setup\n  if(typeof hexString === 'undefined' || hexString != null && hexString.length != 24)\n    throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n  var len = hexString.length;\n\n  if(len > 12*2) {\n    throw new Error('Id cannot be longer than 12 bytes');\n  }\n\n  var result = ''\n    , string\n    , number;\n\n  for (var index = 0; index < len; index += 2) {\n    string = hexString.substr(index, 2);\n    number = parseInt(string, 16);\n    result += BinaryParser.fromByte(number);\n  }\n\n  return new ObjectID(result, hexString);\n};\n\n/**\n* Checks if a value is a valid bson ObjectId\n*\n* @method\n* @return {boolean} return true if the value is a valid bson ObjectId, return false otherwise.\n*/\nObjectID.isValid = function isValid(id) {\n  if(id == null) return false;\n\n  if(typeof id == 'number')\n    return true;\n  if(typeof id == 'string') {\n    return id.length == 12 || (id.length == 24 && checkForHexRegExp.test(id));\n  }\n  if(id instanceof ObjectID) {\n    return true;\n  }\n  // Duck-Typing detection of ObjectId like objects\n  if(id.toHexString) {\n    return id.id.length == 12 || (id.id.length == 24 && checkForHexRegExp.test(id.id));\n  }\n  return false;\n};\n\n/**\n* @ignore\n*/\nObject.defineProperty(ObjectID.prototype, \"generationTime\", {\n   enumerable: true\n , get: function () {\n     return Math.floor(BinaryParser.decodeInt(this.id.substring(0,4), 32, true, true));\n   }\n , set: function (value) {\n     var value = BinaryParser.encodeInt(value, 32, true, true);\n     this.id = value + this.id.substr(4);\n     // delete this.__id;\n     this.toHexString();\n   }\n});\n\n/**\n * Expose.\n */\nmodule.exports = ObjectID;\nmodule.exports.ObjectID = ObjectID;\nmodule.exports.ObjectId = ObjectID;\n"]}