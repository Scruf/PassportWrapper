{"version":3,"sources":["code.js"],"names":[],"mappings":";;;;;;;;AAQA,IAAI,OAAO,SAAS,IAAT,CAAc,IAAd,EAAoB,KAApB,EAA2B;AACpC,MAAG,EAAE,gBAAgB,IAAhB,CAAF,EAAyB,OAAO,IAAI,IAAJ,CAAS,IAAT,EAAe,KAAf,CAAP,CAA5B;AACA,OAAK,SAAL,GAAiB,MAAjB,CAFoC;AAGpC,OAAK,IAAL,GAAY,IAAZ,CAHoC;AAIpC,OAAK,KAAL,GAAa,SAAS,IAAT,GAAgB,EAAhB,GAAqB,KAArB,CAJuB;CAA3B;;;;;AAUX,KAAK,SAAL,CAAe,MAAf,GAAwB,YAAW;AACjC,SAAO,EAAC,OAAM,KAAK,KAAL,EAAY,MAAK,KAAK,IAAL,EAA/B,CADiC;CAAX;;AAIxB,OAAO,OAAP,GAAiB,IAAjB;AACA,OAAO,OAAP,CAAe,IAAf,GAAsB,IAAtB","file":"code-compiled.js","sourcesContent":["/**\n * A class representation of the BSON Code type.\n *\n * @class\n * @param {(string|function)} code a string or function.\n * @param {Object} [scope] an optional scope for the function.\n * @return {Code}\n */\nvar Code = function Code(code, scope) {\n  if(!(this instanceof Code)) return new Code(code, scope);\n  this._bsontype = 'Code';\n  this.code = code;\n  this.scope = scope == null ? {} : scope;\n};\n\n/**\n * @ignore\n */\nCode.prototype.toJSON = function() {\n  return {scope:this.scope, code:this.code};\n}\n\nmodule.exports = Code;\nmodule.exports.Code = Code;"]}