{"version":3,"sources":["db_ref.js"],"names":[],"mappings":";;;;;;;;;AASA,SAAS,KAAT,CAAe,SAAf,EAA0B,GAA1B,EAA+B,EAA/B,EAAmC;AACjC,MAAG,EAAE,gBAAgB,KAAhB,CAAF,EAA0B,OAAO,IAAI,KAAJ,CAAU,SAAV,EAAqB,GAArB,EAA0B,EAA1B,CAAP,CAA7B;;AAEA,OAAK,SAAL,GAAiB,OAAjB,CAHiC;AAIjC,OAAK,SAAL,GAAiB,SAAjB,CAJiC;AAKjC,OAAK,GAAL,GAAW,GAAX,CALiC;AAMjC,OAAK,EAAL,GAAU,EAAV,CANiC;CAAnC;;;;;;AAaA,MAAM,SAAN,CAAgB,MAAhB,GAAyB,YAAW;AAClC,SAAO;AACL,YAAO,KAAK,SAAL;AACP,WAAM,KAAK,GAAL;AACN,WAAM,KAAK,EAAL,IAAW,IAAX,GAAkB,EAAlB,GAAuB,KAAK,EAAL;GAH/B,CADkC;CAAX;;AAQzB,OAAO,OAAP,GAAiB,KAAjB;AACA,OAAO,OAAP,CAAe,KAAf,GAAuB,KAAvB","file":"db_ref-compiled.js","sourcesContent":["/**\n * A class representation of the BSON DBRef type.\n *\n * @class\n * @param {string} namespace the collection name.\n * @param {ObjectID} oid the reference ObjectID.\n * @param {string} [db] optional db name, if omitted the reference is local to the current db.\n * @return {DBRef}\n */\nfunction DBRef(namespace, oid, db) {\n  if(!(this instanceof DBRef)) return new DBRef(namespace, oid, db);\n  \n  this._bsontype = 'DBRef';\n  this.namespace = namespace;\n  this.oid = oid;\n  this.db = db;\n};\n\n/**\n * @ignore\n * @api private\n */\nDBRef.prototype.toJSON = function() {\n  return {\n    '$ref':this.namespace,\n    '$id':this.oid,\n    '$db':this.db == null ? '' : this.db\n  };\n}\n\nmodule.exports = DBRef;\nmodule.exports.DBRef = DBRef;"]}