{"version":3,"sources":["long.js"],"names":[],"mappings":"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","file":"long-compiled.js","sourcesContent":["// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// Copyright 2009 Google Inc. All Rights Reserved\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"Long\". This\n * implementation is derived from LongLib in GWT.\n *\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a Long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @class\n * @param {number} low  the low (signed) 32 bits of the Long.\n * @param {number} high the high (signed) 32 bits of the Long.\n * @return {Long}\n */\nfunction Long(low, high) {\n  if(!(this instanceof Long)) return new Long(low, high);\n  \n  this._bsontype = 'Long';\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @ignore\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n/**\n * Return the int value.\n *\n * @method\n * @return {number} the value, assuming it is a 32-bit integer.\n */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n/**\n * Return the Number value.\n *\n * @method\n * @return {number} the closest floating-point representation to this value.\n */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/**\n * Return the JSON value.\n *\n * @method\n * @return {string} the JSON representation.\n */\nLong.prototype.toJSON = function() {\n  return this.toString();\n}\n\n/**\n * Return the String value.\n *\n * @method\n * @param {number} [opt_radix] the radix in which the text should be written.\n * @return {string} the textual representation of this value.\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Return the high 32-bits value.\n *\n * @method\n * @return {number} the high 32-bits as a signed value.\n */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n/**\n * Return the low 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as a signed value.\n */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n/**\n * Return the low unsigned 32-bits value.\n *\n * @method\n * @return {number} the low 32-bits as an unsigned value.\n */\nLong.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n/**\n * Returns the number of bits needed to represent the absolute value of this Long.\n *\n * @method\n * @return {number} Returns the number of bits needed to represent the absolute value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n/**\n * Return whether this value is zero.\n *\n * @method\n * @return {boolean} whether this value is zero.\n */\nLong.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n/**\n * Return whether this value is negative.\n *\n * @method\n * @return {boolean} whether this value is negative.\n */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n/**\n * Return whether this value is odd.\n *\n * @method\n * @return {boolean} whether this value is odd.\n */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n/**\n * Return whether this Long equals the other\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long equals the other\n */\nLong.prototype.equals = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n/**\n * Return whether this Long does not equal the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n/**\n * Return whether this Long is less than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n/**\n * Return whether this Long is less than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n/**\n * Return whether this Long is greater than the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n/**\n * Return whether this Long is greater than or equal to the other.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n/**\n * Compares this Long with the given one.\n *\n * @method\n * @param {Long} other Long to compare against.\n * @return {boolean} 0 if they are the same, 1 if the this is greater, and -1 if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * The negation of this value.\n *\n * @method\n * @return {Long} the negation of this value.\n */\nLong.prototype.negate = function() {\n  if (this.equals(Long.MIN_VALUE)) {\n    return Long.MIN_VALUE;\n  } else {\n    return this.not().add(Long.ONE);\n  }\n};\n\n/**\n * Returns the sum of this and the given Long.\n *\n * @method\n * @param {Long} other Long to add to this one.\n * @return {Long} the sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns the difference of this and the given Long.\n *\n * @method\n * @param {Long} other Long to subtract from this.\n * @return {Long} the difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n/**\n * Returns the product of this and the given Long.\n *\n * @method\n * @param {Long} other Long to multiply with this.\n * @return {Long} the product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.ZERO;\n  } else if (other.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both Longs are small, use float multiplication\n  if (this.lessThan(Long.TWO_PWR_24_) &&\n      other.lessThan(Long.TWO_PWR_24_)) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each Long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n/**\n * Returns this Long divided by the given one.\n *\n * @method\n * @param {Long} other Long by which to divide.\n * @return {Long} this Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.ZERO;\n  }\n\n  if (this.equals(Long.MIN_VALUE)) {\n    if (other.equals(Long.ONE) ||\n        other.equals(Long.NEG_ONE)) {\n      return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.ZERO)) {\n        return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.MIN_VALUE)) {\n    return Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long modulo the given one.\n *\n * @method\n * @param {Long} other Long by which to mod.\n * @return {Long} this Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n/**\n * The bitwise-NOT of this value.\n *\n * @method\n * @return {Long} the bitwise-NOT of this value.\n */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to AND.\n * @return {Long} the bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);\n};\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to OR.\n * @return {Long} the bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);\n};\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n *\n * @method\n * @param {Long} other the Long with which to XOR.\n * @return {Long} the bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(\n                 low << numBits,\n                 (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(\n                 (low >>> numBits) | (high << (32 - numBits)),\n                 high >> numBits);\n    } else {\n      return Long.fromBits(\n                 high >> (numBits - 32),\n                 high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with the new top bits matching the current sign bit.\n *\n * @method\n * @param {number} numBits the number of bits by which to shift.\n * @return {Long} this shifted to the right by the given amount, with zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(\n                 (low >>> numBits) | (high << (32 - numBits)),\n                 high >>> numBits);\n    } else if (numBits == 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n *\n * @method\n * @param {number} value the 32-bit integer in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Long.INT_CACHE_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Long.INT_CACHE_[value] = obj;\n  }\n  return obj;\n};\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n *\n * @method\n * @param {number} value the number in question.\n * @return {Long} the corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value) || !isFinite(value)) {\n    return Long.ZERO;\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.MIN_VALUE;\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long(\n               (value % Long.TWO_PWR_32_DBL_) | 0,\n               (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating the given high and low bits. Each is assumed to use 32 bits.\n *\n * @method\n * @param {number} lowBits the low 32-bits.\n * @param {number} highBits the high 32-bits.\n * @return {Long} the corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n/**\n * Returns a Long representation of the given string, written using the given radix.\n *\n * @method\n * @param {string} str the textual representation of the Long.\n * @param {number} opt_radix the radix in which the text is written.\n * @return {Long} the corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {Object}\n * @ignore\n */\nLong.INT_CACHE_ = {};\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_24_DBL_ = 1 << 24;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_32_DBL_ = Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_31_DBL_ = Long.TWO_PWR_32_DBL_ / 2;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_48_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_16_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_64_DBL_ = Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n/**\n * @type {number}\n * @ignore\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n/** @type {Long} */\nLong.ZERO = Long.fromInt(0);\n\n/** @type {Long} */\nLong.ONE = Long.fromInt(1);\n\n/** @type {Long} */\nLong.NEG_ONE = Long.fromInt(-1);\n\n/** @type {Long} */\nLong.MAX_VALUE =\n    Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n/** @type {Long} */\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0);\n\n/**\n * @type {Long}\n * @ignore\n */\nLong.TWO_PWR_24_ = Long.fromInt(1 << 24);\n\n/**\n * Expose.\n */\nmodule.exports = Long;\nmodule.exports.Long = Long;"]}