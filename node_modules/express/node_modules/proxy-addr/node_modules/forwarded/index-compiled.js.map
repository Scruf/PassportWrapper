{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;AAUA,OAAO,OAAP,GAAiB,SAAjB;;;;;;;;;AASA,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AACtB,MAAI,CAAC,GAAD,EAAM;AACR,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN,CADQ;GAAV;;;AADsB,MAMlB,aAAa,CAAC,IAAI,OAAJ,CAAY,iBAAZ,KAAkC,EAAlC,CAAD,CACd,KADc,CACR,OADQ,EAEd,MAFc,CAEP,OAFO,EAGd,OAHc,EAAb,CANkB;AAUtB,MAAI,aAAa,IAAI,UAAJ,CAAe,aAAf,CAVK;AAWtB,MAAI,QAAQ,CAAC,UAAD,EAAa,MAAb,CAAoB,UAApB,CAAR;;;AAXkB,SAcf,KAAP,CAdsB;CAAxB","file":"index-compiled.js","sourcesContent":["/*!\n * forwarded\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = forwarded\n\n/**\n * Get all addresses in the request, using the `X-Forwarded-For` header.\n *\n * @param {Object} req\n * @api public\n */\n\nfunction forwarded(req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  // simple header parsing\n  var proxyAddrs = (req.headers['x-forwarded-for'] || '')\n    .split(/ *, */)\n    .filter(Boolean)\n    .reverse()\n  var socketAddr = req.connection.remoteAddress\n  var addrs = [socketAddr].concat(proxyAddrs)\n\n  // return all addresses\n  return addrs\n}\n"]}