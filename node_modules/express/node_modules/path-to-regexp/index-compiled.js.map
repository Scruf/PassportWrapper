{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"]}