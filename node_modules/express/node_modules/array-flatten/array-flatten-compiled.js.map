{"version":3,"sources":["array-flatten.js"],"names":[],"mappings":"AAAA;;;;;;AAKA,OAAO,OAAP,GAAiB,YAAjB;;;;;;;;;;AAUA,SAAS,gBAAT,CAA2B,KAA3B,EAAkC,MAAlC,EAA0C,KAA1C,EAAiD;AAC/C,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;AACrC,QAAI,QAAQ,MAAM,CAAN,CAAR,CADiC;;AAGrC,QAAI,QAAQ,CAAR,IAAa,MAAM,OAAN,CAAc,KAAd,CAAb,EAAmC;AACrC,uBAAiB,KAAjB,EAAwB,MAAxB,EAAgC,QAAQ,CAAR,CAAhC,CADqC;KAAvC,MAEO;AACL,aAAO,IAAP,CAAY,KAAZ,EADK;KAFP;GAHF;;AAUA,SAAO,MAAP,CAX+C;CAAjD;;;;;;;;;AAqBA,SAAS,cAAT,CAAyB,KAAzB,EAAgC,MAAhC,EAAwC;AACtC,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;AACrC,QAAI,QAAQ,MAAM,CAAN,CAAR,CADiC;;AAGrC,QAAI,MAAM,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,qBAAe,KAAf,EAAsB,MAAtB,EADwB;KAA1B,MAEO;AACL,aAAO,IAAP,CAAY,KAAZ,EADK;KAFP;GAHF;;AAUA,SAAO,MAAP,CAXsC;CAAxC;;;;;;;;;AAqBA,SAAS,YAAT,CAAuB,KAAvB,EAA8B,KAA9B,EAAqC;AACnC,MAAI,SAAS,IAAT,EAAe;AACjB,WAAO,eAAe,KAAf,EAAsB,EAAtB,CAAP,CADiB;GAAnB;;AAIA,SAAO,iBAAiB,KAAjB,EAAwB,EAAxB,EAA4B,KAA5B,CAAP,CALmC;CAArC","file":"array-flatten-compiled.js","sourcesContent":["'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = arrayFlatten\n\n/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenWithDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nfunction arrayFlatten (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenWithDepth(array, [], depth)\n}\n"]}