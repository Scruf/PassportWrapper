{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * finalhandler\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('finalhandler')\nvar escapeHtml = require('escape-html')\nvar http = require('http')\nvar onFinished = require('on-finished')\nvar unpipe = require('unpipe')\n\n/**\n * Module variables.\n * @private\n */\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\nvar isFinished = onFinished.isFinished\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = finalhandler\n\n/**\n * Create a function to handle the final response.\n *\n * @param {Request} req\n * @param {Response} res\n * @param {Object} [options]\n * @return {Function}\n * @public\n */\n\nfunction finalhandler(req, res, options) {\n  var opts = options || {}\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development'\n\n  // get error callback\n  var onerror = opts.onerror\n\n  return function (err) {\n    var status = res.statusCode\n\n    // ignore 404 on in-flight response\n    if (!err && res._header) {\n      debug('cannot 404 after headers sent')\n      return\n    }\n\n    // unhandled error\n    if (err) {\n      // respect err.statusCode\n      if (err.statusCode) {\n        status = err.statusCode\n      }\n\n      // respect err.status\n      if (err.status) {\n        status = err.status\n      }\n\n      // default status code to 500\n      if (!status || status < 400) {\n        status = 500\n      }\n\n      // production gets a basic error message\n      var msg = env === 'production'\n        ? http.STATUS_CODES[status]\n        : err.stack || err.toString()\n      msg = escapeHtml(msg)\n        .replace(/\\n/g, '<br>')\n        .replace(/  /g, ' &nbsp;') + '\\n'\n    } else {\n      status = 404\n      msg = 'Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl || req.url) + '\\n'\n    }\n\n    debug('default %s', status)\n\n    // schedule onerror callback\n    if (err && onerror) {\n      defer(onerror, err, req, res)\n    }\n\n    // cannot actually respond\n    if (res._header) {\n      return req.socket.destroy()\n    }\n\n    send(req, res, status, msg)\n  }\n}\n\n/**\n * Send response.\n *\n * @param {IncomingMessage} req\n * @param {OutgoingMessage} res\n * @param {number} status\n * @param {string} body\n * @private\n */\n\nfunction send(req, res, status, body) {\n  function write() {\n    res.statusCode = status\n\n    // security header for content sniffing\n    res.setHeader('X-Content-Type-Options', 'nosniff')\n\n    // standard headers\n    res.setHeader('Content-Type', 'text/html; charset=utf-8')\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))\n\n    if (req.method === 'HEAD') {\n      res.end()\n      return\n    }\n\n    res.end(body, 'utf8')\n  }\n\n  if (isFinished(req)) {\n    write()\n    return\n  }\n\n  // unpipe everything from the request\n  unpipe(req)\n\n  // flush the request\n  onFinished(req, write)\n  req.resume()\n}\n"]}