{"version":3,"sources":["mime.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,KAAK,QAAQ,IAAR,CAAL;;AAEJ,SAAS,IAAT,GAAgB;;AAEd,OAAK,KAAL,GAAa,OAAO,MAAP,CAAc,IAAd,CAAb;;;AAFc,MAKd,CAAK,UAAL,GAAkB,OAAO,MAAP,CAAc,IAAd,CAAlB,CALc;CAAhB;;;;;;;;;;;AAiBA,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAU,GAAV,EAAe;AACrC,OAAK,IAAI,IAAJ,IAAY,GAAjB,EAAsB;AACpB,QAAI,OAAO,IAAI,IAAJ,CAAP,CADgB;AAEpB,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AACpC,UAAI,QAAQ,GAAR,CAAY,UAAZ,IAA0B,KAAK,KAAL,CAAW,IAAX,CAA1B,EAA4C;AAC9C,gBAAQ,IAAR,CAAa,KAAK,QAAL,CAAc,OAAd,CAAsB,MAAtB,EAA8B,EAA9B,CAAb,EAAgD,cAAc,KAAK,CAAL,CAAd,GAAwB,wBAAxB,GAC9C,KAAK,KAAL,CAAW,IAAX,CAD8C,GAC3B,MAD2B,GAClB,IADkB,CAAhD,CAD8C;OAAhD;;AAKA,WAAK,KAAL,CAAW,KAAK,CAAL,CAAX,IAAsB,IAAtB,CANoC;KAAtC;;;AAFoB,QAYhB,CAAC,KAAK,UAAL,CAAgB,IAAhB,CAAD,EAAwB;AAC1B,WAAK,UAAL,CAAgB,IAAhB,IAAwB,KAAK,CAAL,CAAxB,CAD0B;KAA5B;GAZF;CADsB;;;;;;;;;;AA2BxB,KAAK,SAAL,CAAe,IAAf,GAAsB,UAAS,IAAT,EAAe;AACnC,OAAK,QAAL,GAAgB,IAAhB;;AADmC,MAG/B,MAAM,EAAN;MACA,UAAU,GAAG,YAAH,CAAgB,IAAhB,EAAsB,OAAtB,CAAV;MACA,QAAQ,QAAQ,KAAR,CAAc,SAAd,CAAR,CAL+B;;AAOnC,QAAM,OAAN,CAAc,UAAS,IAAT,EAAe;;AAE3B,QAAI,SAAS,KAAK,OAAL,CAAa,mBAAb,EAAkC,EAAlC,EAAsC,KAAtC,CAA4C,KAA5C,CAAT,CAFuB;AAG3B,QAAI,OAAO,KAAP,EAAJ,IAAsB,MAAtB,CAH2B;GAAf,CAAd,CAPmC;;AAanC,OAAK,MAAL,CAAY,GAAZ,EAbmC;;AAenC,OAAK,QAAL,GAAgB,IAAhB,CAfmC;CAAf;;;;;AAqBtB,KAAK,SAAL,CAAe,MAAf,GAAwB,UAAS,IAAT,EAAe,QAAf,EAAyB;AAC/C,MAAI,MAAM,KAAK,OAAL,CAAa,YAAb,EAA2B,EAA3B,EAA+B,WAA/B,EAAN,CAD2C;;AAG/C,SAAO,KAAK,KAAL,CAAW,GAAX,KAAmB,QAAnB,IAA+B,KAAK,YAAL,CAHS;CAAzB;;;;;AASxB,KAAK,SAAL,CAAe,SAAf,GAA2B,UAAS,QAAT,EAAmB;AAC5C,MAAI,OAAO,SAAS,KAAT,CAAe,yBAAf,EAA0C,CAA1C,EAA6C,WAA7C,EAAP,CADwC;AAE5C,SAAO,KAAK,UAAL,CAAgB,IAAhB,CAAP,CAF4C;CAAnB;;;AAM3B,IAAI,OAAO,IAAI,IAAJ,EAAP;;;AAGJ,KAAK,MAAL,CAAY,QAAQ,cAAR,CAAZ;;;AAGA,KAAK,YAAL,GAAoB,KAAK,MAAL,CAAY,KAAZ,CAApB;;;;;;AAMA,KAAK,IAAL,GAAY,IAAZ;;;;;AAKA,KAAK,QAAL,GAAgB;AACd,UAAQ,UAAS,QAAT,EAAmB,QAAnB,EAA6B;;AAEnC,WAAO,WAAY,IAAZ,CAAiB,QAAjB,IAA6B,OAA7B,GAAuC,QAAvC;MAF4B;GAA7B;CADV;;AAOA,OAAO,OAAP,GAAiB,IAAjB","file":"mime-compiled.js","sourcesContent":["var path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts]) {\n        console.warn(this._loading.replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\//).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n"]}