{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;AAIA,IAAI,SAAS,QAAQ,QAAR,CAAT;;;;;;;;;;;AAWJ,QAAQ,IAAR,GAAe,UAAS,GAAT,EAAc,MAAd,EAAqB;AAClC,MAAI,YAAY,OAAO,GAAP,EAAY,MAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN,CAA5B;AACA,MAAI,YAAY,OAAO,MAAP,EAAe,MAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN,CAA/B;AACA,SAAO,MAAM,GAAN,GAAY,OAChB,UADgB,CACL,QADK,EACK,MADL,EAEhB,MAFgB,CAET,GAFS,EAGhB,MAHgB,CAGT,QAHS,EAIhB,OAJgB,CAIR,MAJQ,EAIA,EAJA,CAAZ,CAH2B;CAArB;;;;;;;;;;;;AAoBf,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc,MAAd,EAAqB;AACpC,MAAI,YAAY,OAAO,GAAP,EAAY,MAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN,CAA5B;AACA,MAAI,YAAY,OAAO,MAAP,EAAe,MAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN,CAA/B;AACA,MAAI,MAAM,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAI,WAAJ,CAAgB,GAAhB,CAAb,CAAN;MACA,MAAM,QAAQ,IAAR,CAAa,GAAb,EAAkB,MAAlB,CAAN,CAJgC;;AAMpC,SAAO,KAAK,GAAL,KAAa,KAAK,GAAL,CAAb,GAAyB,GAAzB,GAA+B,KAA/B,CAN6B;CAArB;;;;;;AAajB,SAAS,IAAT,CAAc,GAAd,EAAkB;AAChB,SAAO,OAAO,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,GAAjC,EAAsC,MAAtC,CAA6C,KAA7C,CAAP,CADgB;CAAlB","file":"index-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n"]}