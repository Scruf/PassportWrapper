{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/*!\n * accepts\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Negotiator = require('negotiator')\nvar mime = require('mime-types')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Accepts\n\n/**\n * Create a new Accepts object for the given req.\n *\n * @param {object} req\n * @public\n */\n\nfunction Accepts(req) {\n  if (!(this instanceof Accepts))\n    return new Accepts(req)\n\n  this.headers = req.headers\n  this.negotiator = new Negotiator(req)\n}\n\n/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} types...\n * @return {String|Array|Boolean}\n * @public\n */\n\nAccepts.prototype.type =\nAccepts.prototype.types = function (types_) {\n  var types = types_\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i]\n    }\n  }\n\n  // no types, return all requested types\n  if (!types || types.length === 0) {\n    return this.negotiator.mediaTypes()\n  }\n\n  if (!this.headers.accept) return types[0];\n  var mimes = types.map(extToMime);\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));\n  var first = accepts[0];\n  if (!first) return false;\n  return types[mimes.indexOf(first)];\n}\n\n/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encodings...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.encoding =\nAccepts.prototype.encodings = function (encodings_) {\n  var encodings = encodings_\n\n  // support flattened arguments\n  if (encodings && !Array.isArray(encodings)) {\n    encodings = new Array(arguments.length)\n    for (var i = 0; i < encodings.length; i++) {\n      encodings[i] = arguments[i]\n    }\n  }\n\n  // no encodings, return all requested encodings\n  if (!encodings || encodings.length === 0) {\n    return this.negotiator.encodings()\n  }\n\n  return this.negotiator.encodings(encodings)[0] || false\n}\n\n/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charsets...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.charset =\nAccepts.prototype.charsets = function (charsets_) {\n  var charsets = charsets_\n\n  // support flattened arguments\n  if (charsets && !Array.isArray(charsets)) {\n    charsets = new Array(arguments.length)\n    for (var i = 0; i < charsets.length; i++) {\n      charsets[i] = arguments[i]\n    }\n  }\n\n  // no charsets, return all requested charsets\n  if (!charsets || charsets.length === 0) {\n    return this.negotiator.charsets()\n  }\n\n  return this.negotiator.charsets(charsets)[0] || false\n}\n\n/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} langs...\n * @return {Array|String}\n * @public\n */\n\nAccepts.prototype.lang =\nAccepts.prototype.langs =\nAccepts.prototype.language =\nAccepts.prototype.languages = function (languages_) {\n  var languages = languages_\n\n  // support flattened arguments\n  if (languages && !Array.isArray(languages)) {\n    languages = new Array(arguments.length)\n    for (var i = 0; i < languages.length; i++) {\n      languages[i] = arguments[i]\n    }\n  }\n\n  // no languages, return all requested languages\n  if (!languages || languages.length === 0) {\n    return this.negotiator.languages()\n  }\n\n  return this.negotiator.languages(languages)[0] || false\n}\n\n/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction extToMime(type) {\n  return type.indexOf('/') === -1\n    ? mime.lookup(type)\n    : type\n}\n\n/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction validMime(type) {\n  return typeof type === 'string';\n}\n"]}