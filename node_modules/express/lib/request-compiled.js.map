{"version":3,"sources":["request.js"],"names":[],"mappings":"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","file":"request-compiled.js","sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n */\n\nvar req = exports = module.exports = {\n  __proto__: http.IncomingMessage.prototype\n};\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field,\n * capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require\n * knowledge of your resource length. In\n * the case of a byte range this is of course\n * the total number of bytes. If the Range\n * header field is not given `null` is returned,\n * `-1` when unsatisfiable, `-2` when syntactically invalid.\n *\n * NOTE: remember that ranges are inclusive, so\n * for example \"Range: users=0-3\" should respond\n * with 4 users when available, not 3.\n *\n * @param {Number} size\n * @return {Array}\n * @public\n */\n\nreq.range = function(size){\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  proto = this.get('X-Forwarded-Proto') || proto;\n  return proto.split(/\\s*,\\s*/)[0];\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol == 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n  return addrs.slice(1).reverse();\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var s = this.res.statusCode;\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' != method && 'HEAD' != method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((s >= 200 && s < 300) || 304 == s) {\n    return fresh(this.headers, (this.res._headers || {}));\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n};\n"]}