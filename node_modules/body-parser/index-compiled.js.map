{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;;AAOA,IAAI,YAAY,QAAQ,MAAR,EAAgB,aAAhB,CAAZ;;;;;;;AAOJ,IAAI,UAAU,OAAO,MAAP,CAAc,IAAd,CAAV;;;;;;;;;;;;;;;;AAgBJ,UAAU,OAAO,OAAP,GAAiB,UAAU,QAAV,CAAmB,UAAnB,EACzB,wDADyB,CAAjB;;;;;;;AAQV,OAAO,cAAP,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACrC,gBAAc,IAAd;AACA,cAAY,IAAZ;AACA,OAAK,mBAAmB,MAAnB,CAAL;CAHF;;;;;;;AAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,KAA/B,EAAsC;AACpC,gBAAc,IAAd;AACA,cAAY,IAAZ;AACA,OAAK,mBAAmB,KAAnB,CAAL;CAHF;;;;;;;AAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACrC,gBAAc,IAAd;AACA,cAAY,IAAZ;AACA,OAAK,mBAAmB,MAAnB,CAAL;CAHF;;;;;;;AAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AAC3C,gBAAc,IAAd;AACA,cAAY,IAAZ;AACA,OAAK,mBAAmB,YAAnB,CAAL;CAHF;;;;;;;;;;;AAeA,SAAS,UAAT,CAAoB,OAApB,EAA4B;AAC1B,MAAI,OAAO,EAAP;;;AADsB,MAItB,OAAJ,EAAa;AACX,SAAK,IAAI,IAAJ,IAAY,OAAjB,EAA0B;AACxB,UAAI,WAAW,IAAX,EAAiB;AACnB,aAAK,IAAL,IAAa,QAAQ,IAAR,CAAb,CADmB;OAArB;KADF;GADF;;AAQA,MAAI,cAAc,QAAQ,UAAR,CAAmB,IAAnB,CAAd,CAZsB;AAa1B,MAAI,QAAQ,QAAQ,IAAR,CAAa,IAAb,CAAR,CAbsB;;AAe1B,SAAO,SAAS,UAAT,CAAoB,GAApB,EAAyB,GAAzB,EAA8B,IAA9B,EAAoC;AACzC,UAAM,GAAN,EAAW,GAAX,EAAgB,UAAS,GAAT,EAAa;AAC3B,UAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP,CAAT;AACA,kBAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAF2B;KAAb,CAAhB,CADyC;GAApC,CAfmB;CAA5B;;;;;;;AA4BA,SAAS,kBAAT,CAA4B,IAA5B,EAAkC;AAChC,SAAO,SAAS,GAAT,GAAe;AACpB,WAAO,WAAW,IAAX,CAAP,CADoB;GAAf,CADyB;CAAlC;;;;;;;AAWA,SAAS,UAAT,CAAoB,UAApB,EAAgC;AAC9B,MAAI,SAAS,QAAQ,UAAR,CAAT,CAD0B;;AAG9B,MAAI,WAAW,SAAX,EAAsB;AACxB,WAAO,MAAP,CADwB;GAA1B;;;AAH8B,UAQtB,UAAR;AACE,SAAK,MAAL;AACE,eAAS,QAAQ,kBAAR,CAAT,CADF;AAEE,YAFF;AADF,SAIO,KAAL;AACE,eAAS,QAAQ,iBAAR,CAAT,CADF;AAEE,YAFF;AAJF,SAOO,MAAL;AACE,eAAS,QAAQ,kBAAR,CAAT,CADF;AAEE,YAFF;AAPF,SAUO,YAAL;AACE,eAAS,QAAQ,wBAAR,CAAT,CADF;AAEE,YAFF;AAVF;;;AAR8B,SAwBvB,QAAQ,UAAR,IAAsB,MAAtB,CAxBuB;CAAhC","file":"index-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('body-parser')\n\n/**\n * Cache of loaded parsers.\n * @private\n */\n\nvar parsers = Object.create(null)\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = deprecate.function(bodyParser,\n  'bodyParser: use individual json/urlencoded middlewares')\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser(options){\n  var opts = {}\n\n  // exclude type option\n  if (options) {\n    for (var prop in options) {\n      if ('type' !== prop) {\n        opts[prop] = options[prop]\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts)\n  var _json = exports.json(opts)\n\n  return function bodyParser(req, res, next) {\n    _json(req, res, function(err){\n      if (err) return next(err);\n      _urlencoded(req, res, next);\n    });\n  }\n}\n\n/**\n * Create a getter for loading a parser.\n * @private\n */\n\nfunction createParserGetter(name) {\n  return function get() {\n    return loadParser(name)\n  }\n}\n\n/**\n * Load a parser module.\n * @private\n */\n\nfunction loadParser(parserName) {\n  var parser = parsers[parserName]\n\n  if (parser !== undefined) {\n    return parser\n  }\n\n  // this uses a switch for static require analysis\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json')\n      break\n    case 'raw':\n      parser = require('./lib/types/raw')\n      break\n    case 'text':\n      parser = require('./lib/types/text')\n      break\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded')\n      break\n  }\n\n  // store to prevent invoking require()\n  return parsers[parserName] = parser\n}\n"]}