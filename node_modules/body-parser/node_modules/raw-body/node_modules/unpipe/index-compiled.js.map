{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;;AAOA,OAAO,OAAP,GAAiB,MAAjB;;;;;;;AAOA,SAAS,oBAAT,CAA8B,MAA9B,EAAsC;AACpC,MAAI,YAAY,OAAO,SAAP,CAAiB,MAAjB,CAAZ,CADgC;;AAGpC,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,UAAU,MAAV,EAAkB,GAAtC,EAA2C;AACzC,QAAI,UAAU,CAAV,EAAa,IAAb,KAAsB,QAAtB,EAAgC;AAClC,aAAO,IAAP,CADkC;KAApC;GADF;;AAMA,SAAO,KAAP,CAToC;CAAtC;;;;;;;;;AAmBA,SAAS,MAAT,CAAgB,MAAhB,EAAwB;AACtB,MAAI,CAAC,MAAD,EAAS;AACX,UAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN,CADW;GAAb;;AAIA,MAAI,OAAO,OAAO,MAAP,KAAkB,UAAzB,EAAqC;;AAEvC,WAAO,MAAP,GAFuC;AAGvC,WAHuC;GAAzC;;;AALsB,MAYlB,CAAC,qBAAqB,MAArB,CAAD,EAA+B;AACjC,WADiC;GAAnC;;AAIA,MAAI,QAAJ,CAhBsB;AAiBtB,MAAI,YAAY,OAAO,SAAP,CAAiB,OAAjB,CAAZ,CAjBkB;;AAmBtB,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,UAAU,MAAV,EAAkB,GAAtC,EAA2C;AACzC,eAAW,UAAU,CAAV,CAAX,CADyC;;AAGzC,QAAI,SAAS,IAAT,KAAkB,SAAlB,IAA+B,SAAS,IAAT,KAAkB,SAAlB,EAA6B;AAC9D,eAD8D;KAAhE;;;AAHyC,YAQzC,CAAS,IAAT,CAAc,MAAd,EARyC;GAA3C;CAnBF","file":"index-compiled.js","sourcesContent":["/*!\n * unpipe\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = unpipe\n\n/**\n * Determine if there are Node.js pipe-like data listeners.\n * @private\n */\n\nfunction hasPipeDataListeners(stream) {\n  var listeners = stream.listeners('data')\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].name === 'ondata') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Unpipe a stream from all destinations.\n *\n * @param {object} stream\n * @public\n */\n\nfunction unpipe(stream) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  if (typeof stream.unpipe === 'function') {\n    // new-style\n    stream.unpipe()\n    return\n  }\n\n  // Node.js 0.8 hack\n  if (!hasPipeDataListeners(stream)) {\n    return\n  }\n\n  var listener\n  var listeners = stream.listeners('close')\n\n  for (var i = 0; i < listeners.length; i++) {\n    listener = listeners[i]\n\n    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {\n      continue\n    }\n\n    // invoke the listener\n    listener.call(stream)\n  }\n}\n"]}