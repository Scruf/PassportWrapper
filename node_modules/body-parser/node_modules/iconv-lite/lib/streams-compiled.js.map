{"version":3,"sources":["streams.js"],"names":[],"mappings":"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","file":"streams-compiled.js","sourcesContent":["\"use strict\"\n\nvar Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n"]}