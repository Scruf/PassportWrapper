{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\"use strict\"\n\nvar bomHandling = require('./bom-handling'),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = 'ï¿½';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = new Buffer(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = (''+encoding).toLowerCase().replace(/[^0-9a-z]|:\\d{4}$/g, \"\");\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\n"]}