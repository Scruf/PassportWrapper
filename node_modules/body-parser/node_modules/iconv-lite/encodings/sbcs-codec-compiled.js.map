{"version":3,"sources":["sbcs-codec.js"],"names":[],"mappings":"AAAA;;;;;AAKA,QAAQ,KAAR,GAAgB,SAAhB;AACA,SAAS,SAAT,CAAmB,YAAnB,EAAiC,KAAjC,EAAwC;AACpC,QAAI,CAAC,YAAD,EACA,MAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN,CADJ;;;AADoC,QAKhC,CAAC,aAAa,KAAb,IAAuB,aAAa,KAAb,CAAmB,MAAnB,KAA8B,GAA9B,IAAqC,aAAa,KAAb,CAAmB,MAAnB,KAA8B,GAA9B,EAC7D,MAAM,IAAI,KAAJ,CAAU,eAAa,aAAa,IAAb,GAAkB,qDAA/B,CAAhB,CADJ;;AAGA,QAAI,aAAa,KAAb,CAAmB,MAAnB,KAA8B,GAA9B,EAAmC;AACnC,YAAI,cAAc,EAAd,CAD+B;AAEnC,aAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,GAAJ,EAAS,GAAzB,EACI,eAAe,OAAO,YAAP,CAAoB,CAApB,CAAf,CADJ;AAEA,qBAAa,KAAb,GAAqB,cAAc,aAAa,KAAb,CAJA;KAAvC;;AAOA,SAAK,SAAL,GAAiB,IAAI,MAAJ,CAAW,aAAa,KAAb,EAAoB,MAA/B,CAAjB;;;AAfoC,QAkBhC,YAAY,IAAI,MAAJ,CAAW,KAAX,CAAZ,CAlBgC;AAmBpC,cAAU,IAAV,CAAe,MAAM,qBAAN,CAA4B,UAA5B,CAAuC,CAAvC,CAAf,EAnBoC;;AAqBpC,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,aAAa,KAAb,CAAmB,MAAnB,EAA2B,GAA/C,EACI,UAAU,aAAa,KAAb,CAAmB,UAAnB,CAA8B,CAA9B,CAAV,IAA8C,CAA9C,CADJ;;AAGA,SAAK,SAAL,GAAiB,SAAjB,CAxBoC;CAAxC;;AA2BA,UAAU,SAAV,CAAoB,OAApB,GAA8B,WAA9B;AACA,UAAU,SAAV,CAAoB,OAApB,GAA8B,WAA9B;;AAGA,SAAS,WAAT,CAAqB,OAArB,EAA8B,KAA9B,EAAqC;AACjC,SAAK,SAAL,GAAiB,MAAM,SAAN,CADgB;CAArC;;AAIA,YAAY,SAAZ,CAAsB,KAAtB,GAA8B,UAAS,GAAT,EAAc;AACxC,QAAI,MAAM,IAAI,MAAJ,CAAW,IAAI,MAAJ,CAAjB,CADoC;AAExC,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,IAAI,MAAJ,EAAY,GAAhC,EACI,IAAI,CAAJ,IAAS,KAAK,SAAL,CAAe,IAAI,UAAJ,CAAe,CAAf,CAAf,CAAT,CADJ;;AAGA,WAAO,GAAP,CALwC;CAAd;;AAQ9B,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,YAAW,EAAX;;AAI5B,SAAS,WAAT,CAAqB,OAArB,EAA8B,KAA9B,EAAqC;AACjC,SAAK,SAAL,GAAiB,MAAM,SAAN,CADgB;CAArC;;AAIA,YAAY,SAAZ,CAAsB,KAAtB,GAA8B,UAAS,GAAT,EAAc;;AAExC,QAAI,YAAY,KAAK,SAAL,CAFwB;AAGxC,QAAI,SAAS,IAAI,MAAJ,CAAW,IAAI,MAAJ,GAAW,CAAX,CAApB,CAHoC;AAIxC,QAAI,OAAO,CAAP;QAAU,OAAO,CAAP,CAJ0B;AAKxC,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,IAAI,MAAJ,EAAY,GAAhC,EAAqC;AACjC,eAAO,IAAI,CAAJ,IAAO,CAAP,CAD0B,IAChB,GAAO,IAAE,CAAF,CADS;AAEjC,eAAO,IAAP,IAAe,UAAU,IAAV,CAAf,CAFiC;AAGjC,eAAO,OAAK,CAAL,CAAP,GAAiB,UAAU,OAAK,CAAL,CAA3B,CAHiC;KAArC;AAKA,WAAO,OAAO,QAAP,CAAgB,MAAhB,CAAP,CAVwC;CAAd;;AAa9B,YAAY,SAAZ,CAAsB,GAAtB,GAA4B,YAAW,EAAX","file":"sbcs-codec-compiled.js","sourcesContent":["\"use strict\"\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = new Buffer(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = new Buffer(65536);\n    encodeBuf.fill(iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = new Buffer(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n"]}