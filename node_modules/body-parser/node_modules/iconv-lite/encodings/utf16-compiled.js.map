{"version":3,"sources":["utf16.js"],"names":[],"mappings":"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","file":"utf16-compiled.js","sourcesContent":["\"use strict\"\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = new Buffer(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = new Buffer(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n"]}