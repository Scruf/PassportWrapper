{"version":3,"sources":["internal.js"],"names":[],"mappings":"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","file":"internal-compiled.js","sourcesContent":["\"use strict\"\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (new Buffer(\"eda080\", 'hex').toString().length == 3) {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return new Buffer(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return new Buffer(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return new Buffer(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = new Buffer(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n"]}