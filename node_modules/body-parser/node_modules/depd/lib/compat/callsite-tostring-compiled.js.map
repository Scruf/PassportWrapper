{"version":3,"sources":["callsite-tostring.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,OAAO,OAAP,GAAiB,gBAAjB;;;;;;AAMA,SAAS,oBAAT,CAA8B,QAA9B,EAAwC;AACtC,MAAI,QAAJ,CADsC;AAEtC,MAAI,eAAe,EAAf,CAFkC;;AAItC,MAAI,SAAS,QAAT,EAAJ,EAAyB;AACvB,mBAAe,QAAf,CADuB;GAAzB,MAEO,IAAI,SAAS,MAAT,EAAJ,EAAuB;AAC5B,eAAW,SAAS,wBAAT,EAAX,CAD4B;AAE5B,QAAI,CAAC,QAAD,EAAW;AACb,qBAAe,SAAS,aAAT,EAAf,CADa;KAAf;GAFK,MAKA;AACL,eAAW,SAAS,WAAT,EAAX,CADK;GALA;;AASP,MAAI,QAAJ,EAAc;AACZ,oBAAgB,QAAhB,CADY;;AAGZ,QAAI,aAAa,SAAS,aAAT,EAAb,CAHQ;AAIZ,QAAI,cAAc,IAAd,EAAoB;AACtB,sBAAgB,MAAM,UAAN,CADM;;AAGtB,UAAI,eAAe,SAAS,eAAT,EAAf,CAHkB;AAItB,UAAI,YAAJ,EAAkB;AAChB,wBAAgB,MAAM,YAAN,CADA;OAAlB;KAJF;GAJF;;AAcA,SAAO,gBAAgB,gBAAhB,CA7B+B;CAAxC;;;;;;AAoCA,SAAS,gBAAT,CAA0B,QAA1B,EAAoC;AAClC,MAAI,YAAY,IAAZ,CAD8B;AAElC,MAAI,eAAe,qBAAqB,QAArB,CAAf,CAF8B;AAGlC,MAAI,eAAe,SAAS,eAAT,EAAf,CAH8B;AAIlC,MAAI,gBAAgB,SAAS,aAAT,EAAhB,CAJ8B;AAKlC,MAAI,eAAe,EAAE,SAAS,UAAT,MAAyB,aAAzB,CAAF,CALe;AAMlC,MAAI,OAAO,EAAP,CAN8B;;AAQlC,MAAI,YAAJ,EAAkB;AAChB,QAAI,aAAa,SAAS,aAAT,EAAb,CADY;AAEhB,QAAI,WAAW,mBAAmB,QAAnB,CAAX,CAFY;;AAIhB,QAAI,YAAJ,EAAkB;AAChB,UAAI,YAAY,aAAa,OAAb,CAAqB,QAArB,MAAmC,CAAnC,EAAsC;AACpD,gBAAQ,WAAW,GAAX,CAD4C;OAAtD;;AAIA,cAAQ,YAAR,CALgB;;AAOhB,UAAI,cAAc,aAAa,WAAb,CAAyB,MAAM,UAAN,CAAzB,KAA+C,aAAa,MAAb,GAAsB,WAAW,MAAX,GAAoB,CAA1C,EAA6C;AAC5G,gBAAQ,UAAU,UAAV,GAAuB,GAAvB,CADoG;OAA9G;KAPF,MAUO;AACL,cAAQ,WAAW,GAAX,IAAkB,cAAc,aAAd,CAAlB,CADH;KAVP;GAJF,MAiBO,IAAI,aAAJ,EAAmB;AACxB,YAAQ,UAAU,gBAAgB,aAAhB,CAAV,CADgB;GAAnB,MAEA,IAAI,YAAJ,EAAkB;AACvB,YAAQ,YAAR,CADuB;GAAlB,MAEA;AACL,gBAAY,KAAZ,CADK;AAEL,YAAQ,YAAR,CAFK;GAFA;;AAOP,MAAI,SAAJ,EAAe;AACb,YAAQ,OAAO,YAAP,GAAsB,GAAtB,CADK;GAAf;;AAIA,SAAO,IAAP,CAtCkC;CAApC;;;;;;AA6CA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,MAAI,WAAW,IAAI,QAAJ,CADgB;AAE/B,SAAO,QAAC,CAAS,WAAT,IAAwB,SAAS,WAAT,CAAqB,IAArB,IAA8B,IAAvD,CAFwB;CAAjC","file":"callsite-tostring-compiled.js","sourcesContent":["/*!\n * depd\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = callSiteToString\n\n/**\n * Format a CallSite file location to a string.\n */\n\nfunction callSiteFileLocation(callSite) {\n  var fileName\n  var fileLocation = ''\n\n  if (callSite.isNative()) {\n    fileLocation = 'native'\n  } else if (callSite.isEval()) {\n    fileName = callSite.getScriptNameOrSourceURL()\n    if (!fileName) {\n      fileLocation = callSite.getEvalOrigin()\n    }\n  } else {\n    fileName = callSite.getFileName()\n  }\n\n  if (fileName) {\n    fileLocation += fileName\n\n    var lineNumber = callSite.getLineNumber()\n    if (lineNumber != null) {\n      fileLocation += ':' + lineNumber\n\n      var columnNumber = callSite.getColumnNumber()\n      if (columnNumber) {\n        fileLocation += ':' + columnNumber\n      }\n    }\n  }\n\n  return fileLocation || 'unknown source'\n}\n\n/**\n * Format a CallSite to a string.\n */\n\nfunction callSiteToString(callSite) {\n  var addSuffix = true\n  var fileLocation = callSiteFileLocation(callSite)\n  var functionName = callSite.getFunctionName()\n  var isConstructor = callSite.isConstructor()\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\n  var line = ''\n\n  if (isMethodCall) {\n    var methodName = callSite.getMethodName()\n    var typeName = getConstructorName(callSite)\n\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) !== 0) {\n        line += typeName + '.'\n      }\n\n      line += functionName\n\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\n        line += ' [as ' + methodName + ']'\n      }\n    } else {\n      line += typeName + '.' + (methodName || '<anonymous>')\n    }\n  } else if (isConstructor) {\n    line += 'new ' + (functionName || '<anonymous>')\n  } else if (functionName) {\n    line += functionName\n  } else {\n    addSuffix = false\n    line += fileLocation\n  }\n\n  if (addSuffix) {\n    line += ' (' + fileLocation + ')'\n  }\n\n  return line\n}\n\n/**\n * Get constructor name of reviver.\n */\n\nfunction getConstructorName(obj) {\n  var receiver = obj.receiver\n  return (receiver.constructor && receiver.constructor.name) || null\n}\n"]}