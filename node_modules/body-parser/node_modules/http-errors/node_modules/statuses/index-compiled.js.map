{"version":3,"sources":["index.js"],"names":[],"mappings":";AACA,IAAI,QAAQ,QAAQ,cAAR,CAAR;;AAEJ,OAAO,OAAP,GAAiB,MAAjB;;;AAGA,OAAO,KAAP,GAAe,OAAO,IAAP,CAAY,KAAZ,EAAmB,GAAnB,CAAuB,UAAU,IAAV,EAAgB;AACpD,SAAO,EAAC,CAAC,IAAD,CAD4C;AAEpD,MAAI,MAAM,MAAM,IAAN,CAAN,CAFgD;AAGpD,SAAO,IAAP,IAAe,GAAf,CAHoD;AAIpD,SAAO,GAAP,IAAc,OAAO,IAAI,WAAJ,EAAP,IAA4B,IAA5B,CAJsC;AAKpD,SAAO,IAAP,CALoD;CAAhB,CAAtC;;;AASA,OAAO,QAAP,GAAkB;AAChB,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;CAPF;;;AAWA,OAAO,KAAP,GAAe;AACb,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;CAHF;;;AAOA,OAAO,KAAP,GAAe;AACb,OAAK,IAAL;AACA,OAAK,IAAL;AACA,OAAK,IAAL;CAHF;;AAMA,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,MAAI,OAAO,IAAP,KAAgB,QAAhB,EAA0B;AAC5B,QAAI,CAAC,OAAO,IAAP,CAAD,EAAe,MAAM,IAAI,KAAJ,CAAU,0BAA0B,IAA1B,CAAhB,CAAnB;AACA,WAAO,IAAP,CAF4B;GAA9B;;AAKA,MAAI,OAAO,IAAP,KAAgB,QAAhB,EAA0B;AAC5B,UAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN,CAD4B;GAA9B;;;AANoB,MAWhB,IAAI,SAAS,IAAT,EAAe,EAAf,CAAJ,CAXgB;AAYpB,MAAI,CAAC,MAAM,CAAN,CAAD,EAAW;AACb,QAAI,CAAC,OAAO,CAAP,CAAD,EAAY,MAAM,IAAI,KAAJ,CAAU,0BAA0B,CAA1B,CAAhB,CAAhB;AACA,WAAO,CAAP,CAFa;GAAf;;AAKA,MAAI,OAAO,KAAK,WAAL,EAAP,CAAJ,CAjBoB;AAkBpB,MAAI,CAAC,CAAD,EAAI,MAAM,IAAI,KAAJ,CAAU,8BAA8B,IAA9B,GAAqC,GAArC,CAAhB,CAAR;AACA,SAAO,CAAP,CAnBoB;CAAtB","file":"index-compiled.js","sourcesContent":["\nvar codes = require('./codes.json');\n\nmodule.exports = status;\n\n// [Integer...]\nstatus.codes = Object.keys(codes).map(function (code) {\n  code = ~~code;\n  var msg = codes[code];\n  status[code] = msg;\n  status[msg] = status[msg.toLowerCase()] = code;\n  return code;\n});\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true,\n};\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true,\n};\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true,\n};\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}\n"]}