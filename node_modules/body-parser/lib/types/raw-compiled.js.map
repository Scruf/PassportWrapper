{"version":3,"sources":["raw.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,IAAI,QAAQ,QAAQ,OAAR,CAAR;AACJ,IAAI,QAAQ,QAAQ,OAAR,EAAiB,iBAAjB,CAAR;AACJ,IAAI,OAAO,QAAQ,SAAR,CAAP;AACJ,IAAI,SAAS,QAAQ,SAAR,CAAT;;;;;;AAMJ,OAAO,OAAP,GAAiB,GAAjB;;;;;;;;;;AAUA,SAAS,GAAT,CAAa,OAAb,EAAsB;AACpB,MAAI,OAAO,WAAW,EAAX,CADS;;AAGpB,MAAI,UAAU,KAAK,OAAL,KAAiB,KAAjB,CAHM;AAIpB,MAAI,QAAQ,OAAO,KAAK,KAAL,KAAe,QAAtB,GACR,MAAM,KAAN,CAAY,KAAK,KAAL,IAAc,OAAd,CADJ,GAER,KAAK,KAAL,CANgB;AAOpB,MAAI,OAAO,KAAK,IAAL,IAAa,0BAAb,CAPS;AAQpB,MAAI,SAAS,KAAK,MAAL,IAAe,KAAf,CARO;;AAUpB,MAAI,WAAW,KAAX,IAAoB,OAAO,MAAP,KAAkB,UAAlB,EAA8B;AACpD,UAAM,IAAI,SAAJ,CAAc,gCAAd,CAAN,CADoD;GAAtD;;;AAVoB,MAehB,cAAc,OAAO,IAAP,KAAgB,UAAhB,GACd,YAAY,IAAZ,CADc,GAEd,IAFc,CAfE;;AAmBpB,WAAS,KAAT,CAAe,GAAf,EAAoB;AAClB,WAAO,GAAP,CADkB;GAApB;;AAIA,SAAO,SAAS,SAAT,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,IAA7B,EAAmC;AACxC,QAAI,IAAI,KAAJ,EAAW;AACb,aAAO,MAAM,qBAAN,GAA8B,MAA9B,CADM;KAAf;;AAIA,QAAI,IAAJ,GAAW,IAAI,IAAJ,IAAY,EAAZ;;;AAL6B,QAQpC,CAAC,OAAO,OAAP,CAAe,GAAf,CAAD,EAAsB;AACxB,aAAO,MAAM,iBAAN,GAA0B,MAA1B,CADiB;KAA1B;;AAIA,UAAM,iBAAN,EAAyB,IAAI,OAAJ,CAAY,cAAZ,CAAzB;;;AAZwC,QAepC,CAAC,YAAY,GAAZ,CAAD,EAAmB;AACrB,aAAO,MAAM,cAAN,GAAuB,MAAvB,CADc;KAAvB;;;AAfwC,QAoBxC,CAAK,GAAL,EAAU,GAAV,EAAe,IAAf,EAAqB,KAArB,EAA4B,KAA5B,EAAmC;AACjC,gBAAU,IAAV;AACA,eAAS,OAAT;AACA,aAAO,KAAP;AACA,cAAQ,MAAR;KAJF,EApBwC;GAAnC,CAvBa;CAAtB;;;;;;;;;AA2DA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,SAAO,SAAS,SAAT,CAAmB,GAAnB,EAAwB;AAC7B,WAAO,QAAQ,OAAO,GAAP,EAAY,IAAZ,CAAR,CAAP,CAD6B;GAAxB,CADkB;CAA3B","file":"raw-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar debug = require('debug')('body-parser:raw')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw(options) {\n  var opts = options || {};\n\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'application/octet-stream'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse(buf) {\n    return buf\n  }\n\n  return function rawParser(req, res, next) {\n    if (req._body) {\n      return debug('body already parsed'), next()\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      return debug('skip empty body'), next()\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      return debug('skip parsing'), next()\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker(type) {\n  return function checkType(req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}