{"version":3,"sources":["read.js"],"names":[],"mappings":"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","file":"read-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} [options]\n * @api private\n */\n\nfunction read(req, res, next, parse, debug, options) {\n  var length\n  var opts = options || {}\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding || 'utf-8'\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase()\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (err, body) {\n    if (err) {\n      // default to 400\n      setErrorStatus(err, 400)\n\n      // echo back charset\n      if (err.type === 'encoding.unsupported') {\n        err = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase()\n        })\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished() {\n        next(err)\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        // default to 403\n        setErrorStatus(err, 403)\n        next(err)\n        return\n      }\n    }\n\n    // parse\n    var str\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      err.body = str === undefined\n        ? body\n        : str\n\n      // default to 400\n      setErrorStatus(err, 400)\n\n      next(err)\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream(req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported')\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding\n      })\n  }\n\n  return stream\n}\n\n/**\n * Set a status on an error object, if ones does not exist\n * @private\n */\n\nfunction setErrorStatus(error, status) {\n  if (!error.status && !error.statusCode) {\n    error.status = status\n    error.statusCode = status\n  }\n}\n"]}