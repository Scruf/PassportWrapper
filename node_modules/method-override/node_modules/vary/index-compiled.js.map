{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAMA;;;;;;AAMA,OAAO,OAAP,GAAiB,IAAjB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB;;;;;;AAMA,IAAI,aAAa,0CAAb;;;;;;;;;;;AAWJ,SAAS,MAAT,CAAgB,MAAhB,EAAwB,KAAxB,EAA+B;AAC7B,MAAI,OAAO,MAAP,KAAkB,QAAlB,EAA4B;AAC9B,UAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN,CAD8B;GAAhC;;AAIA,MAAI,CAAC,KAAD,EAAQ;AACV,UAAM,IAAI,SAAJ,CAAc,4BAAd,CAAN,CADU;GAAZ;;;AAL6B,MAUzB,SAAS,CAAC,MAAM,OAAN,CAAc,KAAd,CAAD,GACT,MAAM,OAAO,KAAP,CAAN,CADS,GAET,KAFS;;;AAVgB,OAexB,IAAI,IAAI,CAAJ,EAAO,IAAI,OAAO,MAAP,EAAe,GAAnC,EAAwC;AACtC,QAAI,WAAW,IAAX,CAAgB,OAAO,CAAP,CAAhB,CAAJ,EAAgC;AAC9B,YAAM,IAAI,SAAJ,CAAc,2CAAd,CAAN,CAD8B;KAAhC;GADF;;;AAf6B,MAsBzB,WAAW,GAAX,EAAgB;AAClB,WAAO,MAAP,CADkB;GAApB;;;AAtB6B,MA2BzB,MAAM,MAAN,CA3ByB;AA4B7B,MAAI,OAAO,MAAM,OAAO,WAAP,EAAN,CAAP;;;AA5ByB,MA+BzB,OAAO,OAAP,CAAe,GAAf,MAAwB,CAAC,CAAD,IAAM,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAD,EAAI;AAC1D,WAAO,GAAP,CAD0D;GAA5D;;AAIA,OAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,OAAO,MAAP,EAAe,GAAnC,EAAwC;AACtC,QAAI,MAAM,OAAO,CAAP,EAAU,WAAV,EAAN;;;AADkC,QAIlC,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAD,EAAI;AAC5B,WAAK,IAAL,CAAU,GAAV,EAD4B;AAE5B,YAAM,MACF,MAAM,IAAN,GAAa,OAAO,CAAP,CAAb,GACA,OAAO,CAAP,CAFE,CAFsB;KAA9B;GAJF;;AAYA,SAAO,GAAP,CA/C6B;CAA/B;;;;;;;;;;AA0DA,SAAS,KAAT,CAAe,MAAf,EAAuB;AACrB,SAAO,OAAO,IAAP,GAAc,KAAd,CAAoB,OAApB,CAAP,CADqB;CAAvB;;;;;;;;;;AAYA,SAAS,IAAT,CAAc,GAAd,EAAmB,KAAnB,EAA0B;AACxB,MAAI,CAAC,GAAD,IAAQ,CAAC,IAAI,SAAJ,IAAiB,CAAC,IAAI,SAAJ,EAAe;;AAE5C,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN,CAF4C;GAA9C;;;AADwB,MAOpB,MAAM,IAAI,SAAJ,CAAc,MAAd,KAAyB,EAAzB,CAPc;AAQxB,MAAI,SAAS,MAAM,OAAN,CAAc,GAAd,IACT,IAAI,IAAJ,CAAS,IAAT,CADS,GAET,OAAO,GAAP,CAFS;;;AARW,MAanB,MAAM,OAAO,MAAP,EAAe,KAAf,CAAN,EAA8B;AACjC,QAAI,SAAJ,CAAc,MAAd,EAAsB,GAAtB,EADiC;GAAnC;CAbF","file":"index-compiled.js","sourcesContent":["/*!\n * vary\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary;\nmodule.exports.append = append;\n\n/**\n * Variables.\n */\n\nvar separators = /[\\(\\)<>@,;:\\\\\"\\/\\[\\]\\?=\\{\\}\\u0020\\u0009]/;\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @api public\n */\n\nfunction append(header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required');\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required');\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field;\n\n  // assert on invalid fields\n  for (var i = 0; i < fields.length; i++) {\n    if (separators.test(fields[i])) {\n      throw new TypeError('field argument contains an invalid header');\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header;\n  }\n\n  // enumerate current values\n  var val = header;\n  var vals = parse(header.toLowerCase());\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*';\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase();\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld);\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i];\n    }\n  }\n\n  return val;\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @api private\n */\n\nfunction parse(header) {\n  return header.trim().split(/ *, */);\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @api public\n */\n\nfunction vary(res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required');\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val);\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val);\n  }\n}\n"]}