{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;AASA;;;;;;AAMA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,iBAAjB,CAAR;AACJ,IAAI,UAAU,QAAQ,SAAR,CAAV;AACJ,IAAI,WAAW,QAAQ,UAAR,CAAX;AACJ,IAAI,cAAc,QAAQ,aAAR,CAAd;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;;;;;;;;;;;;;;;;;;;;;;;AAwBJ,OAAO,OAAP,GAAiB,SAAS,cAAT,CAAwB,MAAxB,EAAgC,OAAhC,EAAwC;AACvD,YAAU,WAAW,EAAX;;;AAD6C,MAInD,MAAM,OAAO,MAAP,KAAkB,UAAlB,GACN,MADM,GAEN,aAAa,UAAU,wBAAV,CAFP;;;AAJ6C,MASnD,UAAU,QAAQ,OAAR,KAAoB,SAApB,GACV,CAAC,MAAD,CADU,GAEV,QAAQ,OAAR,CAXmD;;AAavD,SAAO,SAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC;AAC7C,QAAI,MAAJ,CAD6C;AAE7C,QAAI,GAAJ,CAF6C;;AAI7C,QAAI,cAAJ,GAAqB,IAAI,cAAJ,IAAsB,IAAI,MAAJ;;;AAJE,QAOzC,WAAW,QAAQ,OAAR,CAAgB,IAAI,cAAJ,CAAhB,KAAwC,CAAC,CAAD,EAAI;AACzD,aAAO,MAAP,CADyD;KAA3D;;AAIA,UAAM,IAAI,GAAJ,EAAS,GAAT,CAAN,CAX6C;AAY7C,aAAS,MAAM,OAAN,CAAc,GAAd,IACL,IAAI,CAAJ,CADK,GAEL,GAFK;;;AAZoC,QAiBzC,WAAW,SAAX,IAAwB,SAAS,MAAT,CAAxB,EAA0C;AAC5C,UAAI,MAAJ,GAAa,OAAO,WAAP,EAAb,CAD4C;AAE5C,YAAM,mBAAN,EAA2B,IAAI,cAAJ,EAAoB,IAAI,MAAJ,CAA/C,CAF4C;KAA9C;;AAKA,WAtB6C;GAAxC,CAbgD;CAAxC;;;;;;AA2CjB,SAAS,YAAT,CAAsB,GAAtB,EAA2B;AACzB,MAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,WAAjB,OAAmC,IAAnC,EAAyC;;AAE3C,WAAO,mBAAmB,GAAnB,CAAP,CAF2C;GAA7C;;AAKA,SAAO,kBAAkB,GAAlB,CAAP,CANyB;CAA3B;;;;;;AAaA,SAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC9B,SAAO,UAAS,GAAT,EAAc,GAAd,EAAmB;AACxB,QAAI,MAAM,SAAS,GAAT,CAAN,CADoB;AAExB,QAAI,QAAQ,YAAY,KAAZ,CAAkB,IAAI,KAAJ,IAAa,EAAb,CAA1B,CAFoB;AAGxB,WAAO,MAAM,GAAN,CAAP,CAHwB;GAAnB,CADuB;CAAhC;;;;;;AAYA,SAAS,kBAAT,CAA4B,GAA5B,EAAiC;AAC/B,MAAI,SAAS,IAAI,WAAJ,EAAT,CAD2B;;AAG/B,SAAO,UAAS,GAAT,EAAc,GAAd,EAAmB;;AAExB,SAAK,GAAL,EAAU,GAAV;;;AAFwB,WAKjB,CAAC,IAAI,OAAJ,CAAY,MAAZ,KAAuB,EAAvB,CAAD,CAA4B,KAA5B,CAAkC,OAAlC,CAAP,CALwB;GAAnB,CAHwB;CAAjC;;;;;;AAgBA,SAAS,QAAT,CAAkB,MAAlB,EAA0B;AACxB,SAAO,UACF,OAAO,MAAP,KAAkB,QAAlB,IACA,QAAQ,OAAR,CAAgB,OAAO,WAAP,EAAhB,MAA0C,CAAC,CAAD,CAHvB;CAA1B","file":"index-compiled.js","sourcesContent":["/*!\n * method-override\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('method-override')\nvar methods = require('methods');\nvar parseurl = require('parseurl');\nvar querystring = require('querystring');\nvar vary = require('vary');\n\n/**\n * Method Override:\n *\n * Provides faux HTTP method support.\n *\n * Pass an optional `getter` to use when checking for\n * a method override.\n *\n * A string is converted to a getter that will look for\n * the method in `req.body[getter]` and a function will be\n * called with `req` and expects the method to be returned.\n * If the string starts with `X-` then it will look in\n * `req.headers[getter]` instead.\n *\n * The original method is available via `req.originalMethod`.\n *\n * @param {string|function} [getter=X-HTTP-Method-Override]\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nmodule.exports = function methodOverride(getter, options){\n  options = options || {}\n\n  // get the getter fn\n  var get = typeof getter === 'function'\n    ? getter\n    : createGetter(getter || 'X-HTTP-Method-Override')\n\n  // get allowed request methods to examine\n  var methods = options.methods === undefined\n    ? ['POST']\n    : options.methods\n\n  return function methodOverride(req, res, next) {\n    var method\n    var val\n\n    req.originalMethod = req.originalMethod || req.method\n\n    // validate request is an allowed method\n    if (methods && methods.indexOf(req.originalMethod) === -1) {\n      return next()\n    }\n\n    val = get(req, res)\n    method = Array.isArray(val)\n      ? val[0]\n      : val\n\n    // replace\n    if (method !== undefined && supports(method)) {\n      req.method = method.toUpperCase()\n      debug('override %s as %s', req.originalMethod, req.method)\n    }\n\n    next()\n  }\n}\n\n/**\n * Create a getter for the given string.\n */\n\nfunction createGetter(str) {\n  if (str.substr(0, 2).toUpperCase() === 'X-') {\n    // header getter\n    return createHeaderGetter(str)\n  }\n\n  return createQueryGetter(str)\n}\n\n/**\n * Create a getter for the given query key name.\n */\n\nfunction createQueryGetter(key) {\n  return function(req, res) {\n    var url = parseurl(req)\n    var query = querystring.parse(url.query || '')\n    return query[key]\n  }\n}\n\n/**\n * Create a getter for the given header name.\n */\n\nfunction createHeaderGetter(str) {\n  var header = str.toLowerCase()\n\n  return function(req, res) {\n    // set appropriate Vary header\n    vary(res, str)\n\n    // multiple headers get joined with comma by node.js core\n    return (req.headers[header] || '').split(/ *, */)\n  }\n}\n\n/**\n * Check if node supports `method`.\n */\n\nfunction supports(method) {\n  return method\n    && typeof method === 'string'\n    && methods.indexOf(method.toLowerCase()) !== -1\n}\n"]}