{"version":3,"sources":["atob.js"],"names":[],"mappings":"AAAA;;;;;;;AAMA,SAAS,IAAT,CAAc,KAAd,EAAqB;;;AAGnB,UAAQ,OAAO,KAAP,CAAR;;AAHmB,OAKnB,GAAQ,MAAM,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAR;;;;AALmB,MASf,MAAM,MAAN,GAAe,CAAf,IAAoB,CAApB,IAAyB,OAAO,IAAP,CAAY,KAAZ,CAAzB,EAA6C;AAC/C,YAAQ,MAAM,OAAN,CAAc,MAAd,EAAsB,EAAtB,CAAR,CAD+C;GAAjD;;;;;;;;;;;;;AATmB,MAwBf,MAAM,MAAN,GAAe,CAAf,IAAoB,CAApB,IAAyB,CAAC,mBAAmB,IAAnB,CAAwB,KAAxB,CAAD,EAAiC;AAC5D,WAAO,IAAP,CAD4D;GAA9D;;AAxBmB,MA4Bf,SAAS,EAAT;;;;;;AA5Be,MAkCf,SAAS,CAAT,CAlCe;AAmCnB,MAAI,kBAAkB,CAAlB;;;AAnCe,OAsCd,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,EAAc,GAAlC,EAAuC;;;;;;;;;AASrC,eAAW,CAAX,CATqC;AAUrC,cAAU,WAAW,MAAM,CAAN,CAAX,CAAV;;;;;AAVqC,mBAerC,IAAmB,CAAnB,CAfqC;AAgBrC,QAAI,mBAAmB,EAAnB,EAAuB;AACzB,gBAAU,OAAO,YAAP,CAAoB,CAAC,SAAS,QAAT,CAAD,IAAuB,EAAvB,CAA9B,CADyB;AAEzB,gBAAU,OAAO,YAAP,CAAoB,CAAC,SAAS,MAAT,CAAD,IAAqB,CAArB,CAA9B,CAFyB;AAGzB,gBAAU,OAAO,YAAP,CAAoB,SAAS,IAAT,CAA9B,CAHyB;AAIzB,eAAS,kBAAkB,CAAlB,CAJgB;KAA3B;;AAhBqC,GAAvC;;;;;;;AAtCmB,MAoEf,mBAAmB,EAAnB,EAAuB;AACzB,eAAW,CAAX,CADyB;AAEzB,cAAU,OAAO,YAAP,CAAoB,MAApB,CAAV,CAFyB;GAA3B,MAGO,IAAI,mBAAmB,EAAnB,EAAuB;AAChC,eAAW,CAAX,CADgC;AAEhC,cAAU,OAAO,YAAP,CAAoB,CAAC,SAAS,MAAT,CAAD,IAAqB,CAArB,CAA9B,CAFgC;AAGhC,cAAU,OAAO,YAAP,CAAoB,SAAS,IAAT,CAA9B,CAHgC;GAA3B;;AAvEY,SA6EZ,MAAP,CA7EmB;CAArB;;;;;AAmFA,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACvB,MAAI,QAAQ,IAAR,CAAa,GAAb,CAAJ,EAAuB;AACrB,WAAO,IAAI,UAAJ,CAAe,CAAf,IAAoB,IAAI,UAAJ,CAAe,CAAf,CAApB,CADc;GAAvB;AAGA,MAAI,QAAQ,IAAR,CAAa,GAAb,CAAJ,EAAuB;AACrB,WAAO,IAAI,UAAJ,CAAe,CAAf,IAAoB,IAAI,UAAJ,CAAe,CAAf,CAApB,GAAwC,EAAxC,CADc;GAAvB;AAGA,MAAI,QAAQ,IAAR,CAAa,GAAb,CAAJ,EAAuB;AACrB,WAAO,IAAI,UAAJ,CAAe,CAAf,IAAoB,IAAI,UAAJ,CAAe,CAAf,CAApB,GAAwC,EAAxC,CADc;GAAvB;AAGA,MAAI,OAAO,GAAP,EAAY;AACd,WAAO,EAAP,CADc;GAAhB;AAGA,MAAI,OAAO,GAAP,EAAY;AACd,WAAO,EAAP,CADc;GAAhB;;AAbuB,CAAzB;;AAmBA,OAAO,OAAP,GAAiB,IAAjB","file":"atob-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Implementation of atob() according to the HTML spec, except that instead of\n * throwing INVALID_CHARACTER_ERR we return null.\n */\nfunction atob(input) {\n  // WebIDL requires DOMStrings to just be converted using ECMAScript\n  // ToString, which in our case amounts to calling String().\n  input = String(input);\n  // \"Remove all space characters from input.\"\n  input = input.replace(/[ \\t\\n\\f\\r]/g, '');\n  // \"If the length of input divides by 4 leaving no remainder, then: if\n  // input ends with one or two U+003D EQUALS SIGN (=) characters, remove\n  // them from input.\"\n  if (input.length % 4 == 0 && /==?$/.test(input)) {\n    input = input.replace(/==?$/, '');\n  }\n  // \"If the length of input divides by 4 leaving a remainder of 1, throw an\n  // INVALID_CHARACTER_ERR exception and abort these steps.\"\n  //\n  // \"If input contains a character that is not in the following list of\n  // characters and character ranges, throw an INVALID_CHARACTER_ERR\n  // exception and abort these steps:\n  //\n  // U+002B PLUS SIGN (+)\n  // U+002F SOLIDUS (/)\n  // U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9)\n  // U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL LETTER Z\n  // U+0061 LATIN SMALL LETTER A to U+007A LATIN SMALL LETTER Z\"\n  if (input.length % 4 == 1 || !/^[+/0-9A-Za-z]*$/.test(input)) {\n    return null;\n  }\n  // \"Let output be a string, initially empty.\"\n  var output = '';\n  // \"Let buffer be a buffer that can have bits appended to it, initially\n  // empty.\"\n  //\n  // We append bits via left-shift and or.  accumulatedBits is used to track\n  // when we've gotten to 24 bits.\n  var buffer = 0;\n  var accumulatedBits = 0;\n  // \"While position does not point past the end of input, run these\n  // substeps:\"\n  for (var i = 0; i < input.length; i++) {\n    // \"Find the character pointed to by position in the first column of\n    // the following table. Let n be the number given in the second cell of\n    // the same row.\"\n    //\n    // \"Append to buffer the six bits corresponding to number, most\n    // significant bit first.\"\n    //\n    // atobLookup() implements the table from the spec.\n    buffer <<= 6;\n    buffer |= atobLookup(input[i]);\n    // \"If buffer has accumulated 24 bits, interpret them as three 8-bit\n    // big-endian numbers. Append the three characters with code points\n    // equal to those numbers to output, in the same order, and then empty\n    // buffer.\"\n    accumulatedBits += 6;\n    if (accumulatedBits == 24) {\n      output += String.fromCharCode((buffer & 0xff0000) >> 16);\n      output += String.fromCharCode((buffer & 0xff00) >> 8);\n      output += String.fromCharCode(buffer & 0xff);\n      buffer = accumulatedBits = 0;\n    }\n    // \"Advance position by one character.\"\n  }\n  // \"If buffer is not empty, it contains either 12 or 18 bits. If it\n  // contains 12 bits, discard the last four and interpret the remaining\n  // eight as an 8-bit big-endian number. If it contains 18 bits, discard the\n  // last two and interpret the remaining 16 as two 8-bit big-endian numbers.\n  // Append the one or two characters with code points equal to those one or\n  // two numbers to output, in the same order.\"\n  if (accumulatedBits == 12) {\n    buffer >>= 4;\n    output += String.fromCharCode(buffer);\n  } else if (accumulatedBits == 18) {\n    buffer >>= 2;\n    output += String.fromCharCode((buffer & 0xff00) >> 8);\n    output += String.fromCharCode(buffer & 0xff);\n  }\n  // \"Return output.\"\n  return output;\n}\n/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */\nfunction atobLookup(chr) {\n  if (/[A-Z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'A'.charCodeAt(0);\n  }\n  if (/[a-z]/.test(chr)) {\n    return chr.charCodeAt(0) - 'a'.charCodeAt(0) + 26;\n  }\n  if (/[0-9]/.test(chr)) {\n    return chr.charCodeAt(0) - '0'.charCodeAt(0) + 52;\n  }\n  if (chr == '+') {\n    return 62;\n  }\n  if (chr == '/') {\n    return 63;\n  }\n  // Throw exception; should not be hit in tests\n}\n\nmodule.exports = atob;\n"]}