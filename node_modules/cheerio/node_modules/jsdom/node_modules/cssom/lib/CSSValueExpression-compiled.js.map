{"version":3,"sources":["CSSValueExpression.js"],"names":[],"mappings":"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","file":"CSSValueExpression-compiled.js","sourcesContent":["//.CommonJS\nvar CSSOM = {\n\tCSSValue: require('./CSSValue').CSSValue\n};\n///CommonJS\n\n\n/**\n * @constructor\n * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx\n *\n */\nCSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {\n\tthis._token = token;\n\tthis._idx = idx;\n};\n\nCSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue();\nCSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;\n\n/**\n * parse css expression() value\n *\n * @return {Object}\n *         - error:\n *         or\n *         - idx:\n *         - expression:\n *\n * Example:\n *\n * .selector {\n *\t\tzoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');\n * }\n */\nCSSOM.CSSValueExpression.prototype.parse = function() {\n\tvar token = this._token,\n\t\t\tidx = this._idx;\n\n\tvar character = '',\n\t\t\texpression = '',\n\t\t\terror = '',\n\t\t\tinfo,\n\t\t\tparen = [];\n\n\n\tfor (; ; ++idx) {\n\t\tcharacter = token.charAt(idx);\n\n\t\t// end of token\n\t\tif (character === '') {\n\t\t\terror = 'css expression error: unfinished expression!';\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch(character) {\n\t\t\tcase '(':\n\t\t\t\tparen.push(character);\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\n\t\t\tcase ')':\n\t\t\t\tparen.pop(character);\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\n\t\t\tcase '/':\n\t\t\t\tif ((info = this._parseJSComment(token, idx))) { // comment?\n\t\t\t\t\tif (info.error) {\n\t\t\t\t\t\terror = 'css expression error: unfinished comment in expression!';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidx = info.idx;\n\t\t\t\t\t\t// ignore the comment\n\t\t\t\t\t}\n\t\t\t\t} else if ((info = this._parseJSRexExp(token, idx))) { // regexp\n\t\t\t\t\tidx = info.idx;\n\t\t\t\t\texpression += info.text;\n\t\t\t\t} else { // other\n\t\t\t\t\texpression += character;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"'\":\n\t\t\tcase '\"':\n\t\t\t\tinfo = this._parseJSString(token, idx, character);\n\t\t\t\tif (info) { // string\n\t\t\t\t\tidx = info.idx;\n\t\t\t\t\texpression += info.text;\n\t\t\t\t} else {\n\t\t\t\t\texpression += character;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\texpression += character;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (error) {\n\t\t\tbreak;\n\t\t}\n\n\t\t// end of expression\n\t\tif (paren.length === 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tvar ret;\n\tif (error) {\n\t\tret = {\n\t\t\terror: error\n\t\t};\n\t} else {\n\t\tret = {\n\t\t\tidx: idx,\n\t\t\texpression: expression\n\t\t};\n\t}\n\n\treturn ret;\n};\n\n\n/**\n *\n * @return {Object|false}\n *          - idx:\n *          - text:\n *          or\n *          - error:\n *          or\n *          false\n *\n */\nCSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {\n\tvar nextChar = token.charAt(idx + 1),\n\t\t\ttext;\n\n\tif (nextChar === '/' || nextChar === '*') {\n\t\tvar startIdx = idx,\n\t\t\t\tendIdx,\n\t\t\t\tcommentEndChar;\n\n\t\tif (nextChar === '/') { // line comment\n\t\t\tcommentEndChar = '\\n';\n\t\t} else if (nextChar === '*') { // block comment\n\t\t\tcommentEndChar = '*/';\n\t\t}\n\n\t\tendIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);\n\t\tif (endIdx !== -1) {\n\t\t\tendIdx = endIdx + commentEndChar.length - 1;\n\t\t\ttext = token.substring(idx, endIdx + 1);\n\t\t\treturn {\n\t\t\t\tidx: endIdx,\n\t\t\t\ttext: text\n\t\t\t};\n\t\t} else {\n\t\t\tvar error = 'css expression error: unfinished comment in expression!';\n\t\t\treturn {\n\t\t\t\terror: error\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n};\n\n\n/**\n *\n * @return {Object|false}\n *\t\t\t\t\t- idx:\n *\t\t\t\t\t- text:\n *\t\t\t\t\tor \n *\t\t\t\t\tfalse\n *\n */\nCSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {\n\tvar endIdx = this._findMatchedIdx(token, idx, sep),\n\t\t\ttext;\n\n\tif (endIdx === -1) {\n\t\treturn false;\n\t} else {\n\t\ttext = token.substring(idx, endIdx + sep.length);\n\n\t\treturn {\n\t\t\tidx: endIdx,\n\t\t\ttext: text\n\t\t};\n\t}\n};\n\n\n/**\n * parse regexp in css expression\n *\n * @return {Object|false}\n *\t\t\t\t- idx:\n *\t\t\t\t- regExp:\n *\t\t\t\tor \n *\t\t\t\tfalse\n */\n\n/*\n\nall legal RegExp\n \n/a/\n(/a/)\n[/a/]\n[12, /a/]\n\n!/a/\n\n+/a/\n-/a/\n* /a/\n/ /a/\n%/a/\n\n===/a/\n!==/a/\n==/a/\n!=/a/\n>/a/\n>=/a/\n</a/\n<=/a/\n\n&/a/\n|/a/\n^/a/\n~/a/\n<</a/\n>>/a/\n>>>/a/\n\n&&/a/\n||/a/\n?/a/\n=/a/\n,/a/\n\n\t\tdelete /a/\n\t\t\t\tin /a/\ninstanceof /a/\n\t\t\t\tnew /a/\n\t\ttypeof /a/\n\t\t\tvoid /a/\n\n*/\nCSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {\n\tvar before = token.substring(0, idx).replace(/\\s+$/, \"\"),\n\t\t\tlegalRegx = [\n\t\t\t\t/^$/,\n\t\t\t\t/\\($/,\n\t\t\t\t/\\[$/,\n\t\t\t\t/\\!$/,\n\t\t\t\t/\\+$/,\n\t\t\t\t/\\-$/,\n\t\t\t\t/\\*$/,\n\t\t\t\t/\\/\\s+/,\n\t\t\t\t/\\%$/,\n\t\t\t\t/\\=$/,\n\t\t\t\t/\\>$/,\n\t\t\t\t/<$/,\n\t\t\t\t/\\&$/,\n\t\t\t\t/\\|$/,\n\t\t\t\t/\\^$/,\n\t\t\t\t/\\~$/,\n\t\t\t\t/\\?$/,\n\t\t\t\t/\\,$/,\n\t\t\t\t/delete$/,\n\t\t\t\t/in$/,\n\t\t\t\t/instanceof$/,\n\t\t\t\t/new$/,\n\t\t\t\t/typeof$/,\n\t\t\t\t/void$/\n\t\t\t];\n\n\tvar isLegal = legalRegx.some(function(reg) {\n\t\treturn reg.test(before);\n\t});\n\n\tif (!isLegal) {\n\t\treturn false;\n\t} else {\n\t\tvar sep = '/';\n\n\t\t// same logic as string\n\t\treturn this._parseJSString(token, idx, sep);\n\t}\n};\n\n\n/**\n *\n * find next sep(same line) index in `token`\n *\n * @return {Number}\n *\n */\nCSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {\n\tvar startIdx = idx,\n\t\t\tendIdx;\n\n\tvar NOT_FOUND = -1;\n\n\twhile(true) {\n\t\tendIdx = token.indexOf(sep, startIdx + 1);\n\n\t\tif (endIdx === -1) { // not found\n\t\t\tendIdx = NOT_FOUND;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tvar text = token.substring(idx + 1, endIdx),\n\t\t\t\t\tmatched = text.match(/\\\\+$/);\n\t\t\tif (!matched || matched[0] % 2 === 0) { // not escaped\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tstartIdx = endIdx;\n\t\t\t}\n\t\t}\n\t}\n\n\t// boundary must be in the same line(js sting or regexp)\n\tvar nextNewLineIdx = token.indexOf('\\n', idx + 1);\n\tif (nextNewLineIdx < endIdx) {\n\t\tendIdx = NOT_FOUND;\n\t}\n\n\n\treturn endIdx;\n};\n\n\n\n\n//.CommonJS\nexports.CSSValueExpression = CSSOM.CSSValueExpression;\n///CommonJS\n"]}