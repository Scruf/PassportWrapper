{"version":3,"sources":["acorn.js"],"names":[],"mappings":"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","file":"acorn-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nimport {basename} from \"path\"\nimport {readFileSync as readFile} from \"fs\"\nimport * as acorn from \"../dist/acorn.js\"\n\nlet infile, forceFile, silent = false, compact = false, tokenize = false\nconst options = {}\n\nfunction help(status) {\n  const print = (status == 0) ? console.log : console.error\n  print(\"usage: \" + basename(process.argv[1]) + \" [--ecma3|--ecma5|--ecma6]\")\n  print(\"        [--tokenize] [--locations] [---allow-hash-bang] [--compact] [--silent] [--module] [--help] [--] [infile]\")\n  process.exit(status)\n}\n\nfor (let i = 2; i < process.argv.length; ++i) {\n  const arg = process.argv[i]\n  if ((arg == \"-\" || arg[0] != \"-\") && !infile) infile = arg\n  else if (arg == \"--\" && !infile && i + 2 == process.argv.length) forceFile = infile = process.argv[++i]\n  else if (arg == \"--ecma3\") options.ecmaVersion = 3\n  else if (arg == \"--ecma5\") options.ecmaVersion = 5\n  else if (arg == \"--ecma6\") options.ecmaVersion = 6\n  else if (arg == \"--locations\") options.locations = true\n  else if (arg == \"--allow-hash-bang\") options.allowHashBang = true\n  else if (arg == \"--silent\") silent = true\n  else if (arg == \"--compact\") compact = true\n  else if (arg == \"--help\") help(0)\n  else if (arg == \"--tokenize\") tokenize = true\n  else if (arg == \"--module\") options.sourceType = 'module'\n  else help(1)\n}\n\nfunction run(code) {\n  let result\n  if (!tokenize) {\n    try { result = acorn.parse(code, options) }\n    catch(e) { console.error(e.message); process.exit(1) }\n  } else {\n    result = []\n    let tokenizer = acorn.tokenizer(code, options), token\n    while (true) {\n      try { token = tokenizer.getToken() }\n      catch(e) { console.error(e.message); process.exit(1) }\n      result.push(token)\n      if (token.type == acorn.tokTypes.eof) break\n    }\n  }\n  if (!silent) console.log(JSON.stringify(result, null, compact ? null : 2))\n}\n\nif (forceFile || infile && infile != \"-\") {\n  run(readFile(infile, \"utf8\"))\n} else {\n  let code = \"\"\n  process.stdin.resume()\n  process.stdin.on(\"data\", chunk => code += chunk)\n  process.stdin.on(\"end\", () => run(code))\n}\n"]}