{"version":3,"sources":["tokencontext.js"],"names":[],"mappings":";;;;AAIA,SAAQ,MAAR,QAAqB,SAArB;AACA,SAAQ,SAAS,EAAT,QAAkB,aAA1B;AACA,SAAQ,SAAR,QAAwB,cAAxB;;AAEA,OAAO,MAAM,UAAN,CAAiB;AACtB,cAAY,KAAZ,EAAmB,MAAnB,EAA2B,aAA3B,EAA0C,QAA1C,EAAoD;AAClD,SAAK,KAAL,GAAa,KAAb,CADkD;AAElD,SAAK,MAAL,GAAc,CAAC,CAAC,MAAD,CAFmC;AAGlD,SAAK,aAAL,GAAqB,CAAC,CAAC,aAAD,CAH4B;AAIlD,SAAK,QAAL,GAAgB,QAAhB,CAJkD;GAApD;CADK;;AASP,OAAO,MAAM,QAAQ;AACnB,UAAQ,IAAI,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAAR;AACA,UAAQ,IAAI,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAAR;AACA,UAAQ,IAAI,UAAJ,CAAe,IAAf,EAAqB,IAArB,CAAR;AACA,UAAQ,IAAI,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAAR;AACA,UAAQ,IAAI,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAAR;AACA,UAAQ,IAAI,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,KAAK,EAAE,aAAF,EAAL,CAAxC;AACA,UAAQ,IAAI,UAAJ,CAAe,UAAf,EAA2B,IAA3B,CAAR;CAPW,CAAb;;AAUA,MAAM,KAAK,OAAO,SAAP;;AAEX,GAAG,cAAH,GAAoB,YAAW;AAC7B,SAAO,CAAC,MAAM,MAAN,CAAR,CAD6B;CAAX;;AAIpB,GAAG,YAAH,GAAkB,UAAS,QAAT,EAAmB;AACnC,MAAI,aAAa,GAAG,KAAH,EAAU;AACzB,QAAI,SAAS,KAAK,UAAL,EAAT,CADqB;AAEzB,QAAI,WAAW,MAAM,MAAN,IAAgB,WAAW,MAAM,MAAN,EACxC,OAAO,CAAC,OAAO,MAAP,CADV;GAFF;AAKA,MAAI,aAAa,GAAG,OAAH,EACf,OAAO,UAAU,IAAV,CAAe,KAAK,KAAL,CAAW,KAAX,CAAiB,KAAK,UAAL,EAAiB,KAAK,KAAL,CAAjD,CAAP,CADF;AAEA,MAAI,aAAa,GAAG,KAAH,IAAY,aAAa,GAAG,IAAH,IAAW,aAAa,GAAG,GAAH,IAAU,aAAa,GAAG,MAAH,EACvF,OAAO,IAAP,CADF;AAEA,MAAI,YAAY,GAAG,MAAH,EACd,OAAO,KAAK,UAAL,OAAsB,MAAM,MAAN,CAD/B;AAEA,SAAO,CAAC,KAAK,WAAL,CAZ2B;CAAnB;;AAelB,GAAG,aAAH,GAAmB,UAAS,QAAT,EAAmB;AACpC,MAAI,MAAJ;MAAY,OAAO,KAAK,IAAL,CADiB;AAEpC,MAAI,KAAK,OAAL,IAAgB,YAAY,GAAG,GAAH,EAC9B,KAAK,WAAL,GAAmB,KAAnB,CADF,KAEK,IAAI,SAAS,KAAK,aAAL,EAChB,OAAO,IAAP,CAAY,IAAZ,EAAkB,QAAlB,EADG,KAGH,KAAK,WAAL,GAAmB,KAAK,UAAL,CAHhB;CAJY;;;;AAYnB,GAAG,MAAH,CAAU,aAAV,GAA0B,GAAG,MAAH,CAAU,aAAV,GAA0B,YAAW;AAC7D,MAAI,KAAK,OAAL,CAAa,MAAb,IAAuB,CAAvB,EAA0B;AAC5B,SAAK,WAAL,GAAmB,IAAnB,CAD4B;AAE5B,WAF4B;GAA9B;AAIA,MAAI,MAAM,KAAK,OAAL,CAAa,GAAb,EAAN,CALyD;AAM7D,MAAI,QAAQ,MAAM,MAAN,IAAgB,KAAK,UAAL,OAAsB,MAAM,MAAN,EAAc;AAC9D,SAAK,OAAL,CAAa,GAAb,GAD8D;AAE9D,SAAK,WAAL,GAAmB,KAAnB,CAF8D;GAAhE,MAGO,IAAI,QAAQ,MAAM,MAAN,EAAc;AAC/B,SAAK,WAAL,GAAmB,IAAnB,CAD+B;GAA1B,MAEA;AACL,SAAK,WAAL,GAAmB,CAAC,IAAI,MAAJ,CADf;GAFA;CAT2C;;AAgBpD,GAAG,MAAH,CAAU,aAAV,GAA0B,UAAS,QAAT,EAAmB;AAC3C,OAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,YAAL,CAAkB,QAAlB,IAA8B,MAAM,MAAN,GAAe,MAAM,MAAN,CAA/D,CAD2C;AAE3C,OAAK,WAAL,GAAmB,IAAnB,CAF2C;CAAnB;;AAK1B,GAAG,YAAH,CAAgB,aAAhB,GAAgC,YAAW;AACzC,OAAK,OAAL,CAAa,IAAb,CAAkB,MAAM,MAAN,CAAlB,CADyC;AAEzC,OAAK,WAAL,GAAmB,IAAnB,CAFyC;CAAX;;AAKhC,GAAG,MAAH,CAAU,aAAV,GAA0B,UAAS,QAAT,EAAmB;AAC3C,MAAI,kBAAkB,aAAa,GAAG,GAAH,IAAU,aAAa,GAAG,IAAH,IAAW,aAAa,GAAG,KAAH,IAAY,aAAa,GAAG,MAAH,CADhE;AAE3C,OAAK,OAAL,CAAa,IAAb,CAAkB,kBAAkB,MAAM,MAAN,GAAe,MAAM,MAAN,CAAnD,CAF2C;AAG3C,OAAK,WAAL,GAAmB,IAAnB,CAH2C;CAAnB;;AAM1B,GAAG,MAAH,CAAU,aAAV,GAA0B,YAAW;;CAAX;;AAI1B,GAAG,SAAH,CAAa,aAAb,GAA6B,YAAW;AACtC,MAAI,KAAK,UAAL,OAAsB,MAAM,MAAN,EACxB,KAAK,OAAL,CAAa,IAAb,CAAkB,MAAM,MAAN,CAAlB,CADF;AAEA,OAAK,WAAL,GAAmB,KAAnB,CAHsC;CAAX;;AAM7B,GAAG,SAAH,CAAa,aAAb,GAA6B,YAAW;AACtC,MAAI,KAAK,UAAL,OAAsB,MAAM,MAAN,EACxB,KAAK,OAAL,CAAa,GAAb,GADF,KAGE,KAAK,OAAL,CAAa,IAAb,CAAkB,MAAM,MAAN,CAAlB,CAHF;AAIA,OAAK,WAAL,GAAmB,KAAnB,CALsC;CAAX","file":"tokencontext-compiled.js","sourcesContent":["// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport {Parser} from \"./state\"\nimport {types as tt} from \"./tokentype\"\nimport {lineBreak} from \"./whitespace\"\n\nexport class TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  }\n}\n\nexport const types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  f_expr: new TokContext(\"function\", true)\n}\n\nconst pp = Parser.prototype\n\npp.initialContext = function() {\n  return [types.b_stat]\n}\n\npp.braceIsBlock = function(prevType) {\n  if (prevType === tt.colon) {\n    let parent = this.curContext()\n    if (parent === types.b_stat || parent === types.b_expr)\n      return !parent.isExpr\n  }\n  if (prevType === tt._return)\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n    return true\n  if (prevType == tt.braceL)\n    return this.curContext() === types.b_stat\n  return !this.exprAllowed\n}\n\npp.updateContext = function(prevType) {\n  let update, type = this.type\n  if (type.keyword && prevType == tt.dot)\n    this.exprAllowed = false\n  else if (update = type.updateContext)\n    update.call(this, prevType)\n  else\n    this.exprAllowed = type.beforeExpr\n}\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.context.length == 1) {\n    this.exprAllowed = true\n    return\n  }\n  let out = this.context.pop()\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop()\n    this.exprAllowed = false\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true\n  } else {\n    this.exprAllowed = !out.isExpr\n  }\n}\n\ntt.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n  this.exprAllowed = true\n}\n\ntt.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl)\n  this.exprAllowed = true\n}\n\ntt.parenL.updateContext = function(prevType) {\n  let statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n  this.context.push(statementParens ? types.p_stat : types.p_expr)\n  this.exprAllowed = true\n}\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n}\n\ntt._function.updateContext = function() {\n  if (this.curContext() !== types.b_stat)\n    this.context.push(types.f_expr)\n  this.exprAllowed = false\n}\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    this.context.pop()\n  else\n    this.context.push(types.q_tmpl)\n  this.exprAllowed = false\n}\n"]}