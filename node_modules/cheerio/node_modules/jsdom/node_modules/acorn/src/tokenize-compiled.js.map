{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["import {isIdentifierStart, isIdentifierChar} from \"./identifier\"\nimport {types as tt, keywords as keywordTypes} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {SourceLocation} from \"./locutil\"\nimport {lineBreak, lineBreakG, isNewLine, nonASCIIwhitespace} from \"./whitespace\"\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  }\n}\n\n// ## Tokenizer\n\nconst pp = Parser.prototype\n\n// Are we running under Rhino?\nconst isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n// Move to the next token\n\npp.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this))\n\n  this.lastTokEnd = this.end\n  this.lastTokStart = this.start\n  this.lastTokEndLoc = this.endLoc\n  this.lastTokStartLoc = this.startLoc\n  this.nextToken()\n}\n\npp.getToken = function() {\n  this.next()\n  return new Token(this)\n}\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp[Symbol.iterator] = function () {\n    let self = this\n    return {next: function () {\n      let token = self.getToken()\n      return {\n        done: token.type === tt.eof,\n        value: token\n      }\n    }}\n  }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function(strict) {\n  this.strict = strict\n  if (this.type !== tt.num && this.type !== tt.string) return\n  this.pos = this.start\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1\n      --this.curLine\n    }\n  }\n  this.nextToken()\n}\n\npp.curContext = function() {\n  return this.context[this.context.length - 1]\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  let curContext = this.curContext()\n  if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n  this.start = this.pos\n  if (this.options.locations) this.startLoc = this.curPosition()\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos())\n}\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n}\n\npp.fullCharCodeAtPos = function() {\n  let code = this.input.charCodeAt(this.pos)\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  let next = this.input.charCodeAt(this.pos + 1)\n  return (code << 10) + next - 0x35fdc00\n}\n\npp.skipBlockComment = function() {\n  let startLoc = this.options.onComment && this.curPosition()\n  let start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n  this.pos = end + 2\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine\n      this.lineStart = match.index + match[0].length\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\npp.skipLineComment = function(startSkip) {\n  let start = this.pos\n  let startLoc = this.options.onComment && this.curPosition()\n  let ch = this.input.charCodeAt(this.pos+=startSkip)\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos\n    ch = this.input.charCodeAt(this.pos)\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    let ch = this.input.charCodeAt(this.pos)\n    switch (ch) {\n      case 32: case 160: // ' '\n        ++this.pos\n        break\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos\n        }\n      case 10: case 8232: case 8233:\n        ++this.pos\n        if (this.options.locations) {\n          ++this.curLine\n          this.lineStart = this.pos\n        }\n        break\n      case 47: // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42: // '*'\n            this.skipBlockComment()\n            break\n          case 47:\n            this.skipLineComment(2)\n            break\n          default:\n            break loop\n        }\n        break\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos\n        } else {\n          break loop\n        }\n    }\n  }\n}\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos\n  if (this.options.locations) this.endLoc = this.curPosition()\n  let prevType = this.type\n  this.type = type\n  this.value = val\n\n  this.updateContext(prevType)\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  let next2 = this.input.charCodeAt(this.pos + 2)\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3\n    return this.finishToken(tt.ellipsis)\n  } else {\n    ++this.pos\n    return this.finishToken(tt.dot)\n  }\n}\n\npp.readToken_slash = function() { // '/'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (this.exprAllowed) {++this.pos; return this.readRegexp();}\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.slash, 1)\n}\n\npp.readToken_mult_modulo = function(code) { // '%*'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 42 ? tt.star : tt.modulo, 1)\n}\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n}\n\npp.readToken_caret = function() { // '^'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.bitwiseXOR, 1)\n}\n\npp.readToken_plus_min = function(code) { // '+-'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    return this.finishOp(tt.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.plusMin, 1)\n}\n\npp.readToken_lt_gt = function(code) { // '<>'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tt.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected()\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4)\n    this.skipSpace()\n    return this.nextToken()\n  }\n  if (next === 61)\n    size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2\n  return this.finishOp(tt.relational, size)\n}\n\npp.readToken_eq_excl = function(code) { // '=!'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2\n    return this.finishToken(tt.arrow)\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n}\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(tt.parenL)\n  case 41: ++this.pos; return this.finishToken(tt.parenR)\n  case 59: ++this.pos; return this.finishToken(tt.semi)\n  case 44: ++this.pos; return this.finishToken(tt.comma)\n  case 91: ++this.pos; return this.finishToken(tt.bracketL)\n  case 93: ++this.pos; return this.finishToken(tt.bracketR)\n  case 123: ++this.pos; return this.finishToken(tt.braceL)\n  case 125: ++this.pos; return this.finishToken(tt.braceR)\n  case 58: ++this.pos; return this.finishToken(tt.colon)\n  case 63: ++this.pos; return this.finishToken(tt.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos\n    return this.finishToken(tt.backQuote)\n\n  case 48: // '0'\n    let next = this.input.charCodeAt(this.pos + 1)\n    if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(tt.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n}\n\npp.finishOp = function(type, size) {\n  let str = this.input.slice(this.pos, this.pos + size)\n  this.pos += size\n  return this.finishToken(type, str)\n}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n      throw e\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\");\n\npp.readRegexp = function() {\n  let escaped, inClass, start = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\")\n    let ch = this.input.charAt(this.pos)\n    if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\")\n    if (!escaped) {\n      if (ch === \"[\") inClass = true\n      else if (ch === \"]\" && inClass) inClass = false\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\"\n    } else escaped = false\n    ++this.pos\n  }\n  let content = this.input.slice(start, this.pos)\n  ++this.pos\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  let mods = this.readWord1()\n  let tmp = content\n  if (mods) {\n    let validFlags = /^[gim]*$/\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, (_match, code, offset) => {\n        code = Number(\"0x\" + code)\n        if (code > 0x10FFFF) this.raise(start + offset + 3, \"Code point out of bounds\")\n        return \"x\"\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n    }\n  }\n  // Detect invalid regular expressions.\n  let value = null\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods)\n  }\n  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n}\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len) {\n  let start = this.pos, total = 0\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    let code = this.input.charCodeAt(this.pos), val\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n    else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n    else val = Infinity\n    if (val >= radix) break\n    ++this.pos\n    total = total * radix + val\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n}\n\npp.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  let val = this.readInt(radix)\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n  return this.finishToken(tt.num, val)\n}\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  let start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n  let next = this.input.charCodeAt(this.pos)\n  if (next === 46) { // '.'\n    ++this.pos\n    this.readInt(10)\n    isFloat = true\n    next = this.input.charCodeAt(this.pos)\n  }\n  if (next === 69 || next === 101) { // 'eE'\n    next = this.input.charCodeAt(++this.pos)\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    isFloat = true\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n  let str = this.input.slice(start, this.pos), val\n  if (isFloat) val = parseFloat(str)\n  else if (!octal || str.length === 1) val = parseInt(str, 10)\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n  else val = parseInt(str, 8)\n  return this.finishToken(tt.num, val)\n}\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  let ch = this.input.charCodeAt(this.pos), code\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected()\n    let codePos = ++this.pos\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n    ++this.pos\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n  } else {\n    code = this.readHexChar(4)\n  }\n  return code\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  code -= 0x10000\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  let out = \"\", chunkStart = ++this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(false)\n      chunkStart = this.pos\n    } else {\n      if (isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\")\n      ++this.pos\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++)\n  return this.finishToken(tt.string, out)\n}\n\n// Reads template string tokens.\n\npp.readTmplToken = function() {\n  let out = \"\", chunkStart = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && this.type === tt.template) {\n        if (ch === 36) {\n          this.pos += 2\n          return this.finishToken(tt.dollarBraceL)\n        } else {\n          ++this.pos\n          return this.finishToken(tt.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos)\n      return this.finishToken(tt.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(true)\n      chunkStart = this.pos\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos)\n      ++this.pos\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n      chunkStart = this.pos\n    } else {\n      ++this.pos\n    }\n  }\n}\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  let ch = this.input.charCodeAt(++this.pos)\n  ++this.pos\n  switch (ch) {\n  case 110: return \"\\n\"; // 'n' -> '\\n'\n  case 114: return \"\\r\"; // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)); // 'x'\n  case 117: return codePointToString(this.readCodePoint()); // 'u'\n  case 116: return \"\\t\"; // 't' -> '\\t'\n  case 98: return \"\\b\"; // 'b' -> '\\b'\n  case 118: return \"\\u000b\"; // 'v' -> '\\u000b'\n  case 102: return \"\\f\"; // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      let octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n      let octal = parseInt(octalStr, 8)\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1)\n        octal = parseInt(octalStr, 8)\n      }\n      if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n        this.raise(this.pos - 2, \"Octal literal in strict mode\")\n      }\n      this.pos += octalStr.length - 1\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n}\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  let codePos = this.pos\n  let n = this.readInt(16, len)\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n  return n\n}\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false\n  let word = \"\", first = true, chunkStart = this.pos\n  let astral = this.options.ecmaVersion >= 6\n  while (this.pos < this.input.length) {\n    let ch = this.fullCharCodeAtPos()\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true\n      word += this.input.slice(chunkStart, this.pos)\n      let escStart = this.pos\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n      ++this.pos\n      let esc = this.readCodePoint()\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this.raise(escStart, \"Invalid Unicode escape\")\n      word += codePointToString(esc)\n      chunkStart = this.pos\n    } else {\n      break\n    }\n    first = false\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n}\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  let word = this.readWord1()\n  let type = tt.name\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n    type = keywordTypes[word]\n  return this.finishToken(type, word)\n}\n"]}