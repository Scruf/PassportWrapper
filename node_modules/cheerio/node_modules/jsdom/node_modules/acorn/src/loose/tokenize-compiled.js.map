{"version":3,"sources":["tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["import {tokTypes as tt, Token, isNewLine, SourceLocation, getLineInfo, lineBreakG} from \"..\"\nimport {LooseParser} from \"./state\"\n\nconst lp = LooseParser.prototype\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewLine(ch)\n}\n\nlp.next = function() {\n  this.last = this.tok\n  if (this.ahead.length)\n    this.tok = this.ahead.shift()\n  else\n    this.tok = this.readToken()\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this.curLineStart = this.nextLineStart\n      this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart)\n  }\n}\n\nlp.readToken = function() {\n  for (;;) {\n    try {\n      this.toks.next()\n      if (this.toks.type === tt.dot &&\n          this.input.substr(this.toks.end, 1) === \".\" &&\n          this.options.ecmaVersion >= 6) {\n        this.toks.end++\n        this.toks.type = tt.ellipsis\n      }\n      return new Token(this.toks)\n    } catch(e) {\n      if (!(e instanceof SyntaxError)) throw e\n\n      // Try to skip some text, based on the error message, and then continue\n      let msg = e.message, pos = e.raisedAt, replace = true\n      if (/unterminated/i.test(msg)) {\n        pos = this.lineEnd(e.pos + 1)\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: tt.string, value: this.input.slice(e.pos + 1, pos)}\n        } else if (/regular expr/i.test(msg)) {\n          let re = this.input.slice(e.pos, pos)\n          try { re = new RegExp(re) } catch(e) {}\n          replace = {start: e.pos, end: pos, type: tt.regexp, value: re}\n        } else if (/template/.test(msg)) {\n          replace = {start: e.pos, end: pos,\n                     type: tt.template,\n                     value: this.input.slice(e.pos, pos)}\n        } else {\n          replace = false\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number|expected number in radix/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) ++pos\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          let ch = this.input.charCodeAt(pos++)\n          if (ch === 34 || ch === 39 || isNewLine(ch)) break\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++\n        replace = false\n      } else if (/regular expression/i.test(msg)) {\n        replace = true\n      } else {\n        throw e\n      }\n      this.resetTo(pos)\n      if (replace === true) replace = {start: pos, end: pos, type: tt.name, value: \"âœ–\"}\n      if (replace) {\n        if (this.options.locations)\n          replace.loc = new SourceLocation(\n            this.toks,\n            getLineInfo(this.input, replace.start),\n            getLineInfo(this.input, replace.end))\n        return replace\n      }\n    }\n  }\n}\n\nlp.resetTo = function(pos) {\n  this.toks.pos = pos\n  let ch = this.input.charAt(pos - 1)\n  this.toks.exprAllowed = !ch || /[\\[\\{\\(,;:?\\/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(this.input.slice(pos - 10, pos))\n\n  if (this.options.locations) {\n    this.toks.curLine = 1\n    this.toks.lineStart = lineBreakG.lastIndex = 0\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this.toks.curLine\n      this.toks.lineStart = match.index + match[0].length\n    }\n  }\n}\n\nlp.lookAhead = function(n) {\n  while (n > this.ahead.length)\n    this.ahead.push(this.readToken())\n  return this.ahead[n - 1]\n}\n"]}