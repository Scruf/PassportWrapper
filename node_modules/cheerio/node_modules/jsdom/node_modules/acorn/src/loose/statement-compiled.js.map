{"version":3,"sources":["statement.js"],"names":[],"mappings":"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","file":"statement-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {getLineInfo, tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.parseTopLevel = function() {\n  let node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tt.eof) node.body.push(this.parseStatement())\n  this.last = this.tok\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nlp.parseStatement = function() {\n  let starttype = this.tok.type, node = this.startNode()\n\n  switch (starttype) {\n  case tt._break: case tt._continue:\n    this.next()\n    let isBreak = starttype === tt._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tt.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tt._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tt._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tt._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tt._for:\n    this.next()\n    this.pushCx()\n    this.expect(tt.parenL)\n    if (this.tok.type === tt.semi) return this.parseFor(node, null)\n    if (this.tok.type === tt._var || this.tok.type === tt._let || this.tok.type === tt._const) {\n      let init = this.parseVar(true)\n      if (init.declarations.length === 1 && (this.tok.type === tt._in || this.isContextual(\"of\"))) {\n        return this.parseForIn(node, init)\n      }\n      return this.parseFor(node, init)\n    }\n    let init = this.parseExpression(true)\n    if (this.tok.type === tt._in || this.isContextual(\"of\"))\n      return this.parseForIn(node, this.toAssignable(init))\n    return this.parseFor(node, init)\n\n  case tt._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tt._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tt._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tt._return:\n    this.next()\n    if (this.eat(tt.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tt._switch:\n    let blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tt.braceL)\n\n    let cur\n    while (!this.closes(tt.braceR, blockIndent, line, true)) {\n      if (this.tok.type === tt._case || this.tok.type === tt._default) {\n        let isCase = this.tok.type === tt._case\n        if (cur) this.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this.startNode())\n        cur.consequent = []\n        this.next()\n        if (isCase) cur.test = this.parseExpression()\n        else cur.test = null\n        this.expect(tt.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tt.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tt._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tt._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tt._catch) {\n      let clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.toAssignable(this.parseExprAtom(), true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tt._var:\n  case tt._let:\n  case tt._const:\n    return this.parseVar()\n\n  case tt._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tt._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tt.braceL:\n    return this.parseBlock()\n\n  case tt.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tt._class:\n    return this.parseClass(true)\n\n  case tt._import:\n    return this.parseImport()\n\n  case tt._export:\n    return this.parseExport()\n\n  default:\n    let expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tt.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp.parseBlock = function() {\n  let node = this.startNode()\n  this.pushCx()\n  this.expect(tt.braceL)\n  let blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tt.braceR, blockIndent, line, true))\n    node.body.push(this.parseStatement())\n  this.popCx()\n  this.eat(tt.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tt.semi) && this.tok.type !== tt.semi) node.test = this.parseExpression()\n  if (this.eat(tt.semi) && this.tok.type !== tt.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp.parseForIn = function(node, init) {\n  let type = this.tok.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp.parseVar = function(noIn) {\n  let node = this.startNode()\n  node.kind = this.tok.type.keyword\n  this.next()\n  node.declarations = []\n  do {\n    let decl = this.startNode()\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent()\n    decl.init = this.eat(tt.eq) ? this.parseMaybeAssign(noIn) : null\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tt.comma))\n  if (!node.declarations.length) {\n    let decl = this.startNode()\n    decl.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp.parseClass = function(isStatement) {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tt._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    if (this.semicolon()) continue\n    let method = this.startNode(), isGenerator\n    if (this.options.ecmaVersion >= 6) {\n      method.static = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this.tok.type != tt.parenL && this.tok.type != tt.braceL)) {\n      method.static = true\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      method.static = false\n    }\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this.tok.type !== tt.parenL && this.tok.type !== tt.braceL) {\n      method.kind = method.key.name\n      this.parsePropertyName(method)\n      method.value = this.parseMethod(false)\n    } else {\n      if (!method.computed && !method.static && !isGenerator && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind =  \"method\"\n      }\n      method.value = this.parseMethod(isGenerator)\n    }\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp.parseFunction = function(node, isStatement) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tt.star)\n  }\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp.parseExport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.eat(tt.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) {\n    let expr = this.parseMaybeAssign()\n    if (expr.id) {\n      switch (expr.type) {\n      case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n      case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n      }\n    }\n    node.declaration = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp.parseImport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n    node.kind = ''\n  } else {\n    let elt\n    if (this.tok.type === tt.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tt.comma)\n    }\n    node.specifiers = this.parseImportSpecifierList()\n    node.source = this.eatContextual(\"from\") && this.tok.type == tt.string ? this.parseExprAtom() : this.dummyString()\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp.parseImportSpecifierList = function() {\n  let elts = []\n  if (this.tok.type === tt.star) {\n    let elt = this.startNode()\n    this.next()\n    if (this.eatContextual(\"as\")) elt.local = this.parseIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tt.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      let elt = this.startNode()\n      if (this.eat(tt.star)) {\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : this.dummyIdent()\n        this.finishNode(elt, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this.isContextual(\"from\")) break\n        elt.imported = this.parseIdent()\n        if (isDummy(elt.imported)) break\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : elt.imported\n        this.finishNode(elt, \"ImportSpecifier\")\n      }\n      elts.push(elt)\n      this.eat(tt.comma)\n    }\n    this.eat(tt.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp.parseExportSpecifierList = function() {\n  let elts = []\n  let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tt.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) break\n    let elt = this.startNode()\n    elt.local = this.parseIdent()\n    if (isDummy(elt.local)) break\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local\n    this.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this.eat(tt.comma)\n  }\n  this.eat(tt.braceR)\n  this.popCx()\n  return elts\n}\n"]}