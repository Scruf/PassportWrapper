{"version":3,"sources":["expression.js"],"names":[],"mappings":"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","file":"expression-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.checkLVal = function(expr) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n  case \"MemberExpression\":\n    return expr\n\n  case \"ParenthesizedExpression\":\n    expr.expression = this.checkLVal(expr.expression)\n    return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExpression = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tt.comma) {\n    let node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tt.parenL)\n  let val = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  return val\n}\n\nlp.parseMaybeAssign = function(noIn) {\n  let start = this.storeCurrentPos()\n  let left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp.parseMaybeConditional = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprOps(noIn)\n  if (this.eat(tt.question)) {\n    let node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp.parseExprOps = function(noIn) {\n  let start = this.storeCurrentPos()\n  let indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(noIn), start, -1, noIn, indent, line)\n}\n\nlp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n  let prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tt._in)) {\n    if (prec > minPrec) {\n      let node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        let rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(noIn), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp.parseMaybeUnary = function(noIn) {\n  if (this.tok.type.prefix) {\n    let node = this.startNode(), update = this.tok.type === tt.incDec\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    if (update) node.argument = this.checkLVal(node.argument)\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tt.ellipsis) {\n    let node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprSubscripts()\n  while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.prefix = false\n    node.argument = this.checkLVal(expr)\n    this.next()\n    expr = this.finishNode(node, \"UpdateExpression\")\n  }\n  return expr\n}\n\nlp.parseExprSubscripts = function() {\n  let start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  for (;;) {\n    if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type == tt.dot && this.curIndent == startIndent)\n        --startIndent\n      else\n        return base\n    }\n\n    if (this.eat(tt.dot)) {\n      let node = this.startNodeAt(start)\n      node.object = base\n      if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine())\n        node.property = this.dummyIdent()\n      else\n        node.property = this.parsePropertyAccessor() || this.dummyIdent()\n      node.computed = false\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (this.tok.type == tt.bracketL) {\n      this.pushCx()\n      this.next()\n      let node = this.startNodeAt(start)\n      node.object = base\n      node.property = this.parseExpression()\n      node.computed = true\n      this.popCx()\n      this.expect(tt.bracketR)\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this.tok.type == tt.parenL) {\n      let node = this.startNodeAt(start)\n      node.callee = base\n      node.arguments = this.parseExprList(tt.parenR)\n      base = this.finishNode(node, \"CallExpression\")\n    } else if (this.tok.type == tt.backQuote) {\n      let node = this.startNodeAt(start)\n      node.tag = base\n      node.quasi = this.parseTemplate()\n      base = this.finishNode(node, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\nlp.parseExprAtom = function() {\n  let node\n  switch (this.tok.type) {\n  case tt._this:\n  case tt._super:\n    let type = this.tok.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    let start = this.storeCurrentPos()\n    let id = this.parseIdent()\n    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n  case tt.regexp:\n    node = this.startNode()\n    let val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.num: case tt.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    let parenStart = this.storeCurrentPos()\n    this.next()\n    let inner = this.parseExpression()\n    this.expect(tt.parenR)\n    if (this.eat(tt.arrow)) {\n      return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n    }\n    if (this.options.preserveParens) {\n      let par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tt.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tt.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj()\n\n  case tt._class:\n    return this.parseClass()\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt._yield:\n    node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tt.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseNew = function() {\n  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  let meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  let start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type == tt.parenL) {\n    node.arguments = this.parseExprList(tt.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp.parseTemplateElement = function() {\n  let elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.tok.start, this.tok.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.tok.value\n  }\n  this.next()\n  elem.tail = this.tok.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp.parseTemplate = function() {\n  let node = this.startNode()\n  this.next()\n  node.expressions = []\n  let curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this.next()\n    node.expressions.push(this.parseExpression())\n    if (this.expect(tt.braceR)) {\n      curElt = this.parseTemplateElement()\n    } else {\n      curElt = this.startNode()\n      curElt.value = {cooked: '', raw: ''}\n      curElt.tail = true\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tt.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp.parseObj = function() {\n  let node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    let prop = this.startNode(), isGenerator, start\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(prop)\n    if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (this.eat(tt.colon)) {\n      prop.kind = \"init\"\n      prop.value = this.parseMaybeAssign()\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.tok.type != tt.comma && this.tok.type != tt.braceR)) {\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(tt.eq)) {\n          let assign = this.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this.parseMaybeAssign()\n          prop.value = this.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this.finishNode(prop, \"Property\"))\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tt.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp.parsePropertyAccessor = function() {\n  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp.parseIdent = function() {\n  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  let node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp.toAssignable = function(node, binding) {\n  if (!node || node.type == \"Identifier\" || (node.type == \"MemberExpression\" && !binding)) {\n    // Okay\n  } else if (node.type == \"ParenthesizedExpression\") {\n    node.expression = this.toAssignable(node.expression, binding)\n  } else if (this.options.ecmaVersion < 6) {\n    return this.dummyIdent()\n  } else if (node.type == \"ObjectExpression\") {\n    node.type = \"ObjectPattern\"\n    let props = node.properties\n    for (let i = 0; i < props.length; i++)\n      props[i].value = this.toAssignable(props[i].value, binding)\n  } else if (node.type == \"ArrayExpression\") {\n    node.type = \"ArrayPattern\"\n    this.toAssignableList(node.elements, binding)\n  } else if (node.type == \"SpreadElement\") {\n    node.type = \"RestElement\"\n    node.argument = this.toAssignable(node.argument, binding)\n  } else if (node.type == \"AssignmentExpression\") {\n    node.type = \"AssignmentPattern\"\n    delete node.operator\n  } else {\n    return this.dummyIdent()\n  }\n  return node\n}\n\nlp.toAssignableList = function(exprList, binding) {\n  for (let i = 0; i < exprList.length; i++)\n    exprList[i] = this.toAssignable(exprList[i], binding)\n  return exprList\n}\n\nlp.parseFunctionParams = function(params) {\n  params = this.parseExprList(tt.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp.parseMethod = function(isGenerator) {\n  let node = this.startNode()\n  this.initFunction(node)\n  node.params = this.parseFunctionParams()\n  node.generator = isGenerator || false\n  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp.parseArrowExpression = function(node, params) {\n  this.initFunction(node)\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp.parseExprList = function(close, allowEmpty) {\n  this.pushCx()\n  let indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next(); // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(tt.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent())\n      continue\n    }\n    let elt = this.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) break\n      this.next()\n    } else {\n      elts.push(elt)\n    }\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n"]}