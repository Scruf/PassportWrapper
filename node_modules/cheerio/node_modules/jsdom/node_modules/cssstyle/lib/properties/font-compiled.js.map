{"version":3,"sources":["font.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,YAAR,EAAsB,KAAtB;AACZ,IAAI,YAAY,QAAQ,YAAR,EAAsB,SAAtB;AAChB,IAAI,kBAAkB,QAAQ,YAAR,EAAsB,eAAtB;AACtB,IAAI,kBAAkB,QAAQ,YAAR,EAAsB,eAAtB;AACtB,IAAI,kBAAkB,QAAQ,YAAR,EAAsB,eAAtB;;AAEtB,IAAI,gBAAgB;AAChB,mBAAe,QAAQ,cAAR,CAAf;AACA,iBAAa,QAAQ,YAAR,CAAb;AACA,kBAAc,QAAQ,aAAR,CAAd;AACA,oBAAgB,QAAQ,eAAR,CAAhB;AACA,mBAAe,QAAQ,cAAR,CAAf;AACA,mBAAe,QAAQ,cAAR,CAAf;CANA;;AASJ,IAAI,eAAe,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,aAA5B,EAA2C,eAA3C,EAA4D,YAA5D,EAA0E,SAA1E,CAAf;;AAEJ,OAAO,OAAP,CAAe,OAAf,GAAyB,SAAS,OAAT,CAAiB,CAAjB,EAAoB;AACzC,WAAO,eAAC,CAAgB,CAAhB,EAAmB,aAAnB,MAAsC,SAAtC,IACH,UAAU,CAAV,MAAiB,MAAM,OAAN,IAAiB,aAAa,OAAb,CAAqB,EAAE,WAAF,EAArB,MAA0C,CAAC,CAAD,CAFxC;CAApB;;AAKzB,IAAI,SAAS,gBAAgB,MAAhB,EAAwB,aAAxB,CAAT;;AAEJ,OAAO,OAAP,CAAe,UAAf,GAA4B;AACxB,SAAK,UAAU,CAAV,EAAa;AACd,YAAI,QAAQ,gBAAgB,CAAhB,EAAmB,aAAnB,CAAR,CADU;AAEd,YAAI,UAAU,SAAV,EAAqB;AACrB,mBAAO,OAAO,IAAP,CAAY,IAAZ,EAAkB,CAAlB,CAAP,CADqB;SAAzB;AAGA,YAAI,UAAU,CAAV,MAAiB,MAAM,OAAN,IAAiB,aAAa,OAAb,CAAqB,EAAE,WAAF,EAArB,MAA0C,CAAC,CAAD,EAAI;AAChF,iBAAK,YAAL,CAAkB,MAAlB,EAA0B,CAA1B,EADgF;SAApF;KALC;AASL,SAAK,gBAAgB,MAAhB,EAAwB,aAAxB,CAAL;AACA,gBAAY,IAAZ;AACA,kBAAc,IAAd;CAZJ","file":"font-compiled.js","sourcesContent":["'use strict';\n\nvar TYPES = require('../parsers').TYPES;\nvar valueType = require('../parsers').valueType;\nvar shorthandParser = require('../parsers').shorthandParser;\nvar shorthandSetter = require('../parsers').shorthandSetter;\nvar shorthandGetter = require('../parsers').shorthandGetter;\n\nvar shorthand_for = {\n    'font-family': require('./fontFamily'),\n    'font-size': require('./fontSize'),\n    'font-style': require('./fontStyle'),\n    'font-variant': require('./fontVariant'),\n    'font-weight': require('./fontWeight'),\n    'line-height': require('./lineHeight')\n};\n\nvar static_fonts = ['caption', 'icon', 'menu', 'message-box', 'small-caption', 'status-bar', 'inherit'];\n\nmodule.exports.isValid = function isValid(v) {\n    return (shorthandParser(v, shorthand_for) !== undefined) ||\n        (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1);\n};\n\nvar setter = shorthandSetter('font', shorthand_for);\n\nmodule.exports.definition = {\n    set: function (v) {\n        var short = shorthandParser(v, shorthand_for);\n        if (short !== undefined) {\n            return setter.call(this, v);\n        }\n        if (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1) {\n            this._setProperty('font', v);\n        }\n    },\n    get: shorthandGetter('font', shorthand_for),\n    enumerable: true,\n    configurable: true\n};\n"]}