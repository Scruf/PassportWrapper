{"version":3,"sources":["padding.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,UAAU,QAAQ,eAAR,CAAV;AACJ,IAAI,QAAQ,QAAQ,KAAR;;AAEZ,IAAI,UAAU,UAAU,CAAV,EAAa;AACvB,QAAI,OAAO,QAAQ,SAAR,CAAkB,CAAlB,CAAP,CADmB;AAEvB,WAAO,SAAS,MAAM,MAAN,IAAgB,SAAS,MAAM,OAAN,IAAkB,SAAS,MAAM,OAAN,KAAkB,MAAM,GAAN,IAAa,MAAM,CAAN,CAAxC,CAFpC;CAAb;;AAKd,IAAI,SAAS,UAAU,CAAV,EAAa;AACtB,WAAO,QAAQ,gBAAR,CAAyB,CAAzB,CAAP,CADsB;CAAb;;AAIb,IAAI,WAAW,QAAQ,cAAR,CAAuB,SAAvB,EAAkC,EAAlC,EAAsC,OAAtC,EAA+C,MAA/C,CAAX;AACJ,IAAI,WAAW,QAAQ,cAAR,CAAuB,SAAvB,EAAkC,EAAlC,EAAsC,YAAY;AAC7D,WAAO,IAAP,CAD6D;CAAZ,EAElD,UAAU,CAAV,EAAa;AACZ,WAAO,CAAP,CADY;CAAb,CAFC;;AAMJ,OAAO,OAAP,CAAe,UAAf,GAA4B;AACxB,SAAK,UAAU,CAAV,EAAa;AACd,YAAI,OAAO,CAAP,KAAa,QAAb,EAAuB;AACvB,gBAAI,OAAO,CAAP,CAAJ,CADuB;SAA3B;AAGA,YAAI,OAAO,CAAP,KAAa,QAAb,EAAuB;AACvB,mBADuB;SAA3B;AAGA,YAAI,IAAI,EAAE,WAAF,EAAJ,CAPU;AAQd,gBAAQ,CAAR;AACA,iBAAK,SAAL,CADA;AAEA,iBAAK,SAAL,CAFA;AAGA,iBAAK,OAAL,CAHA;AAIA,iBAAK,EAAL;AACI,yBAAS,IAAT,CAAc,IAAd,EAAoB,CAApB,EADJ;AAEI,sBAFJ;;AAJA;AASI,yBAAS,IAAT,CAAc,IAAd,EAAoB,CAApB,EADJ;AAEI,sBAFJ;AARA,SARc;KAAb;AAqBL,SAAK,YAAY;AACb,eAAO,KAAK,gBAAL,CAAsB,SAAtB,CAAP,CADa;KAAZ;AAGL,gBAAY,IAAZ;AACA,kBAAc,IAAd;CA1BJ;;AA6BA,OAAO,OAAP,CAAe,OAAf,GAAyB,OAAzB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB","file":"padding-compiled.js","sourcesContent":["'use strict';\n\nvar parsers = require('../parsers.js');\nvar TYPES = parsers.TYPES;\n\nvar isValid = function (v) {\n    var type = parsers.valueType(v);\n    return type === TYPES.LENGTH || type === TYPES.PERCENT || (type === TYPES.INTEGER && (v === '0' || v === 0));\n};\n\nvar parser = function (v) {\n    return parsers.parseMeasurement(v);\n};\n\nvar mySetter = parsers.implicitSetter('padding', '', isValid, parser);\nvar myGlobal = parsers.implicitSetter('padding', '', function () {\n    return true;\n}, function (v) {\n    return v;\n});\n\nmodule.exports.definition = {\n    set: function (v) {\n        if (typeof v === \"number\") {\n            v = String(v);\n        }\n        if (typeof v !== \"string\") {\n            return;\n        }\n        var V = v.toLowerCase();\n        switch (V) {\n        case 'inherit':\n        case 'initial':\n        case 'unset':\n        case '':\n            myGlobal.call(this, V);\n            break;\n\n        default:\n            mySetter.call(this, v);\n            break;\n        }\n    },\n    get: function () {\n        return this.getPropertyValue('padding');\n    },\n    enumerable: true,\n    configurable: true\n};\n\nmodule.exports.isValid = isValid;\nmodule.exports.parser = parser;\n"]}