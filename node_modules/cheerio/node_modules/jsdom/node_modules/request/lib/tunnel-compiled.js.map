{"version":3,"sources":["tunnel.js"],"names":[],"mappings":"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","file":"tunnel-compiled.js","sourcesContent":["'use strict'\n\nvar url = require('url')\n  , tunnel = require('tunnel-agent')\n\nvar defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via'\n]\n\nvar defaultProxyHeaderExclusiveList = [\n  'proxy-authorization'\n]\n\nfunction constructProxyHost(uriObject) {\n  var port = uriObject.port\n    , protocol = uriObject.protocol\n    , proxyHost = uriObject.hostname + ':'\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {\n  var whiteList = proxyHeaderWhiteList\n    .reduce(function (set, header) {\n      set[header.toLowerCase()] = true\n      return set\n    }, {})\n\n  return Object.keys(headers)\n    .filter(function (header) {\n      return whiteList[header.toLowerCase()]\n    })\n    .reduce(function (set, header) {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions (request, proxyHeaders) {\n  var proxy = request.proxy\n\n  var tunnelOptions = {\n    proxy : {\n      host      : proxy.hostname,\n      port      : +proxy.port,\n      proxyAuth : proxy.auth,\n      headers   : proxyHeaders\n    },\n    headers            : request.headers,\n    ca                 : request.ca,\n    cert               : request.cert,\n    key                : request.key,\n    passphrase         : request.passphrase,\n    pfx                : request.pfx,\n    ciphers            : request.ciphers,\n    rejectUnauthorized : request.rejectUnauthorized,\n    secureOptions      : request.secureOptions,\n    secureProtocol     : request.secureProtocol\n  }\n\n  return tunnelOptions\n}\n\nfunction constructTunnelFnName(uri, proxy) {\n  var uriProtocol = (uri.protocol === 'https:' ? 'https' : 'http')\n  var proxyProtocol = (proxy.protocol === 'https:' ? 'Https' : 'Http')\n  return [uriProtocol, proxyProtocol].join('Over')\n}\n\nfunction getTunnelFn(request) {\n  var uri = request.uri\n  var proxy = request.proxy\n  var tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\n\nfunction Tunnel (request) {\n  this.request = request\n  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n  this.proxyHeaderExclusiveList = []\n  if (typeof request.tunnel !== 'undefined') {\n    this.tunnelOverride = request.tunnel\n  }\n}\n\nTunnel.prototype.isEnabled = function () {\n  var self = this\n    , request = self.request\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If self.tunnelOverride is set (the user specified a value), use it.\n  if (typeof self.tunnelOverride !== 'undefined') {\n    return self.tunnelOverride\n  }\n\n  // If the destination is HTTPS, tunnel.\n  if (request.uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nTunnel.prototype.setup = function (options) {\n  var self = this\n    , request = self.request\n\n  options = options || {}\n\n  if (typeof request.proxy === 'string') {\n    request.proxy = url.parse(request.proxy)\n  }\n\n  if (!request.proxy || !request.tunnel) {\n    return false\n  }\n\n  // Setup Proxy Header Exclusive List and White List\n  if (options.proxyHeaderWhiteList) {\n    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList\n  }\n  if (options.proxyHeaderExclusiveList) {\n    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList\n  }\n\n  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList)\n  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList)\n\n  // Setup Proxy Headers and Proxy Headers Host\n  // Only send the Proxy White Listed Header names\n  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(request.uri)\n\n  proxyHeaderExclusiveList.forEach(request.removeHeader, request)\n\n  // Set Agent from Tunnel Data\n  var tunnelFn = getTunnelFn(request)\n  var tunnelOptions = constructTunnelOptions(request, proxyHeaders)\n  request.agent = tunnelFn(tunnelOptions)\n\n  return true\n}\n\nTunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList\nTunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\nexports.Tunnel = Tunnel\n"]}