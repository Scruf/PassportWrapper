{"version":3,"sources":["redirect.js"],"names":[],"mappings":"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","file":"redirect-compiled.js","sourcesContent":["'use strict'\n\nvar url = require('url')\nvar isUrl = /^https?:/\n\nfunction Redirect (request) {\n  this.request = request\n  this.followRedirect = true\n  this.followRedirects = true\n  this.followAllRedirects = false\n  this.allowRedirect = function () {return true}\n  this.maxRedirects = 10\n  this.redirects = []\n  this.redirectsFollowed = 0\n  this.removeRefererHeader = false\n}\n\nRedirect.prototype.onRequest = function (options) {\n  var self = this\n\n  if (options.maxRedirects !== undefined) {\n    self.maxRedirects = options.maxRedirects\n  }\n  if (typeof options.followRedirect === 'function') {\n    self.allowRedirect = options.followRedirect\n  }\n  if (options.followRedirect !== undefined) {\n    self.followRedirects = !!options.followRedirect\n  }\n  if (options.followAllRedirects !== undefined) {\n    self.followAllRedirects = options.followAllRedirects\n  }\n  if (self.followRedirects || self.followAllRedirects) {\n    self.redirects = self.redirects || []\n  }\n  if (options.removeRefererHeader !== undefined) {\n    self.removeRefererHeader = options.removeRefererHeader\n  }\n}\n\nRedirect.prototype.redirectTo = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = null\n  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {\n    var location = response.caseless.get('location')\n    request.debug('redirect', location)\n\n    if (self.followAllRedirects) {\n      redirectTo = location\n    } else if (self.followRedirects) {\n      switch (request.method) {\n        case 'PATCH':\n        case 'PUT':\n        case 'POST':\n        case 'DELETE':\n          // Do not follow redirects\n          break\n        default:\n          redirectTo = location\n          break\n      }\n    }\n  } else if (response.statusCode === 401) {\n    var authHeader = request._auth.onResponse(response)\n    if (authHeader) {\n      request.setHeader('authorization', authHeader)\n      redirectTo = request.uri\n    }\n  }\n  return redirectTo\n}\n\nRedirect.prototype.onResponse = function (response) {\n  var self = this\n    , request = self.request\n\n  var redirectTo = self.redirectTo(response)\n  if (!redirectTo || !self.allowRedirect.call(request, response)) {\n    return false\n  }\n\n  request.debug('redirect to', redirectTo)\n\n  // ignore any potential response body.  it cannot possibly be useful\n  // to us at this point.\n  // response.resume should be defined, but check anyway before calling. Workaround for browserify.\n  if (response.resume) {\n    response.resume()\n  }\n\n  if (self.redirectsFollowed >= self.maxRedirects) {\n    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href))\n    return false\n  }\n  self.redirectsFollowed += 1\n\n  if (!isUrl.test(redirectTo)) {\n    redirectTo = url.resolve(request.uri.href, redirectTo)\n  }\n\n  var uriPrev = request.uri\n  request.uri = url.parse(redirectTo)\n\n  // handle the case where we change protocol from https to http or vice versa\n  if (request.uri.protocol !== uriPrev.protocol) {\n    delete request.agent\n  }\n\n  self.redirects.push(\n    { statusCode : response.statusCode\n    , redirectUri: redirectTo\n    }\n  )\n  if (self.followAllRedirects && request.method !== 'HEAD'\n    && response.statusCode !== 401 && response.statusCode !== 307) {\n    request.method = 'GET'\n  }\n  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215\n  delete request.src\n  delete request.req\n  delete request._started\n  if (response.statusCode !== 401 && response.statusCode !== 307) {\n    // Remove parameters from the previous response, unless this is the second request\n    // for a server that requires digest authentication.\n    delete request.body\n    delete request._form\n    if (request.headers) {\n      request.removeHeader('host')\n      request.removeHeader('content-type')\n      request.removeHeader('content-length')\n      if (request.uri.hostname !== request.originalHost.split(':')[0]) {\n        // Remove authorization if changing hostnames (but not if just\n        // changing ports or protocols).  This matches the behavior of curl:\n        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710\n        request.removeHeader('authorization')\n      }\n    }\n  }\n\n  if (!self.removeRefererHeader) {\n    request.setHeader('referer', uriPrev.href)\n  }\n\n  request.emit('redirect')\n\n  request.init()\n\n  return true\n}\n\nexports.Redirect = Redirect\n"]}