{"version":3,"sources":["browser.js"],"names":[],"mappings":";;;;;AAKA,OAAO,OAAP,GAAiB,SAAjB;;;;;;;;;;;;;;;;;;;;AAoBA,SAAS,SAAT,CAAoB,EAApB,EAAwB,GAAxB,EAA6B;AAC3B,MAAI,OAAO,eAAP,CAAJ,EAA6B;AAC3B,WAAO,EAAP,CAD2B;GAA7B;;AAIA,MAAI,SAAS,KAAT,CALuB;AAM3B,WAAS,UAAT,GAAsB;AACpB,QAAI,CAAC,MAAD,EAAS;AACX,UAAI,OAAO,kBAAP,CAAJ,EAAgC;AAC9B,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN,CAD8B;OAAhC,MAEO,IAAI,OAAO,kBAAP,CAAJ,EAAgC;AACrC,gBAAQ,KAAR,CAAc,GAAd,EADqC;OAAhC,MAEA;AACL,gBAAQ,IAAR,CAAa,GAAb,EADK;OAFA;AAKP,eAAS,IAAT,CARW;KAAb;AAUA,WAAO,GAAG,KAAH,CAAS,IAAT,EAAe,SAAf,CAAP,CAXoB;GAAtB;;AAcA,SAAO,UAAP,CApB2B;CAA7B;;;;;;;;;;AA+BA,SAAS,MAAT,CAAiB,IAAjB,EAAuB;;AAErB,MAAI;AACF,QAAI,CAAC,OAAO,YAAP,EAAqB,OAAO,KAAP,CAA1B;GADF,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP,CADU;GAAV;AAGF,MAAI,MAAM,OAAO,YAAP,CAAoB,IAApB,CAAN,CAPiB;AAQrB,MAAI,QAAQ,GAAR,EAAa,OAAO,KAAP,CAAjB;AACA,SAAO,OAAO,GAAP,EAAY,WAAZ,OAA8B,MAA9B,CATc;CAAvB","file":"browser-compiled.js","sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"]}