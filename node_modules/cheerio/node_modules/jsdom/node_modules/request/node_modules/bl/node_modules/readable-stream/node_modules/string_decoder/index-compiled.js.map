{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n"]}