{"version":3,"sources":["jsonpointer.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,UAAS,GAAT,EAAc;AAC1B,SAAO,IAAI,OAAJ,CAAY,KAAZ,EAAmB,UAAS,CAAT,EAAY;AACpC,YAAQ,CAAR;AACE,WAAK,IAAL;AACE,eAAO,GAAP,CADF;AADF,WAGO,IAAL;AACE,eAAO,GAAP,CADF;AAHF,KADoC;AAOpC,UAAM,IAAI,KAAJ,CAAU,2BAA2B,CAA3B,CAAhB,CAPoC;GAAZ,CAA1B,CAD0B;CAAd;;AAYd,IAAI,WAAW,UAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,EAA8B;;AAE3C,MAAI,OAAO,QAAQ,QAAQ,KAAR,EAAR,CAAP,CAFuC;AAG3C,MAAG,CAAC,IAAI,cAAJ,CAAmB,IAAnB,CAAD,EAA2B;AAC5B,WAAO,IAAP,CAD4B;GAA9B;AAGA,MAAG,QAAQ,MAAR,KAAmB,CAAnB,EAAsB;;AACvB,WAAO,SAAS,IAAI,IAAJ,CAAT,EAAoB,OAApB,EAA6B,KAA7B,CAAP,CADuB;GAAzB;;AAN2C,MAUxC,OAAO,KAAP,KAAiB,WAAjB,EAA8B;;AAE/B,WAAO,IAAI,IAAJ,CAAP,CAF+B;GAAjC;;AAV2C,MAevC,YAAY,IAAI,IAAJ,CAAZ,CAfuC;AAgB3C,MAAG,UAAU,IAAV,EAAgB;AACjB,WAAO,IAAI,IAAJ,CAAP,CADiB;GAAnB,MAEO;AACL,QAAI,IAAJ,IAAY,KAAZ,CADK;GAFP;AAKA,SAAO,SAAP,CArB2C;CAA9B;;AAwBf,IAAI,iBAAiB,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC1C,MAAG,OAAO,GAAP,KAAe,QAAf,EAAyB;AAC1B,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN,CAD0B;GAA5B;;AAIA,MAAG,YAAY,EAAZ,EAAgB;AACjB,WAAO,EAAP,CADiB;GAAnB;;AAIA,MAAG,CAAC,OAAD,EAAU;AACX,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN,CADW;GAAb;;AAIA,YAAU,QAAQ,KAAR,CAAc,GAAd,CAAV,CAb0C;AAc1C,MAAI,QAAQ,QAAQ,KAAR,EAAR,CAdsC;AAe1C,MAAI,UAAU,EAAV,EAAc;AAChB,UAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN,CADgB;GAAlB;;AAIA,SAAO,OAAP,CAnB0C;CAAvB;;AAsBrB,IAAI,MAAM,UAAS,GAAT,EAAc,OAAd,EAAuB;AAC/B,YAAU,eAAe,GAAf,EAAoB,OAApB,CAAV,CAD+B;AAE/B,MAAI,QAAQ,MAAR,KAAmB,CAAnB,EAAsB;AACxB,WAAO,GAAP,CADwB;GAA1B;AAGA,SAAO,SAAS,GAAT,EAAc,OAAd,CAAP,CAL+B;CAAvB;;AAQV,IAAI,MAAM,UAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,EAA8B;AACtC,YAAU,eAAe,GAAf,EAAoB,OAApB,CAAV,CADsC;AAEtC,MAAI,QAAQ,MAAR,KAAmB,CAAnB,EAAsB;AACxB,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN,CADwB;GAA1B;AAGA,SAAO,SAAS,GAAT,EAAc,OAAd,EAAuB,KAAvB,CAAP,CALsC;CAA9B;;AAQV,QAAQ,GAAR,GAAc,GAAd;AACA,QAAQ,GAAR,GAAc,GAAd","file":"jsonpointer-compiled.js","sourcesContent":["var untilde = function(str) {\n  return str.replace(/~./g, function(m) {\n    switch (m) {\n      case \"~0\":\n        return \"~\";\n      case \"~1\":\n        return \"/\";\n    }\n    throw new Error(\"Invalid tilde escape: \" + m);\n  });\n}\n\nvar traverse = function(obj, pointer, value) {\n  // assert(isArray(pointer))\n  var part = untilde(pointer.shift());\n  if(!obj.hasOwnProperty(part)) {\n    return null;\n  }\n  if(pointer.length !== 0) { // keep traversin!\n    return traverse(obj[part], pointer, value);\n  }\n  // we're done\n  if(typeof value === \"undefined\") {\n    // just reading\n    return obj[part];\n  }\n  // set new value, return old value\n  var old_value = obj[part];\n  if(value === null) {\n    delete obj[part];\n  } else {\n    obj[part] = value;\n  }\n  return old_value;\n}\n\nvar validate_input = function(obj, pointer) {\n  if(typeof obj !== \"object\") {\n    throw new Error(\"Invalid input object.\");\n  }\n\n  if(pointer === \"\") {\n    return [];\n  }\n\n  if(!pointer) {\n    throw new Error(\"Invalid JSON pointer.\");\n  }\n\n  pointer = pointer.split(\"/\");\n  var first = pointer.shift();\n  if (first !== \"\") {\n    throw new Error(\"Invalid JSON pointer.\");\n  }\n\n  return pointer;\n}\n\nvar get = function(obj, pointer) {\n  pointer = validate_input(obj, pointer);\n  if (pointer.length === 0) {\n    return obj;\n  }\n  return traverse(obj, pointer);\n}\n\nvar set = function(obj, pointer, value) {\n  pointer = validate_input(obj, pointer);\n  if (pointer.length === 0) {\n    throw new Error(\"Invalid JSON pointer for set.\")\n  }\n  return traverse(obj, pointer, value);\n}\n\nexports.get = get\nexports.set = set\n"]}