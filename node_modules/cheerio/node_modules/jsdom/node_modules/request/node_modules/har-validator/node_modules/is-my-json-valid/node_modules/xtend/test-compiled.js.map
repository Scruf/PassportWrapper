{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var test = require(\"tape\")\nvar extend = require(\"./\")\nvar mutableExtend = require(\"./mutable\")\n\ntest(\"merge\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { b: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"replace\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = { a: \"bar\" }\n\n    assert.deepEqual(extend(a, b), { a: \"bar\" })\n    assert.end()\n})\n\ntest(\"undefined\", function(assert) {\n    var a = { a: undefined }\n    var b = { b: \"foo\" }\n\n    assert.deepEqual(extend(a, b), { a: undefined, b: \"foo\" })\n    assert.deepEqual(extend(b, a), { a: undefined, b: \"foo\" })\n    assert.end()\n})\n\ntest(\"handle 0\", function(assert) {\n    var a = { a: \"default\" }\n    var b = { a: 0 }\n\n    assert.deepEqual(extend(a, b), { a: 0 })\n    assert.deepEqual(extend(b, a), { a: \"default\" })\n    assert.end()\n})\n\ntest(\"is immutable\", function (assert) {\n    var record = {}\n\n    extend(record, { foo: \"bar\" })\n    assert.equal(record.foo, undefined)\n    assert.end()\n})\n\ntest(\"null as argument\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = null\n    var c = void 0\n\n    assert.deepEqual(extend(b, a, c), { foo: \"bar\" })\n    assert.end()\n})\n\ntest(\"mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n\n    mutableExtend(a, { bar: \"baz\" })\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n\ntest(\"null prototype\", function(assert) {\n    var a = { a: \"foo\" }\n    var b = Object.create(null)\n    b.b = \"bar\";\n\n    assert.deepEqual(extend(a, b), { a: \"foo\", b: \"bar\" })\n    assert.end()\n})\n\ntest(\"null prototype mutable\", function (assert) {\n    var a = { foo: \"bar\" }\n    var b = Object.create(null)\n    b.bar = \"baz\";\n\n    mutableExtend(a, b)\n\n    assert.equal(a.bar, \"baz\")\n    assert.end()\n})\n"]}