{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["var assert = require(\"assert\");\nvar jsonpointer = require(\"./jsonpointer\");\n\nvar obj = {\n  a: 1,\n  b: {\n    c: 2\n  },\n  d: {\n    e: [{a:3}, {b:4}, {c:5}]\n  }\n};\n\nassert.equal(jsonpointer.get(obj, \"/a\"), 1);\nassert.equal(jsonpointer.get(obj, \"/b/c\"), 2);\nassert.equal(jsonpointer.get(obj, \"/d/e/0/a\"), 3);\nassert.equal(jsonpointer.get(obj, \"/d/e/1/b\"), 4);\nassert.equal(jsonpointer.get(obj, \"/d/e/2/c\"), 5);\n\n// set returns old value\nassert.equal(jsonpointer.set(obj, \"/a\", 2), 1);\nassert.equal(jsonpointer.set(obj, \"/b/c\", 3), 2);\nassert.equal(jsonpointer.set(obj, \"/d/e/0/a\", 4), 3);\nassert.equal(jsonpointer.set(obj, \"/d/e/1/b\", 5), 4);\nassert.equal(jsonpointer.set(obj, \"/d/e/2/c\", 6), 5);\n\nassert.equal(jsonpointer.get(obj, \"/a\"), 2);\nassert.equal(jsonpointer.get(obj, \"/b/c\"), 3);\nassert.equal(jsonpointer.get(obj, \"/d/e/0/a\"), 4);\nassert.equal(jsonpointer.get(obj, \"/d/e/1/b\"), 5);\nassert.equal(jsonpointer.get(obj, \"/d/e/2/c\"), 6);\n\nassert.equal(jsonpointer.get(obj, \"\"), obj);\nassert.throws(function(){ jsonpointer.get(obj, \"a\"); }, validateError);\nassert.throws(function(){ jsonpointer.get(obj, \"a/\"); }, validateError);\n\nfunction validateError(err) {\n  if ( (err instanceof Error) && /Invalid JSON pointer/.test(err.message) ) {\n      return true;\n  }\n}\n\nvar complexKeys = {\n  \"a/b\": {\n    c: 1\n  },\n  d: {\n    \"e/f\": 2\n  },\n  \"~1\": 3,\n  \"01\": 4\n}\n\nassert.equal(jsonpointer.get(complexKeys, \"/a~1b/c\"), 1);\nassert.equal(jsonpointer.get(complexKeys, \"/d/e~1f\"), 2);\nassert.equal(jsonpointer.get(complexKeys, \"/~01\"), 3);\nassert.equal(jsonpointer.get(complexKeys, \"/01\"), 4);\nassert.equal(jsonpointer.get(complexKeys, \"/a/b/c\"), null);\nassert.equal(jsonpointer.get(complexKeys, \"/~1\"), null);\n\n// draft-ietf-appsawg-json-pointer-08 has special array rules\nvar ary = [ \"zero\", \"one\", \"two\" ];\nassert.equal(jsonpointer.get(ary, \"/01\"), null);\n\n//assert.equal(jsonpointer.set(ary, \"/-\", \"three\"), null);\n//assert.equal(ary[3], \"three\");\n\n// Examples from the draft:\nvar example = {\n  \"foo\": [\"bar\", \"baz\"],\n  \"\": 0,\n  \"a/b\": 1,\n  \"c%d\": 2,\n  \"e^f\": 3,\n  \"g|h\": 4,\n  \"i\\\\j\": 5,\n  \"k\\\"l\": 6,\n  \" \": 7,\n  \"m~n\": 8\n};\n\nassert.equal(jsonpointer.get(example, \"\"), example);\nvar ans = jsonpointer.get(example, \"/foo\");\nassert.equal(ans.length, 2);\nassert.equal(ans[0], \"bar\");\nassert.equal(ans[1], \"baz\");\nassert.equal(jsonpointer.get(example, \"/foo/0\"), \"bar\");\nassert.equal(jsonpointer.get(example, \"/\"), 0);\nassert.equal(jsonpointer.get(example, \"/a~1b\"), 1);\nassert.equal(jsonpointer.get(example, \"/c%d\"), 2);\nassert.equal(jsonpointer.get(example, \"/e^f\"), 3);\nassert.equal(jsonpointer.get(example, \"/g|h\"), 4);\nassert.equal(jsonpointer.get(example, \"/i\\\\j\"), 5);\nassert.equal(jsonpointer.get(example, \"/k\\\"l\"), 6);\nassert.equal(jsonpointer.get(example, \"/ \"), 7);\nassert.equal(jsonpointer.get(example, \"/m~0n\"), 8);\n\nconsole.log(\"All tests pass.\");\n"]}