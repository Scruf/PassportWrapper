{"version":3,"sources":["sshpk-verify"],"names":[],"mappings":"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","file":"sshpk-verify-compiled.js","sourcesContent":["#!/usr/bin/env node\n// -*- mode: js -*-\n// vim: set filetype=javascript :\n// Copyright 2015 Joyent, Inc.  All rights reserved.\n\nvar dashdash = require('dashdash');\nvar sshpk = require('../lib/index');\nvar fs = require('fs');\nvar path = require('path');\n\nvar options = [\n\t{\n\t\tnames: ['hash', 'H'],\n\t\ttype: 'string',\n\t\thelp: 'Hash algorithm (sha1, sha256, sha384, sha512)'\n\t},\n\t{\n\t\tnames: ['verbose', 'v'],\n\t\ttype: 'bool',\n\t\thelp: 'Display verbose info about key and hash used'\n\t},\n\t{\n\t\tnames: ['identity', 'i'],\n\t\ttype: 'string',\n\t\thelp: 'Path to (public) key to use'\n\t},\n\t{\n\t\tnames: ['file', 'f'],\n\t\ttype: 'string',\n\t\thelp: 'Input filename'\n\t},\n\t{\n\t\tnames: ['format', 't'],\n\t\ttype: 'string',\n\t\thelp: 'Signature format (asn1, ssh, raw)'\n\t},\n\t{\n\t\tnames: ['signature', 's'],\n\t\ttype: 'string',\n\t\thelp: 'base64-encoded signature data'\n\t},\n\t{\n\t\tnames: ['help', 'h'],\n\t\ttype: 'bool',\n\t\thelp: 'Shows this help text'\n\t}\n];\n\nif (require.main === module) {\n\tvar parser = dashdash.createParser({\n\t\toptions: options\n\t});\n\n\ttry {\n\t\tvar opts = parser.parse(process.argv);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error: %s', e.message);\n\t\tprocess.exit(3);\n\t}\n\n\tif (opts.help || opts._args.length > 1) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: sign data using an SSH key\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.identity) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -i or --identity option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tif (!opts.signature) {\n\t\tvar help = parser.help({}).trimRight();\n\t\tconsole.error('sshpk-verify: the -s or --signature option ' +\n\t\t    'is required\\n');\n\t\tconsole.error(help);\n\t\tprocess.exit(3);\n\t}\n\n\tvar keyData = fs.readFileSync(opts.identity);\n\n\tvar key;\n\ttry {\n\t\tkey = sshpk.parseKey(keyData);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error loading key \"' +\n\t\t    opts.identity + '\": ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar fmt = opts.format || 'asn1';\n\tvar sigData = new Buffer(opts.signature, 'base64');\n\n\tvar sig;\n\ttry {\n\t\tsig = sshpk.parseSignature(sigData, key.type, fmt);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error parsing signature: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tvar hash = opts.hash || key.defaultHashAlgorithm();\n\n\tvar verifier;\n\ttry {\n\t\tverifier = key.createVerify(hash);\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error creating verifier: ' +\n\t\t    e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tif (opts.verbose) {\n\t\tconsole.error('sshpk-verify: using %s-%s with a %d bit key',\n\t\t    key.type, hash, key.size);\n\t}\n\n\tvar inFile = process.stdin;\n\tvar inFileName = 'stdin';\n\n\tvar inFilePath;\n\tif (opts.file) {\n\t\tinFilePath = opts.file;\n\t} else if (opts._args.length === 1) {\n\t\tinFilePath = opts._args[0];\n\t}\n\n\tif (inFilePath)\n\t\tinFileName = path.basename(inFilePath);\n\n\ttry {\n\t\tif (inFilePath) {\n\t\t\tfs.accessSync(inFilePath, fs.R_OK);\n\t\t\tinFile = fs.createReadStream(inFilePath);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error('sshpk-verify: error opening input file' +\n\t\t     ': ' + e.name + ': ' + e.message);\n\t\tprocess.exit(2);\n\t}\n\n\tinFile.pipe(verifier);\n\tinFile.on('end', function () {\n\t\tvar ret;\n\t\ttry {\n\t\t\tret = verifier.verify(sig);\n\t\t} catch (e) {\n\t\t\tconsole.error('sshpk-verify: error verifying data: ' +\n\t\t\t    e.name + ': ' + e.message);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (ret) {\n\t\t\tconsole.error('OK');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconsole.error('NOT OK');\n\t\tprocess.exit(1);\n\t});\n}\n"]}