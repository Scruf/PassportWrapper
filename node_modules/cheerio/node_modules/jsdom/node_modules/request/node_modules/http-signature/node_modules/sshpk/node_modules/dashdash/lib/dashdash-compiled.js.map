{"version":3,"sources":["dashdash.js"],"names":[],"mappings":"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","file":"dashdash-compiled.js","sourcesContent":["/**\n * dashdash - A light, featureful and explicit option parsing library for\n * node.js.\n */\n// vim: set ts=4 sts=4 sw=4 et:\n\nvar assert = require('assert-plus');\nvar format = require('util').format;\nvar fs = require('fs');\nvar path = require('path');\n\n\nvar DEBUG = true;\nif (DEBUG) {\n    var debug = console.warn;\n} else {\n    var debug = function () {};\n}\n\n\n\n// ---- internal support stuff\n\n// Replace {{variable}} in `s` with the template data in `d`.\nfunction renderTemplate(s, d) {\n    return s.replace(/{{([a-zA-Z]+)}}/g, function (match, key) {\n        return d.hasOwnProperty(key) ? d[key] : match;\n    });\n}\n\n/**\n * Return a shallow copy of the given object;\n */\nfunction shallowCopy(obj) {\n    if (!obj) {\n        return (obj);\n    }\n    var copy = {};\n    Object.keys(obj).forEach(function (k) {\n        copy[k] = obj[k];\n    });\n    return (copy);\n}\n\n\nfunction space(n) {\n    var s = '';\n    for (var i = 0; i < n; i++) {\n        s += ' ';\n    }\n    return s;\n}\n\n\nfunction makeIndent(arg, deflen, name) {\n    if (arg === null || arg === undefined)\n        return space(deflen);\n    else if (typeof (arg) === 'number')\n        return space(arg);\n    else if (typeof (arg) === 'string')\n        return arg;\n    else\n        assert.fail('invalid \"' + name + '\": not a string or number: ' + arg);\n}\n\n\n/**\n * Return an array of lines wrapping the given text to the given width.\n * This splits on whitespace. Single tokens longer than `width` are not\n * broken up.\n */\nfunction textwrap(s, width) {\n    var words = s.trim().split(/\\s+/);\n    var lines = [];\n    var line = '';\n    words.forEach(function (w) {\n        var newLength = line.length + w.length;\n        if (line.length > 0)\n            newLength += 1;\n        if (newLength > width) {\n            lines.push(line);\n            line = '';\n        }\n        if (line.length > 0)\n            line += ' ';\n        line += w;\n    });\n    lines.push(line);\n    return lines;\n}\n\n\n/**\n * Transform an option name to a \"key\" that is used as the field\n * on the `opts` object returned from `<parser>.parse()`.\n *\n * Transformations:\n * - '-' -> '_': This allow one to use hyphen in option names (common)\n *   but not have to do silly things like `opt[\"dry-run\"]` to access the\n *   parsed results.\n */\nfunction optionKeyFromName(name) {\n    return name.replace(/-/g, '_');\n}\n\n\n\n// ---- Option types\n\nfunction parseBool(option, optstr, arg) {\n    return Boolean(arg);\n}\n\nfunction parseString(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    return arg;\n}\n\nfunction parseNumber(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not a number: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parseInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9-]+$/.test(arg) || isNaN(num)) {\n        throw new Error(format('arg for \"%s\" is not an integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\nfunction parsePositiveInteger(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var num = Number(arg);\n    if (!/^[0-9]+$/.test(arg) || isNaN(num) || num === 0) {\n        throw new Error(format('arg for \"%s\" is not a positive integer: \"%s\"',\n            optstr, arg));\n    }\n    return num;\n}\n\n/**\n * Supported date args:\n * - epoch second times (e.g. 1396031701)\n * - ISO 8601 format: YYYY-MM-DD[THH:MM:SS[.sss][Z]]\n *      2014-03-28T18:35:01.489Z\n *      2014-03-28T18:35:01.489\n *      2014-03-28T18:35:01Z\n *      2014-03-28T18:35:01\n *      2014-03-28\n */\nfunction parseDate(option, optstr, arg) {\n    assert.string(arg, 'arg');\n    var date;\n    if (/^\\d+$/.test(arg)) {\n        // epoch seconds\n        date = new Date(Number(arg) * 1000);\n    /* JSSTYLED */\n    } else if (/^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?)?$/i.test(arg)) {\n        // ISO 8601 format\n        date = new Date(arg);\n    } else {\n        throw new Error(format('arg for \"%s\" is not a valid date format: \"%s\"',\n            optstr, arg));\n    }\n    if (date.toString() === 'Invalid Date') {\n        throw new Error(format('arg for \"%s\" is an invalid date: \"%s\"',\n            optstr, arg));\n    }\n    return date;\n}\n\nvar optionTypes = {\n    bool: {\n        takesArg: false,\n        parseArg: parseBool\n    },\n    string: {\n        takesArg: true,\n        helpArg: 'ARG',\n        parseArg: parseString\n    },\n    number: {\n        takesArg: true,\n        helpArg: 'NUM',\n        parseArg: parseNumber\n    },\n    integer: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parseInteger\n    },\n    positiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        parseArg: parsePositiveInteger\n    },\n    date: {\n        takesArg: true,\n        helpArg: 'DATE',\n        parseArg: parseDate\n    },\n    arrayOfBool: {\n        takesArg: false,\n        array: true,\n        parseArg: parseBool\n    },\n    arrayOfString: {\n        takesArg: true,\n        helpArg: 'ARG',\n        array: true,\n        parseArg: parseString\n    },\n    arrayOfNumber: {\n        takesArg: true,\n        helpArg: 'NUM',\n        array: true,\n        parseArg: parseNumber\n    },\n    arrayOfInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseInteger\n    },\n    arrayOfPositiveInteger: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parsePositiveInteger\n    },\n    arrayOfDate: {\n        takesArg: true,\n        helpArg: 'INT',\n        array: true,\n        parseArg: parseDate\n    },\n};\n\n\n\n// ---- Parser\n\n/**\n * Parser constructor.\n *\n * @param config {Object} The parser configuration\n *      - options {Array} Array of option specs. See the README for how to\n *        specify each option spec.\n *      - allowUnknown {Boolean} Default false. Whether to throw on unknown\n *        options. If false, then unknown args are included in the _args array.\n *      - interspersed {Boolean} Default true. Whether to allow interspersed\n *        arguments (non-options) and options. E.g.:\n *              node tool.js arg1 arg2 -v\n *        '-v' is after some args here. If `interspersed: false` then '-v'\n *        would not be parsed out. Note that regardless of `interspersed`\n *        the presence of '--' will stop option parsing, as all good\n *        option parsers should.\n */\nfunction Parser(config) {\n    assert.object(config, 'config');\n    assert.arrayOfObject(config.options, 'config.options');\n    assert.optionalBool(config.interspersed, 'config.interspersed');\n    var self = this;\n\n    // Allow interspersed arguments (true by default).\n    this.interspersed = (config.interspersed !== undefined\n        ? config.interspersed : true);\n\n    // Don't allow unknown flags (true by default).\n    this.allowUnknown = (config.allowUnknown !== undefined\n        ? config.allowUnknown : false);\n\n    this.options = config.options.map(function (o) { return shallowCopy(o); });\n    this.optionFromName = {};\n    this.optionFromEnv = {};\n    for (var i = 0; i < this.options.length; i++) {\n        var o = this.options[i];\n        if (o.group !== undefined && o.group !== null) {\n            assert.optionalString(o.group,\n                format('config.options.%d.group', i));\n            continue;\n        }\n        assert.ok(optionTypes[o.type],\n            format('invalid config.options.%d.type: \"%s\" in %j',\n                   i, o.type, o));\n        assert.optionalString(o.name, format('config.options.%d.name', i));\n        assert.optionalArrayOfString(o.names,\n            format('config.options.%d.names', i));\n        assert.ok((o.name || o.names) && !(o.name && o.names),\n            format('exactly one of \"name\" or \"names\" required: %j', o));\n        assert.optionalString(o.help, format('config.options.%d.help', i));\n        var env = o.env || [];\n        if (typeof (env) === 'string') {\n            env = [env];\n        }\n        assert.optionalArrayOfString(env, format('config.options.%d.env', i));\n        assert.optionalString(o.helpGroup,\n            format('config.options.%d.helpGroup', i));\n        assert.optionalBool(o.helpWrap,\n            format('config.options.%d.helpWrap', i));\n        assert.optionalBool(o.hidden, format('config.options.%d.hidden', i));\n\n        if (o.name) {\n            o.names = [o.name];\n        } else {\n            assert.string(o.names[0],\n                format('config.options.%d.names is empty', i));\n        }\n        o.key = optionKeyFromName(o.names[0]);\n        o.names.forEach(function (n) {\n            if (self.optionFromName[n]) {\n                throw new Error(format(\n                    'option name collision: \"%s\" used in %j and %j',\n                    n, self.optionFromName[n], o));\n            }\n            self.optionFromName[n] = o;\n        });\n        env.forEach(function (n) {\n            if (self.optionFromEnv[n]) {\n                throw new Error(format(\n                    'option env collision: \"%s\" used in %j and %j',\n                    n, self.optionFromEnv[n], o));\n            }\n            self.optionFromEnv[n] = o;\n        });\n    }\n}\n\nParser.prototype.optionTakesArg = function optionTakesArg(option) {\n    return optionTypes[option.type].takesArg;\n};\n\n/**\n * Parse options from the given argv.\n *\n * @param inputs {Object} Optional.\n *      - argv {Array} Optional. The argv to parse. Defaults to\n *        `process.argv`.\n *      - slice {Number} The index into argv at which options/args begin.\n *        Default is 2, as appropriate for `process.argv`.\n *      - env {Object} Optional. The env to use for 'env' entries in the\n *        option specs. Defaults to `process.env`.\n * @returns {Object} Parsed `opts`. It has special keys `_args` (the\n *      remaining args from `argv`) and `_order` (gives the order that\n *      options were specified).\n */\nParser.prototype.parse = function parse(inputs) {\n    var self = this;\n\n    // Old API was `parse([argv, [slice]])`\n    if (Array.isArray(arguments[0])) {\n        inputs = {argv: arguments[0], slice: arguments[1]};\n    }\n\n    assert.optionalObject(inputs, 'inputs');\n    if (!inputs) {\n        inputs = {};\n    }\n    assert.optionalArrayOfString(inputs.argv, 'inputs.argv');\n    //assert.optionalNumber(slice, 'slice');\n    var argv = inputs.argv || process.argv;\n    var slice = inputs.slice !== undefined ? inputs.slice : 2;\n    var args = argv.slice(slice);\n    var env = inputs.env || process.env;\n    var opts = {};\n    var _order = [];\n\n    function addOpt(option, optstr, key, val, from) {\n        var type = optionTypes[option.type];\n        var parsedVal = type.parseArg(option, optstr, val);\n        if (type.array) {\n            if (!opts[key]) {\n                opts[key] = [];\n            }\n            if (type.arrayFlatten && Array.isArray(parsedVal)) {\n                for (var i = 0; i < parsedVal.length; i++) {\n                    opts[key].push(parsedVal[i]);\n                }\n            } else {\n                opts[key].push(parsedVal);\n            }\n        } else {\n            opts[key] = parsedVal;\n        }\n        var item = { key: key, value: parsedVal, from: from };\n        _order.push(item);\n    }\n\n    // Parse args.\n    var _args = [];\n    var i = 0;\n    outer: while (i < args.length) {\n        var arg = args[i];\n\n        // End of options marker.\n        if (arg === '--') {\n            i++;\n            break;\n\n        // Long option\n        } else if (arg.slice(0, 2) === '--') {\n            var name = arg.slice(2);\n            var val = null;\n            var idx = name.indexOf('=');\n            if (idx !== -1) {\n                val = name.slice(idx + 1);\n                name = name.slice(0, idx);\n            }\n            var option = this.optionFromName[name];\n            if (!option) {\n                if (!this.allowUnknown)\n                    throw new Error(format('unknown option: \"--%s\"', name));\n                else if (this.interspersed)\n                    _args.push(arg);\n                else\n                    break outer;\n            } else {\n                var takesArg = this.optionTakesArg(option);\n                if (val !== null && !takesArg) {\n                    throw new Error(format('argument given to \"--%s\" option '\n                        + 'that does not take one: \"%s\"', name, arg));\n                }\n                if (!takesArg) {\n                    addOpt(option, '--'+name, option.key, true, 'argv');\n                } else if (val !== null) {\n                    addOpt(option, '--'+name, option.key, val, 'argv');\n                } else if (i + 1 >= args.length) {\n                    throw new Error(format('do not have enough args for \"--%s\" '\n                        + 'option', name));\n                } else {\n                    addOpt(option, '--'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                }\n            }\n\n        // Short option\n        } else if (arg[0] === '-' && arg.length > 1) {\n            var j = 1;\n            var allFound = true;\n            while (j < arg.length) {\n                var name = arg[j];\n                var option = this.optionFromName[name];\n                if (!option) {\n                    allFound = false;\n                    if (this.allowUnknown) {\n                        if (this.interspersed) {\n                            _args.push(arg);\n                            break;\n                        } else\n                            break outer;\n                    } else if (arg.length > 2) {\n                        throw new Error(format(\n                            'unknown option: \"-%s\" in \"%s\" group',\n                            name, arg));\n                    } else {\n                        throw new Error(format('unknown option: \"-%s\"', name));\n                    }\n                } else if (this.optionTakesArg(option)) {\n                    break;\n                }\n                j++;\n            }\n\n            j = 1;\n            while (allFound && j < arg.length) {\n                var name = arg[j];\n                var val = arg.slice(j + 1);  // option val if it takes an arg\n                var option = this.optionFromName[name];\n                var takesArg = this.optionTakesArg(option);\n                if (!takesArg) {\n                    addOpt(option, '-'+name, option.key, true, 'argv');\n                } else if (val) {\n                    addOpt(option, '-'+name, option.key, val, 'argv');\n                    break;\n                } else {\n                    if (i + 1 >= args.length) {\n                        throw new Error(format('do not have enough args '\n                            + 'for \"-%s\" option', name));\n                    }\n                    addOpt(option, '-'+name, option.key, args[i + 1], 'argv');\n                    i++;\n                    break;\n                }\n                j++;\n            }\n\n        // An interspersed arg\n        } else if (this.interspersed) {\n            _args.push(arg);\n\n        // An arg and interspersed args are not allowed, so done options.\n        } else {\n            break outer;\n        }\n        i++;\n    }\n    _args = _args.concat(args.slice(i));\n\n    // Parse environment.\n    Object.keys(this.optionFromEnv).forEach(function (envname) {\n        var val = env[envname];\n        if (val === undefined)\n            return;\n        var option = self.optionFromEnv[envname];\n        if (opts[option.key] !== undefined)\n            return;\n        var takesArg = self.optionTakesArg(option);\n        if (takesArg) {\n            addOpt(option, envname, option.key, val, 'env');\n        } else if (val !== '') {\n            // Boolean envvar handling:\n            // - VAR=<empty-string>     not set (as if the VAR was not set)\n            // - VAR=0                  false\n            // - anything else          true\n            addOpt(option, envname, option.key, (val !== '0'), 'env');\n        }\n    });\n\n    // Apply default values.\n    this.options.forEach(function (o) {\n        if (opts[o.key] === undefined) {\n            if (o.default !== undefined) {\n                opts[o.key] = o.default;\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                opts[o.key] = optionTypes[o.type].default;\n            }\n        }\n    });\n\n    opts._order = _order;\n    opts._args = _args;\n    return opts;\n};\n\n\n/**\n * Return help output for the current options.\n *\n * E.g.: if the current options are:\n *      [{names: ['help', 'h'], type: 'bool', help: 'Show help and exit.'}]\n * then this would return:\n *      '  -h, --help     Show help and exit.\\n'\n *\n * @param config {Object} Config for controlling the option help output.\n *      - indent {Number|String} Default 4. An indent/prefix to use for\n *        each option line.\n *      - nameSort {String} Default is 'length'. By default the names are\n *        sorted to put the short opts first (i.e. '-h, --help' preferred\n *        to '--help, -h'). Set to 'none' to not do this sorting.\n *      - maxCol {Number} Default 80. Note that long tokens in a help string\n *        can go past this.\n *      - helpCol {Number} Set to specify a specific column at which\n *        option help will be aligned. By default this is determined\n *        automatically.\n *      - minHelpCol {Number} Default 20.\n *      - maxHelpCol {Number} Default 40.\n *      - includeEnv {Boolean} Default false. If true, a note stating the `env`\n *        envvar (if specified for this option) will be appended to the help\n *        output.\n *      - includeDefault {Boolean} Default false. If true, a note stating\n *        the `default` for this option, if any, will be appended to the help\n *        output.\n *      - helpWrap {Boolean} Default true. Wrap help text in helpCol..maxCol\n *        bounds.\n * @returns {String}\n */\nParser.prototype.help = function help(config) {\n    config = config || {};\n    assert.object(config, 'config');\n\n    var indent = makeIndent(config.indent, 4, 'config.indent');\n    var headingIndent = makeIndent(config.headingIndent,\n        Math.round(indent.length / 2), 'config.headingIndent');\n\n    assert.optionalString(config.nameSort, 'config.nameSort');\n    var nameSort = config.nameSort || 'length';\n    assert.ok(~['length', 'none'].indexOf(nameSort),\n        'invalid \"config.nameSort\"');\n    assert.optionalNumber(config.maxCol, 'config.maxCol');\n    assert.optionalNumber(config.maxHelpCol, 'config.maxHelpCol');\n    assert.optionalNumber(config.minHelpCol, 'config.minHelpCol');\n    assert.optionalNumber(config.helpCol, 'config.helpCol');\n    assert.optionalBool(config.includeEnv, 'config.includeEnv');\n    assert.optionalBool(config.includeDefault, 'config.includeDefault');\n    assert.optionalBool(config.helpWrap, 'config.helpWrap');\n    var maxCol = config.maxCol || 80;\n    var minHelpCol = config.minHelpCol || 20;\n    var maxHelpCol = config.maxHelpCol || 40;\n\n    var lines = [];\n    var maxWidth = 0;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        if (o.group !== undefined && o.group !== null) {\n            // We deal with groups in the next pass\n            lines.push(null);\n            return;\n        }\n        var type = optionTypes[o.type];\n        var arg = o.helpArg || type.helpArg || 'ARG';\n        var line = '';\n        var names = o.names.slice();\n        if (nameSort === 'length') {\n            names.sort(function (a, b) {\n                if (a.length < b.length)\n                    return -1;\n                else if (b.length < a.length)\n                    return 1;\n                else\n                    return 0;\n            })\n        }\n        names.forEach(function (name, i) {\n            if (i > 0)\n                line += ', ';\n            if (name.length === 1) {\n                line += '-' + name\n                if (type.takesArg)\n                    line += ' ' + arg;\n            } else {\n                line += '--' + name\n                if (type.takesArg)\n                    line += '=' + arg;\n            }\n        });\n        maxWidth = Math.max(maxWidth, line.length);\n        lines.push(line);\n    });\n\n    // Add help strings.\n    var helpCol = config.helpCol;\n    if (!helpCol) {\n        helpCol = maxWidth + indent.length + 2;\n        helpCol = Math.min(Math.max(helpCol, minHelpCol), maxHelpCol);\n    }\n    var i = -1;\n    this.options.forEach(function (o) {\n        if (o.hidden) {\n            return;\n        }\n        i++;\n\n        if (o.group !== undefined && o.group !== null) {\n            if (o.group === '') {\n                // Support a empty string \"group\" to have a blank line between\n                // sets of options.\n                lines[i] = '';\n            } else {\n                // Render the group heading with the heading-specific indent.\n                lines[i] = (i === 0 ? '' : '\\n') + headingIndent +\n                    o.group + ':';\n            }\n            return;\n        }\n\n        var helpDefault;\n        if (config.includeDefault) {\n            if (o.default !== undefined) {\n                helpDefault = format('Default: %j', o.default);\n            } else if (o.type && optionTypes[o.type].default !== undefined) {\n                helpDefault = format('Default: %j',\n                    optionTypes[o.type].default);\n            }\n        }\n\n        var line = lines[i] = indent + lines[i];\n        if (!o.help && !(config.includeEnv && o.env) && !helpDefault) {\n            return;\n        }\n        var n = helpCol - line.length;\n        if (n >= 0) {\n            line += space(n);\n        } else {\n            line += '\\n' + space(helpCol);\n        }\n\n        var helpEnv = '';\n        if (o.env && o.env.length && config.includeEnv) {\n            helpEnv += 'Environment: ';\n            var type = optionTypes[o.type];\n            var arg = o.helpArg || type.helpArg || 'ARG';\n            var envs = (Array.isArray(o.env) ? o.env : [o.env]).map(\n                function (e) {\n                    if (type.takesArg) {\n                        return e + '=' + arg;\n                    } else {\n                        return e + '=1';\n                    }\n                }\n            );\n            helpEnv += envs.join(', ');\n        }\n        var help = (o.help || '').trim();\n        if (o.helpWrap !== false && config.helpWrap !== false) {\n            // Wrap help description normally.\n            if (help.length && !~'.!?\"\\''.indexOf(help.slice(-1))) {\n                help += '.';\n            }\n            if (help.length) {\n                help += ' ';\n            }\n            help += helpEnv;\n            if (helpDefault) {\n                if (helpEnv) {\n                    help += '. ';\n                }\n                help += helpDefault;\n            }\n            line += textwrap(help, maxCol - helpCol).join(\n                '\\n' + space(helpCol));\n        } else {\n            // Do not wrap help description, but indent newlines appropriately.\n            var helpLines = help.split('\\n').filter(\n                    function (ln) { return ln.length });\n            if (helpEnv !== '') {\n                helpLines.push(helpEnv);\n            }\n            if (helpDefault) {\n                helpLines.push(helpDefault);\n            }\n            line += helpLines.join('\\n' + space(helpCol));\n        }\n\n        lines[i] = line;\n    });\n\n    var rv = '';\n    if (lines.length > 0) {\n        rv = lines.join('\\n') + '\\n';\n    }\n    return rv;\n};\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nParser.prototype.bashCompletion = function bashCompletion(args) {\n    assert.object(args, 'args');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    return bashCompletionFromOptions({\n        name: args.name,\n        specExtra: args.specExtra,\n        argtypes: args.argtypes,\n        options: this.options\n    });\n};\n\n\n// ---- Bash completion\n\nconst BASH_COMPLETION_TEMPLATE_PATH = path.join(\n    __dirname, '../etc/dashdash.bash_completion.in');\n\n/**\n * Return the Bash completion \"spec\" (the string value for the \"{{spec}}\"\n * var in the \"dashdash.bash_completion.in\" template) for this tool.\n *\n * The \"spec\" is Bash code that defines the CLI options and subcmds for\n * the template's completion code. It looks something like this:\n *\n *      local cmd_shortopts=\"-J ...\"\n *      local cmd_longopts=\"--help ...\"\n *      local cmd_optargs=\"-p=tritonprofile ...\"\n *\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.context {String} Optional. A context string for the \"local cmd*\"\n *      vars in the spec. By default it is the empty string. When used to\n *      scope for completion on a *sub-command* (e.g. for \"git log\" on a \"git\"\n *      tool), then it would have a value (e.g. \"__log\"). See\n *      <http://github.com/trentm/node-cmdln> Bash completion for details.\n * @param opts.includeHidden {Boolean} Optional. Default false. By default\n *      hidden options and subcmds are \"excluded\". Here excluded means they\n *      won't be offered as a completion, but if used, their argument type\n *      will be completed. \"Hidden\" options and subcmds are ones with the\n *      `hidden: true` attribute to exclude them from default help output.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionSpecFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.optionalString(args.context, 'args.context');\n    assert.optionalBool(args.includeHidden, 'args.includeHidden');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    var context = args.context || '';\n    var includeHidden = (args.includeHidden === undefined\n        ? false : args.includeHidden);\n\n    var spec = [];\n    var shortopts = [];\n    var longopts = [];\n    var optargs = [];\n    (args.options || []).forEach(function (o) {\n        if (o.group) {\n            // Skip group headers.\n            return;\n        }\n\n        var optNames = o.names || [o.name];\n        var optType = getOptionType(o.type);\n        if (optType.takesArg) {\n            var completionType = o.completionType ||\n                optType.completionType || o.type;\n            optNames.forEach(function (optName) {\n                if (optName.length === 1) {\n                    if (includeHidden || !o.hidden) {\n                        shortopts.push('-' + optName);\n                    }\n                    // Include even hidden options in `optargs` so that bash\n                    // completion of its arg still works.\n                    optargs.push('-' + optName + '=' + completionType);\n                } else {\n                    if (includeHidden || !o.hidden) {\n                        longopts.push('--' + optName);\n                    }\n                    optargs.push('--' + optName + '=' + completionType);\n                }\n            });\n        } else {\n            optNames.forEach(function (optName) {\n                if (includeHidden || !o.hidden) {\n                    if (optName.length === 1) {\n                        shortopts.push('-' + optName);\n                    } else {\n                        longopts.push('--' + optName);\n                    }\n                }\n            });\n        }\n    });\n\n    spec.push(format('local cmd%s_shortopts=\"%s\"',\n        context, shortopts.sort().join(' ')));\n    spec.push(format('local cmd%s_longopts=\"%s\"',\n        context, longopts.sort().join(' ')));\n    spec.push(format('local cmd%s_optargs=\"%s\"',\n        context, optargs.sort().join(' ')));\n    if (args.argtypes) {\n        spec.push(format('local cmd%s_argtypes=\"%s\"',\n            context, args.argtypes.join(' ')));\n    }\n    return spec.join('\\n');\n}\n\n\n/**\n * Return a string suitable for a Bash completion file for this tool.\n *\n * @param args.name {String} The tool name.\n * @param args.options {Array} The array of dashdash option specs.\n * @param args.specExtra {String} Optional. Extra Bash code content to add\n *      to the end of the \"spec\". Typically this is used to append Bash\n *      \"complete_TYPE\" functions for custom option types. See\n *      \"examples/ddcompletion.js\" for an example.\n * @param args.argtypes {Array} Optional. Array of completion types for\n *      positional args (i.e. non-options). E.g.\n *          argtypes = ['fruit', 'veggie', 'file']\n *      will result in completion of fruits for the first arg, veggies for the\n *      second, and filenames for the third and subsequent positional args.\n *      If not given, positional args will use Bash's 'default' completion.\n *      See `specExtra` for providing Bash `complete_TYPE` functions, e.g.\n *      `complete_fruit` and `complete_veggie` in this example.\n */\nfunction bashCompletionFromOptions(args) {\n    assert.object(args, 'args');\n    assert.object(args.options, 'args.options');\n    assert.string(args.name, 'args.name');\n    assert.optionalString(args.specExtra, 'args.specExtra');\n    assert.optionalArrayOfString(args.argtypes, 'args.argtypes');\n\n    // Gather template data.\n    var data = {\n        name: args.name,\n        date: new Date(),\n        spec: bashCompletionSpecFromOptions({\n            options: args.options,\n            argtypes: args.argtypes\n        }),\n    };\n    if (args.specExtra) {\n        data.spec += '\\n\\n' + args.specExtra;\n    }\n\n    // Render template.\n    var template = fs.readFileSync(BASH_COMPLETION_TEMPLATE_PATH, 'utf8');\n    return renderTemplate(template, data);\n}\n\n\n\n// ---- exports\n\nfunction createParser(config) {\n    return new Parser(config);\n}\n\n/**\n * Parse argv with the given options.\n *\n * @param config {Object} A merge of all the available fields from\n *      `dashdash.Parser` and `dashdash.Parser.parse`: options, interspersed,\n *      argv, env, slice.\n */\nfunction parse(config) {\n    assert.object(config, 'config');\n    assert.optionalArrayOfString(config.argv, 'config.argv');\n    assert.optionalObject(config.env, 'config.env');\n    var config = shallowCopy(config);\n    var argv = config.argv;\n    delete config.argv;\n    var env = config.env;\n    delete config.env;\n\n    var parser = new Parser(config);\n    return parser.parse({argv: argv, env: env});\n}\n\n\n/**\n * Add a new option type.\n *\n * @params optionType {Object}:\n *      - name {String} Required.\n *      - takesArg {Boolean} Required. Whether this type of option takes an\n *        argument on process.argv. Typically this is true for all but the\n *        \"bool\" type.\n *      - helpArg {String} Required iff `takesArg === true`. The string to\n *        show in generated help for options of this type.\n *      - parseArg {Function} Require. `function (option, optstr, arg)` parser\n *        that takes a string argument and returns an instance of the\n *        appropriate type, or throws an error if the arg is invalid.\n *      - array {Boolean} Optional. Set to true if this is an 'arrayOf' type\n *        that collects multiple usages of the option in process.argv and\n *        puts results in an array.\n *      - arrayFlatten {Boolean} Optional. XXX\n *      - default Optional. Default value for options of this type, if no\n *        default is specified in the option type usage.\n */\nfunction addOptionType(optionType) {\n    assert.object(optionType, 'optionType');\n    assert.string(optionType.name, 'optionType.name');\n    assert.bool(optionType.takesArg, 'optionType.takesArg');\n    if (optionType.takesArg) {\n        assert.string(optionType.helpArg, 'optionType.helpArg');\n    }\n    assert.func(optionType.parseArg, 'optionType.parseArg');\n    assert.optionalBool(optionType.array, 'optionType.array');\n    assert.optionalBool(optionType.arrayFlatten, 'optionType.arrayFlatten');\n\n    optionTypes[optionType.name] = {\n        takesArg: optionType.takesArg,\n        helpArg: optionType.helpArg,\n        parseArg: optionType.parseArg,\n        array: optionType.array,\n        arrayFlatten: optionType.arrayFlatten,\n        default: optionType.default\n    }\n}\n\n\nfunction getOptionType(name) {\n    assert.string(name, 'name');\n    return optionTypes[name];\n}\n\n\nmodule.exports = {\n    createParser: createParser,\n    Parser: Parser,\n    parse: parse,\n    addOptionType: addOptionType,\n    getOptionType: getOptionType,\n\n    // Bash completion-related exports\n    BASH_COMPLETION_TEMPLATE_PATH: BASH_COMPLETION_TEMPLATE_PATH,\n    bashCompletionFromOptions: bashCompletionFromOptions,\n    bashCompletionSpecFromOptions: bashCompletionSpecFromOptions,\n\n    // Export the parseFoo parsers because they might be useful as primitives\n    // for custom option types.\n    parseBool: parseBool,\n    parseString: parseString,\n    parseNumber: parseNumber,\n    parseInteger: parseInteger,\n    parsePositiveInteger: parsePositiveInteger,\n    parseDate: parseDate\n};\n"]}