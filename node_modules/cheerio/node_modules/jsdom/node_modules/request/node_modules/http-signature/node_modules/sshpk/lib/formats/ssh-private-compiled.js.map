{"version":3,"sources":["ssh-private.js"],"names":[],"mappings":"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","file":"ssh-private-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\treadSSHPrivate: readSSHPrivate,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar crypto = require('crypto');\n\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\nvar pem = require('./pem');\nvar rfc4253 = require('./rfc4253');\nvar SSHBuffer = require('../ssh-buffer');\n\nfunction read(buf) {\n\treturn (pem.read(buf));\n}\n\nvar MAGIC = 'openssh-key-v1';\n\nfunction readSSHPrivate(type, buf) {\n\tbuf = new SSHBuffer({buffer: buf});\n\n\tvar magic = buf.readCString();\n\tassert.strictEqual(magic, MAGIC, 'bad magic string');\n\n\tvar cipher = buf.readString();\n\tvar kdf = buf.readString();\n\n\t/* We only support unencrypted keys. */\n\tif (cipher !== 'none' || kdf !== 'none') {\n\t\tthrow (new Error('OpenSSH-format key is encrypted ' +\n\t\t     '(password-protected). Please use the SSH agent ' +\n\t\t     'or decrypt the key.'));\n\t}\n\n\t/* Skip over kdfoptions. */\n\tbuf.readString();\n\n\tvar nkeys = buf.readInt();\n\tif (nkeys !== 1) {\n\t\tthrow (new Error('OpenSSH-format key file contains ' +\n\t\t    'multiple keys: this is unsupported.'));\n\t}\n\n\tvar pubKey = buf.readBuffer();\n\n\tif (type === 'public') {\n\t\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\t\treturn (rfc4253.read(pubKey));\n\t}\n\n\tvar privKeyBlob = buf.readBuffer();\n\tassert.ok(buf.atEnd(), 'excess bytes left after key');\n\n\tbuf = new SSHBuffer({buffer: privKeyBlob});\n\n\tvar checkInt1 = buf.readInt();\n\tvar checkInt2 = buf.readInt();\n\tassert.strictEqual(checkInt1, checkInt2, 'checkints do not match');\n\n\tvar ret = {};\n\tvar key = rfc4253.readInternal(ret, 'private', buf.remainder());\n\n\tbuf.skip(ret.consumed);\n\n\tvar comment = buf.readString();\n\tkey.comment = comment;\n\n\treturn (key);\n}\n\nfunction write(key) {\n\tvar pubKey;\n\tif (PrivateKey.isPrivateKey(key))\n\t\tpubKey = key.toPublic();\n\telse\n\t\tpubKey = key;\n\n\tvar privBuf;\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tprivBuf = new SSHBuffer({});\n\t\tvar checkInt = crypto.randomBytes(4).readUInt32BE(0);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.writeInt(checkInt);\n\t\tprivBuf.write(key.toBuffer('rfc4253'));\n\t\tprivBuf.writeString(key.comment || '');\n\n\t\tvar n = 1;\n\t\twhile (privBuf._offset % 8 !== 0)\n\t\t\tprivBuf.writeChar(n++);\n\t}\n\n\tvar buf = new SSHBuffer({});\n\n\tbuf.writeCString(MAGIC);\n\tbuf.writeString('none');\t/* cipher */\n\tbuf.writeString('none');\t/* kdf */\n\tbuf.writeBuffer(new Buffer(0));\t/* kdfoptions */\n\n\tbuf.writeInt(1);\t\t/* nkeys */\n\tbuf.writeBuffer(pubKey.toBuffer('rfc4253'));\n\n\tif (privBuf)\n\t\tbuf.writeBuffer(privBuf.toBuffer());\n\n\tbuf = buf.toBuffer();\n\n\tvar header;\n\tif (PrivateKey.isPrivateKey(key))\n\t\theader = 'OPENSSH PRIVATE KEY';\n\telse\n\t\theader = 'OPENSSH PUBLIC KEY';\n\n\tvar tmp = buf.toString('base64');\n\tvar len = tmp.length + (tmp.length / 70) +\n\t    18 + 16 + header.length*2 + 10;\n\tbuf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 70;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}