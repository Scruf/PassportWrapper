{"version":3,"sources":["signer.js"],"names":[],"mappings":"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","file":"signer-compiled.js","sourcesContent":["// Copyright 2012 Joyent, Inc.  All rights reserved.\n\nvar assert = require('assert-plus');\nvar crypto = require('crypto');\nvar http = require('http');\nvar util = require('util');\nvar sshpk = require('sshpk');\nvar jsprim = require('jsprim');\nvar utils = require('./utils');\n\nvar sprintf = require('util').format;\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n\n///--- Globals\n\nvar AUTHZ_FMT =\n  'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n\n///--- Specific Errors\n\nfunction MissingHeaderError(message) {\n  HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\n\nfunction StrictParsingError(message) {\n  HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n\n/* See createSigner() */\nfunction RequestSigner(options) {\n  assert.object(options, 'options');\n\n  var alg = [];\n  if (options.algorithm !== undefined) {\n    assert.string(options.algorithm, 'options.algorithm');\n    alg = validateAlgorithm(options.algorithm);\n  }\n  this.rs_alg = alg;\n\n  /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */\n  if (options.sign !== undefined) {\n    assert.func(options.sign, 'options.sign');\n    this.rs_signFunc = options.sign;\n\n  } else if (alg[0] === 'hmac' && options.key !== undefined) {\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n      throw (new TypeError('options.key for HMAC must be a string or Buffer'));\n\n    /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */\n    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n    this.rs_signer.sign = function () {\n      var digest = this.digest('base64');\n      return ({\n        hashAlgorithm: alg[1],\n        toString: function () { return (digest); }\n      });\n    };\n\n  } else if (options.key !== undefined) {\n    var key = options.key;\n    if (typeof (key) === 'string' || Buffer.isBuffer(key))\n      key = sshpk.parsePrivateKey(key);\n\n    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n      'options.key must be a sshpk.PrivateKey');\n    this.rs_key = key;\n\n    assert.string(options.keyId, 'options.keyId');\n    this.rs_keyId = options.keyId;\n\n    if (!PK_ALGOS[key.type]) {\n      throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n        'keys are not supported'));\n    }\n\n    if (alg[0] !== undefined && key.type !== alg[0]) {\n      throw (new InvalidAlgorithmError('options.key must be a ' +\n        alg[0].toUpperCase() + ' key, was given a ' +\n        key.type.toUpperCase() + ' key instead'));\n    }\n\n    this.rs_signer = key.createSign(alg[1]);\n\n  } else {\n    throw (new TypeError('options.sign (func) or options.key is required'));\n  }\n\n  this.rs_headers = [];\n  this.rs_lines = [];\n}\n\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */\nRequestSigner.prototype.writeHeader = function (header, value) {\n  assert.string(header, 'header');\n  header = header.toLowerCase();\n  assert.string(value, 'value');\n\n  this.rs_headers.push(header);\n\n  if (this.rs_signFunc) {\n    this.rs_lines.push(header + ': ' + value);\n\n  } else {\n    var line = header + ': ' + value;\n    if (this.rs_headers.length > 0)\n      line = '\\n' + line;\n    this.rs_signer.update(line);\n  }\n\n  return (value);\n};\n\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */\nRequestSigner.prototype.writeDateHeader = function () {\n  return (this.writeHeader('date', jsprim.rfc1123(new Date())));\n};\n\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */\nRequestSigner.prototype.writeTarget = function (method, path) {\n  assert.string(method, 'method');\n  assert.string(path, 'path');\n  method = method.toLowerCase();\n  this.writeHeader('(request-target)', method + ' ' + path);\n};\n\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */\nRequestSigner.prototype.sign = function (cb) {\n  assert.func(cb, 'callback');\n\n  if (this.rs_headers.length < 1)\n    throw (new Error('At least one header must be signed'));\n\n  var alg, authz;\n  if (this.rs_signFunc) {\n    var data = this.rs_lines.join('\\n');\n    var self = this;\n    this.rs_signFunc(data, function (err, sig) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      try {\n        assert.object(sig, 'signature');\n        assert.string(sig.keyId, 'signature.keyId');\n        assert.string(sig.algorithm, 'signature.algorithm');\n        assert.string(sig.signature, 'signature.signature');\n        alg = validateAlgorithm(sig.algorithm);\n\n        authz = sprintf(AUTHZ_FMT,\n          sig.keyId,\n          sig.algorithm,\n          self.rs_headers.join(' '),\n          sig.signature);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n      cb(null, authz);\n    });\n\n  } else {\n    try {\n      var sigObj = this.rs_signer.sign();\n    } catch (e) {\n      cb(e);\n      return;\n    }\n    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;\n    var signature = sigObj.toString();\n    authz = sprintf(AUTHZ_FMT,\n      this.rs_keyId,\n      alg,\n      this.rs_headers.join(' '),\n      signature);\n    cb(null, authz);\n  }\n};\n\n///--- Exported API\n\nmodule.exports = {\n  /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */\n  isSigner: function (obj) {\n    if (typeof (obj) === 'object' && obj instanceof RequestSigner)\n      return (true);\n    return (false);\n  },\n\n  /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */\n  createSigner: function createSigner(options) {\n    return (new RequestSigner(options));\n  },\n\n  /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */\n  signRequest: function signRequest(request, options) {\n    assert.object(request, 'request');\n    assert.object(options, 'options');\n    assert.optionalString(options.algorithm, 'options.algorithm');\n    assert.string(options.keyId, 'options.keyId');\n    assert.optionalArrayOfString(options.headers, 'options.headers');\n    assert.optionalString(options.httpVersion, 'options.httpVersion');\n\n    if (!request.getHeader('Date'))\n      request.setHeader('Date', jsprim.rfc1123(new Date()));\n    if (!options.headers)\n      options.headers = ['date'];\n    if (!options.httpVersion)\n      options.httpVersion = '1.1';\n\n    var alg = [];\n    if (options.algorithm) {\n      options.algorithm = options.algorithm.toLowerCase();\n      alg = validateAlgorithm(options.algorithm);\n    }\n\n    var i;\n    var stringToSign = '';\n    for (i = 0; i < options.headers.length; i++) {\n      if (typeof (options.headers[i]) !== 'string')\n        throw new TypeError('options.headers must be an array of Strings');\n\n      var h = options.headers[i].toLowerCase();\n\n      if (h === 'request-line') {\n        if (!options.strict) {\n          /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */\n          stringToSign +=\n            request.method + ' ' + request.path + ' HTTP/' +\n            options.httpVersion;\n        } else {\n          /* Strict parsing doesn't allow older draft headers. */\n          throw (new StrictParsingError('request-line is not a valid header ' +\n            'with strict parsing enabled.'));\n        }\n      } else if (h === '(request-target)') {\n        stringToSign +=\n          '(request-target): ' + request.method.toLowerCase() + ' ' +\n          request.path;\n      } else {\n        var value = request.getHeader(h);\n        if (value === undefined || value === '') {\n          throw new MissingHeaderError(h + ' was not in the request');\n        }\n        stringToSign += h + ': ' + value;\n      }\n\n      if ((i + 1) < options.headers.length)\n        stringToSign += '\\n';\n    }\n\n    /* This is just for unit tests. */\n    if (request.hasOwnProperty('_stringToSign')) {\n      request._stringToSign = stringToSign;\n    }\n\n    var signature;\n    if (alg[0] === 'hmac') {\n      if (typeof (options.key) !== 'string' && !Buffer.isBuffer(options.key))\n        throw (new TypeError('options.key must be a string or Buffer'));\n\n      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n      hmac.update(stringToSign);\n      signature = hmac.digest('base64');\n\n    } else {\n      var key = options.key;\n      if (typeof (key) === 'string' || Buffer.isBuffer(key))\n        key = sshpk.parsePrivateKey(options.key);\n\n      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]),\n        'options.key must be a sshpk.PrivateKey');\n\n      if (!PK_ALGOS[key.type]) {\n        throw (new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' +\n          'keys are not supported'));\n      }\n\n      if (alg[0] !== undefined && key.type !== alg[0]) {\n        throw (new InvalidAlgorithmError('options.key must be a ' +\n          alg[0].toUpperCase() + ' key, was given a ' +\n          key.type.toUpperCase() + ' key instead'));\n      }\n\n      var signer = key.createSign(alg[1]);\n      signer.update(stringToSign);\n      var sigObj = signer.sign();\n      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n        throw (new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() +\n          ' is not a supported hash algorithm'));\n      }\n      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;\n      signature = sigObj.toString();\n      assert.notStrictEqual(signature, '', 'empty signature produced');\n    }\n\n    request.setHeader('Authorization', sprintf(AUTHZ_FMT,\n                                               options.keyId,\n                                               options.algorithm,\n                                               options.headers.join(' '),\n                                               signature));\n\n    return true;\n  }\n\n};\n"]}