{"version":3,"sources":["pem.js"],"names":[],"mappings":"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","file":"pem-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar asn1 = require('asn1');\nvar algs = require('../algs');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar pkcs1 = require('./pkcs1');\nvar pkcs8 = require('./pkcs8');\nvar sshpriv = require('./ssh-private');\nvar rfc4253 = require('./rfc4253');\n\n/*\n * For reading we support both PKCS#1 and PKCS#8. If we find a private key,\n * we just take the public component of it and use that.\n */\nfunction read(buf, forceType) {\n\tvar input = buf;\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar lines = buf.trim().split('\\n');\n\n\tvar m = lines[0].match(/*JSSTYLED*/\n\t    /[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m, 'invalid PEM header');\n\n\tvar m2 = lines[lines.length - 1].match(/*JSSTYLED*/\n\t    /[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);\n\tassert.ok(m2, 'invalid PEM footer');\n\n\t/* Begin and end banners must match key type */\n\tassert.equal(m[2], m2[2]);\n\tvar type = m[2].toLowerCase();\n\n\tvar alg;\n\tif (m[1]) {\n\t\t/* They also must match algorithms, if given */\n\t\tassert.equal(m[1], m2[1], 'PEM header and footer mismatch');\n\t\talg = m[1].trim();\n\t}\n\n\tvar headers = {};\n\twhile (true) {\n\t\tlines = lines.slice(1);\n\t\tm = lines[0].match(/*JSSTYLED*/\n\t\t    /^([A-Za-z0-9-]+): (.+)$/);\n\t\tif (!m)\n\t\t\tbreak;\n\t\theaders[m[1].toLowerCase()] = m[2];\n\t}\n\tif (headers['proc-type']) {\n\t\tvar parts = headers['proc-type'].split(',');\n\t\tif (parts[0] === '4' && parts[1] === 'ENCRYPTED') {\n\t\t\tthrow (new Error('PEM key is encrypted ' +\n\t\t\t    '(password-protected). Please use the ' +\n\t\t\t    'SSH agent or decrypt the key.'));\n\t\t}\n\t}\n\n\t/* Chop off the first and last lines */\n\tlines = lines.slice(0, -1).join('');\n\tbuf = new Buffer(lines, 'base64');\n\n\t/* The new OpenSSH internal format abuses PEM headers */\n\tif (alg && alg.toLowerCase() === 'openssh')\n\t\treturn (sshpriv.readSSHPrivate(type, buf));\n\tif (alg && alg.toLowerCase() === 'ssh2')\n\t\treturn (rfc4253.readType(type, buf));\n\n\tvar der = new asn1.BerReader(buf);\n\tder.originalInput = input;\n\n\t/*\n\t * All of the PEM file types start with a sequence tag, so chop it\n\t * off here\n\t */\n\tder.readSequence();\n\n\t/* PKCS#1 type keys name an algorithm in the banner explicitly */\n\tif (alg) {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs1');\n\t\treturn (pkcs1.readPkcs1(alg, type, der));\n\t} else {\n\t\tif (forceType)\n\t\t\tassert.strictEqual(forceType, 'pkcs8');\n\t\treturn (pkcs8.readPkcs8(alg, type, der));\n\t}\n}\n\nfunction write(key, type) {\n\tassert.object(key);\n\n\tvar alg = {'ecdsa': 'EC', 'rsa': 'RSA', 'dsa': 'DSA'}[key.type];\n\tvar header;\n\n\tvar der = new asn1.BerWriter();\n\n\tif (PrivateKey.isPrivateKey(key)) {\n\t\tif (type && type === 'pkcs8') {\n\t\t\theader = 'PRIVATE KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs1');\n\t\t\theader = alg + ' PRIVATE KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t}\n\n\t} else if (Key.isKey(key)) {\n\t\tif (type && type === 'pkcs1') {\n\t\t\theader = alg + ' PUBLIC KEY';\n\t\t\tpkcs1.writePkcs1(der, key);\n\t\t} else {\n\t\t\tif (type)\n\t\t\t\tassert.strictEqual(type, 'pkcs8');\n\t\t\theader = 'PUBLIC KEY';\n\t\t\tpkcs8.writePkcs8(der, key);\n\t\t}\n\n\t} else {\n\t\tthrow (new Error('key is not a Key or PrivateKey'));\n\t}\n\n\tvar tmp = der.buffer.toString('base64');\n\tvar len = tmp.length + (tmp.length / 64) +\n\t    18 + 16 + header.length*2 + 10;\n\tvar buf = new Buffer(len);\n\tvar o = 0;\n\to += buf.write('-----BEGIN ' + header + '-----\\n', o);\n\tfor (var i = 0; i < tmp.length; ) {\n\t\tvar limit = i + 64;\n\t\tif (limit > tmp.length)\n\t\t\tlimit = tmp.length;\n\t\to += buf.write(tmp.slice(i, limit), o);\n\t\tbuf[o++] = 10;\n\t\ti = limit;\n\t}\n\to += buf.write('-----END ' + header + '-----\\n', o);\n\n\treturn (buf.slice(0, o));\n}\n"]}