{"version":3,"sources":["ssh.js"],"names":[],"mappings":";;AAEA,OAAO,OAAP,GAAiB;AAChB,OAAM,IAAN;AACA,QAAO,KAAP;CAFD;;AAKA,IAAI,SAAS,QAAQ,aAAR,CAAT;AACJ,IAAI,UAAU,QAAQ,WAAR,CAAV;AACJ,IAAI,QAAQ,QAAQ,UAAR,CAAR;AACJ,IAAI,MAAM,QAAQ,QAAR,CAAN;AACJ,IAAI,aAAa,QAAQ,gBAAR,CAAb;;AAEJ,IAAI,UAAU,QAAQ,eAAR,CAAV;;;AAGJ,IAAI,YAAY,8DAAZ;;AAEJ,IAAI,aAAa,oDAAb;;AAEJ,SAAS,IAAT,CAAc,GAAd,EAAmB;AAClB,KAAI,OAAQ,GAAR,KAAiB,QAAjB,EAA2B;AAC9B,SAAO,MAAP,CAAc,GAAd,EAAmB,KAAnB,EAD8B;AAE9B,QAAM,IAAI,QAAJ,CAAa,OAAb,CAAN,CAF8B;EAA/B;;AAKA,KAAI,UAAU,IAAI,IAAJ,GAAW,OAAX,CAAmB,SAAnB,EAA8B,EAA9B,CAAV,CANc;AAOlB,KAAI,IAAI,QAAQ,KAAR,CAAc,SAAd,CAAJ,CAPc;AAQlB,KAAI,CAAC,CAAD,EACH,IAAI,QAAQ,KAAR,CAAc,UAAd,CAAJ,CADD;AAEA,QAAO,EAAP,CAAU,CAAV,EAAa,sBAAb,EAVkB;;AAYlB,KAAI,OAAO,QAAQ,YAAR,CAAqB,EAAE,CAAF,CAArB,CAAP,CAZc;AAalB,KAAI,OAAO,IAAI,MAAJ,CAAW,EAAE,CAAF,CAAX,EAAiB,QAAjB,CAAP;;;;;;;;;;AAbc,KAuBd,GAAJ,CAvBkB;AAwBlB,KAAI,MAAM,EAAN,CAxBc;AAyBlB,KAAI,EAAE,CAAF,CAAJ,EAAU;AACT,MAAI;AACH,SAAM,QAAQ,IAAR,CAAa,IAAb,CAAN,CADG;GAAJ,CAGE,OAAO,CAAP,EAAU;AACX,OAAI,QAAQ,KAAR,CAAc,UAAd,CAAJ,CADW;AAEX,UAAO,EAAP,CAAU,CAAV,EAAa,sBAAb,EAFW;AAGX,UAAO,IAAI,MAAJ,CAAW,EAAE,CAAF,CAAX,EAAiB,QAAjB,CAAP,CAHW;AAIX,SAAM,QAAQ,YAAR,CAAqB,GAArB,EAA0B,QAA1B,EAAoC,IAApC,CAAN,CAJW;GAAV;EAJH,MAUO;AACN,QAAM,QAAQ,YAAR,CAAqB,GAArB,EAA0B,QAA1B,EAAoC,IAApC,CAAN,CADM;EAVP;;AAcA,QAAO,WAAP,CAAmB,IAAnB,EAAyB,IAAI,IAAJ,CAAzB,CAvCkB;;AAyClB,KAAI,EAAE,CAAF,KAAQ,EAAE,CAAF,EAAK,MAAL,GAAc,CAAd,EAAiB;AAC5B,MAAI,OAAJ,GAAc,EAAE,CAAF,CAAd,CAD4B;EAA7B,MAGO,IAAI,IAAI,QAAJ,EAAc;;;;;;;;;AASxB,MAAI,OAAO,EAAE,CAAF,IAAO,EAAE,CAAF,CAAP,CATa;AAUxB,MAAI,aAAa,KAAK,IAAL,CAAU,IAAI,QAAJ,GAAe,CAAf,CAAV,GAA8B,CAA9B,CAVO;AAWxB,SAAO,KAAK,KAAL,CAAW,CAAX,EAAc,aAAa,CAAb,CAAd;AACH,SADG,CACK,mBADL,EAC0B,EAD1B,IAEH,KAAK,KAAL,CAAW,aAAa,CAAb,CAFR,CAXiB;;AAexB,MAAI,UAAU,IAAI,QAAJ,GAAe,CAAf,CAfU;AAgBxB,MAAI,UAAU,CAAV,IACA,KAAK,KAAL,CAAW,aAAa,CAAb,EAAgB,UAA3B,MAA2C,GAA3C,EACH,aAFD;AAGA,SAAO,KAAK,KAAL,CAAW,UAAX,EAAuB,aAAa,CAAb,CAAvB,KAA2C,GAA3C,EACN,aADD;;;AAnBwB,MAuBpB,UAAU,KAAK,KAAL,CAAW,UAAX,CAAV,CAvBoB;AAwBxB,YAAU,QAAQ,OAAR,CAAgB,SAAhB,EAA2B,GAA3B,EACN,OADM,CACE,MADF,EACU,EADV,CAAV,CAxBwB;AA0BxB,MAAI,QAAQ,KAAR,CAAc,cAAd,CAAJ,EACC,IAAI,OAAJ,GAAc,OAAd,CADD;EA1BM;;AA8BP,QAAQ,GAAR,CA1EkB;CAAnB;;AA6EA,SAAS,KAAT,CAAe,GAAf,EAAoB;AACnB,QAAO,MAAP,CAAc,GAAd,EADmB;AAEnB,KAAI,CAAC,IAAI,KAAJ,CAAU,GAAV,CAAD,EACH,MAAO,IAAI,KAAJ,CAAU,sBAAV,CAAP,CADD;;AAGA,KAAI,QAAQ,EAAR,CALe;AAMnB,KAAI,MAAM,QAAQ,YAAR,CAAqB,GAArB,CAAN,CANe;AAOnB,OAAM,IAAN,CAAW,GAAX,EAPmB;;AASnB,KAAI,MAAM,QAAQ,KAAR,CAAc,GAAd,CAAN,CATe;AAUnB,OAAM,IAAN,CAAW,IAAI,QAAJ,CAAa,QAAb,CAAX,EAVmB;;AAYnB,KAAI,IAAI,OAAJ,EACH,MAAM,IAAN,CAAW,IAAI,OAAJ,CAAX,CADD;;AAGA,QAAQ,IAAI,MAAJ,CAAW,MAAM,IAAN,CAAW,GAAX,CAAX,CAAR,CAfmB;CAApB","file":"ssh-compiled.js","sourcesContent":["// Copyright 2015 Joyent, Inc.\n\nmodule.exports = {\n\tread: read,\n\twrite: write\n};\n\nvar assert = require('assert-plus');\nvar rfc4253 = require('./rfc4253');\nvar utils = require('../utils');\nvar Key = require('../key');\nvar PrivateKey = require('../private-key');\n\nvar sshpriv = require('./ssh-private');\n\n/*JSSTYLED*/\nvar SSHKEY_RE = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/]+[=]*)([\\n \\t]+([^\\n]+))?$/;\n/*JSSTYLED*/\nvar SSHKEY_RE2 = /^([a-z0-9-]+)[ \\t]+([a-zA-Z0-9+\\/ \\t\\n]+[=]*)(.*)$/;\n\nfunction read(buf) {\n\tif (typeof (buf) !== 'string') {\n\t\tassert.buffer(buf, 'buf');\n\t\tbuf = buf.toString('ascii');\n\t}\n\n\tvar trimmed = buf.trim().replace(/[\\\\\\r]/g, '');\n\tvar m = trimmed.match(SSHKEY_RE);\n\tif (!m)\n\t\tm = trimmed.match(SSHKEY_RE2);\n\tassert.ok(m, 'key must match regex');\n\n\tvar type = rfc4253.algToKeyType(m[1]);\n\tvar kbuf = new Buffer(m[2], 'base64');\n\n\t/*\n\t * This is a bit tricky. If we managed to parse the key and locate the\n\t * key comment with the regex, then do a non-partial read and assert\n\t * that we have consumed all bytes. If we couldn't locate the key\n\t * comment, though, there may be whitespace shenanigans going on that\n\t * have conjoined the comment to the rest of the key. We do a partial\n\t * read in this case to try to make the best out of a sorry situation.\n\t */\n\tvar key;\n\tvar ret = {};\n\tif (m[4]) {\n\t\ttry {\n\t\t\tkey = rfc4253.read(kbuf);\n\n\t\t} catch (e) {\n\t\t\tm = trimmed.match(SSHKEY_RE2);\n\t\t\tassert.ok(m, 'key must match regex');\n\t\t\tkbuf = new Buffer(m[2], 'base64');\n\t\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t\t}\n\t} else {\n\t\tkey = rfc4253.readInternal(ret, 'public', kbuf);\n\t}\n\n\tassert.strictEqual(type, key.type);\n\n\tif (m[4] && m[4].length > 0) {\n\t\tkey.comment = m[4];\n\n\t} else if (ret.consumed) {\n\t\t/*\n\t\t * Now the magic: trying to recover the key comment when it's\n\t\t * gotten conjoined to the key or otherwise shenanigan'd.\n\t\t *\n\t\t * Work out how much base64 we used, then drop all non-base64\n\t\t * chars from the beginning up to this point in the the string.\n\t\t * Then offset in this and try to make up for missing = chars.\n\t\t */\n\t\tvar data = m[2] + m[3];\n\t\tvar realOffset = Math.ceil(ret.consumed / 3) * 4;\n\t\tdata = data.slice(0, realOffset - 2). /*JSSTYLED*/\n\t\t    replace(/[^a-zA-Z0-9+\\/=]/g, '') +\n\t\t    data.slice(realOffset - 2);\n\n\t\tvar padding = ret.consumed % 3;\n\t\tif (padding > 0 &&\n\t\t    data.slice(realOffset - 1, realOffset) !== '=')\n\t\t\trealOffset--;\n\t\twhile (data.slice(realOffset, realOffset + 1) === '=')\n\t\t\trealOffset++;\n\n\t\t/* Finally, grab what we think is the comment & clean it up. */\n\t\tvar trailer = data.slice(realOffset);\n\t\ttrailer = trailer.replace(/[\\r\\n]/g, ' ').\n\t\t    replace(/^\\s+/, '');\n\t\tif (trailer.match(/^[a-zA-Z0-9]/))\n\t\t\tkey.comment = trailer;\n\t}\n\n\treturn (key);\n}\n\nfunction write(key) {\n\tassert.object(key);\n\tif (!Key.isKey(key))\n\t\tthrow (new Error('Must be a public key'));\n\n\tvar parts = [];\n\tvar alg = rfc4253.keyTypeToAlg(key);\n\tparts.push(alg);\n\n\tvar buf = rfc4253.write(key);\n\tparts.push(buf.toString('base64'));\n\n\tif (key.comment)\n\t\tparts.push(key.comment);\n\n\treturn (new Buffer(parts.join(' ')));\n}\n"]}