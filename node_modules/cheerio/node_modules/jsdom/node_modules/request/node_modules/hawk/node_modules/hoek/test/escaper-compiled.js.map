{"version":3,"sources":["escaper.js"],"names":[],"mappings":"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","file":"escaper-compiled.js","sourcesContent":["// Load modules\n\nvar Code = require('code');\nvar Hoek = require('../lib');\nvar Lab = require('lab');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Test shortcuts\n\nvar lab = exports.lab = Lab.script();\nvar describe = lab.experiment;\nvar it = lab.test;\nvar expect = Code.expect;\n\n\ndescribe('escapeJavaScript()', function () {\n\n    it('encodes / characters', function (done) {\n\n        var encoded = Hoek.escapeJavaScript('<script>alert(1)</script>');\n        expect(encoded).to.equal('\\\\x3cscript\\\\x3ealert\\\\x281\\\\x29\\\\x3c\\\\x2fscript\\\\x3e');\n        done();\n    });\n\n    it('encodes \\' characters', function (done) {\n\n        var encoded = Hoek.escapeJavaScript('something(\\'param\\')');\n        expect(encoded).to.equal('something\\\\x28\\\\x27param\\\\x27\\\\x29');\n        done();\n    });\n\n    it('encodes large unicode characters with the correct padding', function (done) {\n\n        var encoded = Hoek.escapeJavaScript(String.fromCharCode(500) + String.fromCharCode(1000));\n        expect(encoded).to.equal('\\\\u0500\\\\u1000');\n        done();\n    });\n\n    it('doesn\\'t throw an exception when passed null', function (done) {\n\n        var encoded = Hoek.escapeJavaScript(null);\n        expect(encoded).to.equal('');\n        done();\n    });\n});\n\ndescribe('escapeHtml()', function () {\n\n    it('encodes / characters', function (done) {\n\n        var encoded = Hoek.escapeHtml('<script>alert(1)</script>');\n        expect(encoded).to.equal('&lt;script&gt;alert&#x28;1&#x29;&lt;&#x2f;script&gt;');\n        done();\n    });\n\n    it('encodes < and > as named characters', function (done) {\n\n        var encoded = Hoek.escapeHtml('<script><>');\n        expect(encoded).to.equal('&lt;script&gt;&lt;&gt;');\n        done();\n    });\n\n    it('encodes large unicode characters', function (done) {\n\n        var encoded = Hoek.escapeHtml(String.fromCharCode(500) + String.fromCharCode(1000));\n        expect(encoded).to.equal('&#500;&#1000;');\n        done();\n    });\n\n    it('doesn\\'t throw an exception when passed null', function (done) {\n\n        var encoded = Hoek.escapeHtml(null);\n        expect(encoded).to.equal('');\n        done();\n    });\n\n    it('encodes {} characters', function (done) {\n\n        var encoded = Hoek.escapeHtml('{}');\n        expect(encoded).to.equal('&#x7b;&#x7d;');\n        done();\n    });\n});\n"]}