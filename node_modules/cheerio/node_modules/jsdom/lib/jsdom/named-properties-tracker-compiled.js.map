{"version":3,"sources":["named-properties-tracker.js"],"names":[],"mappings":"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","file":"named-properties-tracker-compiled.js","sourcesContent":["\"use strict\";\n// https://heycam.github.io/webidl/#idl-named-properties\n\nconst IS_NAMED_PROPERTY = Symbol();\nconst TRACKER = Symbol();\n\n/**\n * Create a new NamedPropertiesTracker for the given `object`.\n *\n * Named properties are used in DOM to let you lookup (for example) a Node by accessing a property on another object.\n * For example `window.foo` might resolve to an image element with id \"foo\".\n *\n * This tracker is a workaround because the ES6 Proxy feature is not yet available.\n *\n * @param {Object} object\n * @param {Function} resolverFunc Each time a property is accessed, this function is called to determine the value of\n *        the property. The function is passed 3 arguments: (object, name, values).\n *        `object` is identical to the `object` parameter of this `create` function.\n *        `name` is the name of the property.\n *        `values` is a function that returns a Set with all the tracked values for this name. The order of these\n *        values is undefined.\n *\n * @returns {NamedPropertiesTracker}\n */\nexports.create = function (object, resolverFunc) {\n  if (object[TRACKER]) {\n    throw Error(\"A NamedPropertiesTracker has already been created for this object\");\n  }\n\n  const tracker = new NamedPropertiesTracker(object, resolverFunc);\n  object[TRACKER] = tracker;\n  return tracker;\n};\n\nexports.get = function (object) {\n  if (!object) {\n    return null;\n  }\n\n  return object[TRACKER] || null;\n};\n\nfunction NamedPropertiesTracker(object, resolverFunc) {\n  this.object = object;\n  this.resolverFunc = resolverFunc;\n  this.trackedValues = new Map(); // Map<Set<value>>\n}\n\nfunction newPropertyDescriptor(tracker, name) {\n  const emptySet = new Set();\n\n  function getValues() {\n    return tracker.trackedValues.get(name) || emptySet;\n  }\n\n  const descriptor = {\n    enumerable: true,\n    configurable: true,\n    get() {\n      return tracker.resolverFunc(tracker.object, name, getValues);\n    },\n    set(value) {\n      Object.defineProperty(tracker.object, name, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n      });\n    }\n  };\n\n  descriptor.get[IS_NAMED_PROPERTY] = true;\n  descriptor.set[IS_NAMED_PROPERTY] = true;\n  return descriptor;\n}\n\n/**\n * Track a value (e.g. a Node) for a specified name.\n *\n * Values can be tracked eagerly, which means that not all tracked values *have* to appear in the output. The resolver\n * function that was passed to the output may filter the value.\n *\n * Tracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\nNamedPropertiesTracker.prototype.track = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  let valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    valueSet = new Set();\n    this.trackedValues.set(name, valueSet);\n  }\n\n  valueSet.add(value);\n\n  if (name in this.object) {\n    // already added our getter or it is not a named property (e.g. \"addEventListener\")\n    return;\n  }\n\n  const descriptor = newPropertyDescriptor(this, name);\n  Object.defineProperty(this.object, name, descriptor);\n};\n\n/**\n * Stop tracking a previously tracked `name` & `value` pair, see track().\n *\n * Untracking the same `name` and `value` pair multiple times has no effect\n *\n * @param {String} name\n * @param {*} value\n */\nNamedPropertiesTracker.prototype.untrack = function (name, value) {\n  if (name === undefined || name === null || name === \"\") {\n    return;\n  }\n\n  const valueSet = this.trackedValues.get(name);\n  if (!valueSet) {\n    // the value is not present\n    return;\n  }\n\n  if (!valueSet.delete(value)) {\n    // the value was not present\n    return;\n  }\n\n  if (valueSet.size === 0) {\n    this.trackedValues.delete(name);\n  }\n\n  if (valueSet.size > 0) {\n    // other values for this name are still present\n    return;\n  }\n\n  // at this point there are no more values, delete the property\n\n  const descriptor = Object.getOwnPropertyDescriptor(this.object, name);\n\n  if (!descriptor || !descriptor.get || descriptor.get[IS_NAMED_PROPERTY] !== true) {\n    // Not defined by NamedPropertyTracker\n    return;\n  }\n\n  // note: delete puts the object in dictionary mode.\n  // if this turns out to be a performance issue, maybe add:\n  // https://github.com/petkaantonov/bluebird/blob/3e36fc861ac5795193ba37935333eb6ef3716390/src/util.js#L177\n  delete this.object[name];\n};\n"]}