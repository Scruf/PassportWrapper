{"version":3,"sources":["dom-implementation.js"],"names":[],"mappings":"AAAA;;AACA,MAAM,gBAAgB,QAAQ,0BAAR,CAAhB;AACN,MAAM,6BAA6B,QAAQ,iBAAR,EAA2B,MAA3B;;AAEnC,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB;AAC/B,OAAK,iBAAL,CAAuB,SAAvB,CAAiC,UAAjC,GAA8C,YAAY;AACxD,WAAO,IAAP,CADwD;GAAZ,CADf;;AAK/B,OAAK,iBAAL,CAAuB,SAAvB,CAAiC,kBAAjC,GAAsD,UAAU,aAAV,EAAyB,QAAzB,EAAmC,QAAnC,EAA6C;AACjG,QAAI,UAAU,MAAV,GAAmB,CAAnB,EAAsB;AACxB,YAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN,CADwB;KAA1B;;AAIA,oBAAgB,OAAO,aAAP,CAAhB,CALiG;AAMjG,eAAW,OAAO,QAAP,CAAX,CANiG;AAOjG,eAAW,OAAO,QAAP,CAAX,CAPiG;;AASjG,kBAAc,KAAd,CAAoB,aAApB,EATiG;;AAWjG,WAAO,2BAA2B,IAA3B,EAAiC,KAAK,cAAL,EAAqB,aAAtD,EAAqE,QAArE,EAA+E,QAA/E,CAAP,CAXiG;GAA7C,CALvB;;AAmB/B,OAAK,iBAAL,CAAuB,SAAvB,CAAiC,cAAjC,GAAkD,UAAU,SAAV,EAAqB,aAArB,EAAoC,OAApC,EAA6C;AAC7F,gBAAY,cAAc,IAAd,GAAqB,OAAO,SAAP,CAArB,GAAyC,SAAzC,CADiF;AAE7F,oBAAgB,kBAAkB,IAAlB,GAAyB,EAAzB,GAA8B,OAAO,aAAP,CAA9B,CAF6E;AAG7F,QAAI,YAAY,SAAZ,EAAuB;AACzB,gBAAU,IAAV,CADyB;KAA3B;;AAIA,UAAM,WAAW,IAAI,KAAK,QAAL,CAAc,EAAE,aAAa,KAAb,EAApB,CAAX,CAPuF;;AAS7F,QAAI,UAAU,IAAV,CATyF;AAU7F,QAAI,kBAAkB,EAAlB,EAAsB;AACxB,gBAAU,SAAS,eAAT,CAAyB,SAAzB,EAAoC,aAApC,CAAV,CADwB;KAA1B;;AAIA,QAAI,YAAY,IAAZ,EAAkB;AACpB,eAAS,WAAT,CAAqB,OAArB,EADoB;KAAtB;;AAIA,QAAI,YAAY,IAAZ,EAAkB;AACpB,eAAS,WAAT,CAAqB,OAArB,EADoB;KAAtB;;AAIA,WAAO,QAAP,CAtB6F;GAA7C,CAnBnB;;AA4C/B,OAAK,iBAAL,CAAuB,SAAvB,CAAiC,kBAAjC,GAAsD,UAAU,KAAV,EAAiB;;;AAGrE,UAAM,WAAW,IAAI,KAAK,YAAL,CAAkB,EAAE,aAAa,MAAb,EAAxB,CAAX;;;;AAH+D,UAO/D,UAAU,2BAA2B,IAA3B,EAAiC,IAAjC,EAAuC,MAAvC,EAA+C,EAA/C,EAAmD,EAAnD,CAAV,CAP+D;AAQrE,aAAS,WAAT,CAAqB,OAArB;;;AARqE,UAW/D,cAAc,SAAS,eAAT,CAAyB,8BAAzB,EAAyD,MAAzD,CAAd,CAX+D;AAYrE,aAAS,WAAT,CAAqB,WAArB;;;;AAZqE,UAgB/D,cAAc,SAAS,aAAT,CAAuB,MAAvB,CAAd,CAhB+D;AAiBrE,gBAAY,WAAZ,CAAwB,WAAxB;;;AAjBqE,QAoBjE,UAAU,SAAV,EAAqB;;;AAGvB,YAAM,eAAe,SAAS,aAAT,CAAuB,OAAvB,CAAf,CAHiB;AAIvB,kBAAY,WAAZ,CAAwB,YAAxB;;;;AAJuB,kBAQvB,CAAa,WAAb,CAAyB,SAAS,cAAT,CAAwB,KAAxB,CAAzB,EARuB;KAAzB;;;;AApBqE,eAiCrE,CAAY,WAAZ,CAAwB,SAAS,aAAT,CAAuB,MAAvB,CAAxB;;;;;;AAjCqE,WAuC9D,QAAP,CAvCqE;GAAjB,CA5CvB;CAAhB","file":"dom-implementation-compiled.js","sourcesContent":["\"use strict\";\nconst validateNames = require(\"./helpers/validate-names\");\nconst createDocumentTypeInternal = require(\"./document-type\").create;\n\nmodule.exports = function (core) {\n  core.DOMImplementation.prototype.hasFeature = function () {\n    return true;\n  };\n\n  core.DOMImplementation.prototype.createDocumentType = function (qualifiedName, publicId, systemId) {\n    if (arguments.length < 3) {\n      throw new TypeError(\"Expected 3 arguments to createDocumentType\");\n    }\n\n    qualifiedName = String(qualifiedName);\n    publicId = String(publicId);\n    systemId = String(systemId);\n\n    validateNames.qname(qualifiedName);\n\n    return createDocumentTypeInternal(core, this._ownerDocument, qualifiedName, publicId, systemId);\n  };\n\n  core.DOMImplementation.prototype.createDocument = function (namespace, qualifiedName, doctype) {\n    namespace = namespace !== null ? String(namespace) : namespace;\n    qualifiedName = qualifiedName === null ? \"\" : String(qualifiedName);\n    if (doctype === undefined) {\n      doctype = null;\n    }\n\n    const document = new core.Document({ parsingMode: \"xml\" });\n\n    let element = null;\n    if (qualifiedName !== \"\") {\n      element = document.createElementNS(namespace, qualifiedName);\n    }\n\n    if (doctype !== null) {\n      document.appendChild(doctype);\n    }\n\n    if (element !== null) {\n      document.appendChild(element);\n    }\n\n    return document;\n  };\n\n  core.DOMImplementation.prototype.createHTMLDocument = function (title) {\n    // Let doc be a new document that is an HTML document.\n    // Set doc's content type to \"text/html\".\n    const document = new core.HTMLDocument({ parsingMode: \"html\" });\n\n    // Create a doctype, with \"html\" as its name and with its node document set\n    // to doc. Append the newly created node to doc.\n    const doctype = createDocumentTypeInternal(core, this, \"html\", \"\", \"\");\n    document.appendChild(doctype);\n\n    // Create an html element in the HTML namespace, and append it to doc.\n    const htmlElement = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"html\");\n    document.appendChild(htmlElement);\n\n    // Create a head element in the HTML namespace, and append it to the html\n    // element created in the previous step.\n    const headElement = document.createElement(\"head\");\n    htmlElement.appendChild(headElement);\n\n    // If the title argument is not omitted:\n    if (title !== undefined) {\n      // Create a title element in the HTML namespace, and append it to the head\n      // element created in the previous step.\n      const titleElement = document.createElement(\"title\");\n      headElement.appendChild(titleElement);\n\n      // Create a Text node, set its data to title (which could be the empty\n      // string), and append it to the title element created in the previous step.\n      titleElement.appendChild(document.createTextNode(title));\n    }\n\n    // Create a body element in the HTML namespace, and append it to the html\n    // element created in the earlier step.\n    htmlElement.appendChild(document.createElement(\"body\"));\n\n    // doc's origin is an alias to the origin of the context object's associated\n    // document, and doc's effective script origin is an alias to the effective\n    // script origin of the context object's associated document.\n\n    return document;\n  };\n};\n"]}