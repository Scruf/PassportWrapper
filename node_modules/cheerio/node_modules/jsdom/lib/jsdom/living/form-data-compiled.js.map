{"version":3,"sources":["form-data.js"],"names":[],"mappings":"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","file":"form-data-compiled.js","sourcesContent":["\"use strict\";\n\nconst formDataSymbols = require(\"./form-data-symbols\");\n\nmodule.exports = function (core) {\n  const Blob = core.Blob;\n  const File = core.File;\n\n  class FormData {\n    constructor(form) {\n      if (!(this instanceof FormData)) {\n        throw new TypeError(\"DOM object constructor cannot be called as a function.\");\n      }\n      const entries = this[formDataSymbols.entries] = [];\n      if (form && form.elements) {\n        for (let i = 0; i < form.elements.length; i++) {\n          const el = form.elements[i];\n          if (el.type === \"file\") {\n            for (let j = 0; j < el.files.length; j++) {\n              entries.push({ name: el.name, value: el.files.item(j) });\n            }\n          } else {\n            entries.push({ name: el.name, value: el.value });\n          }\n        }\n      }\n    }\n    append(name, value, filename) {\n      if (value instanceof Blob) {\n        value = new File(\n          [value],\n          filename || value.name || \"blob\",\n          { type: value.type, lastModified: value.lastModified }\n        );\n      } else {\n        value = String(value);\n      }\n      const entries = this[formDataSymbols.entries];\n      entries.push({ name, value });\n    }\n    delete(name) {\n      this[formDataSymbols.entries] = this[formDataSymbols.entries].filter(entry => entry.name !== name);\n    }\n    get(name) {\n      return this[formDataSymbols.entries].find(entry => entry.name === name) || null;\n    }\n    getAll(name) {\n      return this[formDataSymbols.entries].filter(entry => entry.name === name).map(entry => entry.value);\n    }\n    has(name) {\n      return this[formDataSymbols.entries].findIndex(entry => entry.name === name) !== -1;\n    }\n    set(name, value, filename) {\n      if (value instanceof Blob) {\n        value = new File(\n          [value],\n          filename || value.name || \"blob\",\n          { type: value.type, lastModified: value.lastModified }\n        );\n      } else {\n        value = String(value);\n      }\n      const newEntry = { name, value };\n      const entries = this[formDataSymbols.entries];\n      const existing = entries.findIndex(entry => entry.name === name);\n      if (existing !== -1) {\n        entries[existing] = newEntry;\n        this[formDataSymbols.entries] = entries.filter((entry, index) => entry.name !== name || index === existing);\n      } else {\n        entries.push(newEntry);\n      }\n    }\n    toString() {\n      return \"[object FormData]\";\n    }\n  }\n\n  core.FormData = FormData;\n};\n"]}