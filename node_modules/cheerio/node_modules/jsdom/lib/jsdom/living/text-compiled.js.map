{"version":3,"sources":["text.js"],"names":[],"mappings":"AAAA;;AACA,MAAM,cAAc,QAAQ,UAAR,EAAoB,WAApB;AACpB,MAAM,gBAAgB,QAAQ,8BAAR,EAAwC,aAAxC;AACtB,MAAM,YAAY,QAAQ,qBAAR,CAAZ;;AAEN,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB;;AAE/B,OAAK,IAAL,GAAY,SAAS,IAAT,CAAc,aAAd,EAA6B,IAA7B,EAAmC;AAC7C,SAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,EAA8B,aAA9B,EAA6C,IAA7C,EAD6C;GAAnC,CAFmB;;AAM/B,cAAY,KAAK,aAAL,EAAoB,KAAK,IAAL,EAAW;AACzC,cAAU,UAAU,SAAV;AACV,cAAU,MAAV,EAAkB;AAChB,kBAAY,CAAZ,CADgB;;AAGhB,YAAM,SAAS,KAAK,MAAL,CAHC;;AAKhB,UAAI,SAAS,MAAT,EAAiB;AACnB,cAAM,IAAI,KAAK,YAAL,CAAkB,KAAK,YAAL,CAAkB,cAAlB,CAA5B,CADmB;OAArB;;AAIA,YAAM,QAAQ,SAAS,MAAT,CATE;AAUhB,YAAM,UAAU,KAAK,aAAL,CAAmB,MAAnB,EAA2B,KAA3B,CAAV,CAVU;;AAYhB,YAAM,UAAU,KAAK,cAAL,CAAoB,cAApB,CAAmC,OAAnC,CAAV,CAZU;;AAchB,YAAM,SAAS,cAAc,MAAd,CAAqB,IAArB,CAAT,CAdU;;AAgBhB,UAAI,WAAW,IAAX,EAAiB;AACnB,eAAO,YAAP,CAAoB,OAApB,EAA6B,KAAK,WAAL,CAA7B,CADmB;OAArB;;AAIA,WAAK,WAAL,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,EAAhC,EApBgB;;AAsBhB,aAAO,OAAP;;;AAtBgB,KAAlB;;;AAFyC,GAA3C,EAN+B;CAAhB","file":"text-compiled.js","sourcesContent":["\"use strict\";\nconst inheritFrom = require(\"../utils\").inheritFrom;\nconst domSymbolTree = require(\"./helpers/internal-constants\").domSymbolTree;\nconst NODE_TYPE = require(\"../living/node-type\");\n\nmodule.exports = function (core) {\n  // TODO: constructor should not take ownerDocument\n  core.Text = function Text(ownerDocument, data) {\n    core.CharacterData.call(this, ownerDocument, data);\n  };\n\n  inheritFrom(core.CharacterData, core.Text, {\n    nodeType: NODE_TYPE.TEXT_NODE, // TODO should be on prototype, not here\n    splitText(offset) {\n      offset >>>= 0;\n\n      const length = this.length;\n\n      if (offset > length) {\n        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);\n      }\n\n      const count = length - offset;\n      const newData = this.substringData(offset, count);\n\n      const newNode = this._ownerDocument.createTextNode(newData);\n\n      const parent = domSymbolTree.parent(this);\n\n      if (parent !== null) {\n        parent.insertBefore(newNode, this.nextSibling);\n      }\n\n      this.replaceData(offset, count, \"\");\n\n      return newNode;\n\n      // TODO: range stuff\n    }\n\n    // TODO: wholeText property\n  });\n};\n"]}