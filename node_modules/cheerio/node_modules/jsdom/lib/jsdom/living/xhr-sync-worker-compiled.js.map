{"version":3,"sources":["xhr-sync-worker.js"],"names":[],"mappings":"AAAA;;AAEA,MAAM,OAAO,QAAQ,MAAR,CAAP;;AAEN,MAAM,QAAQ,QAAQ,aAAR,CAAR;AACN,MAAM,aAAa,QAAQ,0BAAR,CAAb;;AAEN,MAAM,SAAS,EAAT;;AAEN,QAAQ,KAAR,CAAc,EAAd,CAAiB,MAAjB,EAAyB,SAAS;AAChC,SAAO,IAAP,CAAY,KAAZ,EADgC;CAAT,CAAzB;;AAIA,QAAQ,KAAR,CAAc,EAAd,CAAiB,KAAjB,EAAwB,MAAM;AAC5B,QAAM,SAAS,OAAO,MAAP,CAAc,MAAd,CAAT,CADsB;AAE5B,QAAM,MAAM,MAAM,KAAN,EAAN,CAFsB;AAG5B,QAAM,MAAM,IAAI,IAAI,WAAJ,CAAgB,cAAhB,EAAV,CAHsB;AAI5B,QAAM,OAAO,KAAK,KAAL,CAAW,OAAO,QAAP,EAAX,EAA8B,CAAC,CAAD,EAAI,CAAJ,KAAU;AACnD,QAAI,KAAK,EAAE,IAAF,KAAW,QAAX,IAAuB,EAAE,IAAF,EAAQ;AACtC,aAAO,IAAI,MAAJ,CAAW,EAAE,IAAF,CAAlB,CADsC;KAAxC;AAGA,WAAO,CAAP,CAJmD;GAAV,CAArC,CAJsB;AAU5B,OAAK,WAAL,GAAmB,KAAnB,CAV4B;AAW5B,MAAI,WAAW,IAAX,CAAJ,GAAuB,IAAvB,CAX4B;AAY5B,QAAM,aAAa,IAAI,WAAW,UAAX,CAAjB,CAZsB;AAa5B,aAAW,UAAX,GAAwB,IAAI,WAAJ,CAAgB,cAAhB,CAA+B,MAA/B,CAbI;AAc5B,MAAI;AACF,QAAI,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;AACjC,cAAQ,MAAR,CAAe,KAAf,CAAqB,KAAK,SAAL,CAAe,EAAE,UAAF,EAAf,CAArB,EAAqD,MAAM;AACzD,gBAAQ,IAAR,CAAa,CAAb,EADyD;OAAN,CAArD,CADiC;KAAN,EAI1B,KAJH,EADE;AAMF,QAAI,gBAAJ,CAAqB,OAArB,EAA8B,SAAS;AACrC,cAAQ,MAAR,CAAe,KAAf,CAAqB,KAAK,SAAL,CAAe,EAAE,UAAF,EAAc,OAAO,MAAM,KAAN,IAAe,KAAK,OAAL,CAAa,KAAb,CAAf,EAApC,CAArB,EAAgG,MAAM;AACpG,gBAAQ,IAAR,CAAa,CAAb,EADoG;OAAN,CAAhG,CADqC;KAAT,EAI3B,KAJH,EANE;AAWF,QAAI,IAAJ,CAAS,KAAK,IAAL,CAAT,CAXE;GAAJ,CAYE,OAAO,KAAP,EAAc;AACd,YAAQ,MAAR,CAAe,KAAf,CAAqB,KAAK,SAAL,CAAe,EAAE,UAAF,EAAc,OAAO,MAAM,KAAN,IAAe,KAAK,OAAL,CAAa,KAAb,CAAf,EAApC,CAArB,EAAgG,MAAM;AACpG,cAAQ,IAAR,CAAa,CAAb,EADoG;KAAN,CAAhG,CADc;GAAd;CA1BoB,CAAxB","file":"xhr-sync-worker-compiled.js","sourcesContent":["\"use strict\";\n\nconst util = require(\"util\");\n\nconst jsdom = require(\"../../jsdom\");\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\n\nconst chunks = [];\n\nprocess.stdin.on(\"data\", chunk => {\n  chunks.push(chunk);\n});\n\nprocess.stdin.on(\"end\", () => {\n  const buffer = Buffer.concat(chunks);\n  const doc = jsdom.jsdom();\n  const xhr = new doc.defaultView.XMLHttpRequest();\n  const flag = JSON.parse(buffer.toString(), (k, v) => {\n    if (v && v.type === \"Buffer\" && v.data) {\n      return new Buffer(v.data);\n    }\n    return v;\n  });\n  flag.synchronous = false;\n  xhr[xhrSymbols.flag] = flag;\n  const properties = xhr[xhrSymbols.properties];\n  properties.readyState = doc.defaultView.XMLHttpRequest.OPENED;\n  try {\n    xhr.addEventListener(\"load\", () => {\n      process.stdout.write(JSON.stringify({ properties }), () => {\n        process.exit(0);\n      });\n    }, false);\n    xhr.addEventListener(\"error\", error => {\n      process.stdout.write(JSON.stringify({ properties, error: error.stack || util.inspect(error) }), () => {\n        process.exit(0);\n      });\n    }, false);\n    xhr.send(flag.body);\n  } catch (error) {\n    process.stdout.write(JSON.stringify({ properties, error: error.stack || util.inspect(error) }), () => {\n      process.exit(0);\n    });\n  }\n});\n"]}