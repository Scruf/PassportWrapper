{"version":3,"sources":["runtime-script-errors.js"],"names":[],"mappings":"AAAA;;AACA,MAAM,OAAO,QAAQ,MAAR,CAAP;AACN,MAAM,aAAa,QAAQ,yBAAR,EAAmC,SAAnC;;AAEnB,MAAM,qBAAqB,OAAO,sBAAP,CAArB;;;;;AAKN,SAAS,aAAT,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC,MAAlC,EAA0C,WAA1C,EAAuD,OAAvD,EAAgE,QAAhE,EAA0E;AACxE,MAAI,sBAAsB,MAAtB,EAA8B;AAChC,WAAO,KAAP,CADgC;GAAlC;;AAIA,SAAO,kBAAP,IAA6B,IAA7B;;;AALwE,QAQlE,QAAQ,IAAI,UAAJ,CAAe,OAAf,EAAwB;AACpC,aAAS,KAAT;AACA,gBAAY,IAAZ;AACA,WAHoC;AAIpC,cAAU,QAAV;AACA,YAAQ,IAAR;AACA,WAAO,GAAP;AACA,WAAO,WAAP;GAPY,CAAR,CARkE;;AAkBxE,SAAO,aAAP,CAAqB,KAArB,EAlBwE;;AAoBxE,SAAO,OAAO,kBAAP,CAAP,CApBwE;;AAsBxE,SAAO,MAAM,gBAAN,CAtBiE;CAA1E;;AAyBA,OAAO,OAAP,GAAiB,SAAS,eAAT,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,YAAxC,EAAsD;;;AAGrE,QAAM,QAAQ,SAAS,MAAM,KAAN,CAH8C;AAIrE,QAAM,QAAQ,SAAS,MAAM,KAAN,CAAY,IAAZ,CAAT;;;AAJuD,MAOjE,MAAJ,CAPqE;AAQrE,MAAI,KAAJ,EAAW;AACT,SAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAM,MAAN,IAAgB,CAAC,MAAD,EAAS,EAAE,CAAF,EAAK;AAChD,eAAS,MAAM,CAAN,EAAS,KAAT,CAAe,oDAAf,CAAT,CADgD;KAAlD;GADF;;AAMA,QAAM,WAAW,UAAU,OAAO,CAAP,CAAV,IAAuB,YAAvB,IAAuC,OAAO,SAAP,CAAiB,IAAjB,CAda;AAerE,QAAM,aAAa,UAAU,SAAS,OAAO,CAAP,CAAT,CAAV,IAAiC,CAAjC,CAfkD;AAgBrE,QAAM,eAAe,UAAU,SAAS,OAAO,CAAP,CAAT,CAAV,IAAiC,CAAjC,CAhBgD;;AAkBrE,QAAM,UAAU,cAAc,UAAd,EAA0B,YAA1B,EAAwC,MAAxC,EAAgD,KAAhD,EAAuD,MAAM,OAAN,EAAe,QAAtE,CAAV,CAlB+D;;AAoBrE,MAAI,CAAC,OAAD,EAAU;AACZ,UAAM,aAAa,IAAI,KAAJ,CAAU,CAAC,SAAD,GAAY,KAAK,OAAL,CAAa,KAAb,CAAZ,EAAgC,CAA1C,CAAb,CADM;AAEZ,eAAW,MAAX,GAAoB,KAApB,CAFY;;AAIZ,WAAO,eAAP,CAAuB,IAAvB,CAA4B,YAA5B,EAA0C,UAA1C,EAJY;GAAd;CApBe","file":"runtime-script-errors-compiled.js","sourcesContent":["\"use strict\";\nconst util = require(\"util\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\").interface;\n\nconst errorReportingMode = Symbol(\"error reporting mode\");\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#report-the-error\n// Omits script parameter and any check for muted errors; takes error object, message, and location as params, unlike\n// the spec. Returns whether the event was handled or not.\nfunction reportAnError(line, col, target, errorObject, message, location) {\n  if (errorReportingMode in target) {\n    return false;\n  }\n\n  target[errorReportingMode] = true;\n\n  // TODO Events: use constructor directly, once they are no longer tied to a window.\n  const event = new ErrorEvent(\"error\", {\n    bubbles: false,\n    cancelable: true,\n    message,\n    filename: location,\n    lineno: line,\n    colno: col,\n    error: errorObject\n  });\n\n  target.dispatchEvent(event);\n\n  delete target[errorReportingMode];\n\n  return event.defaultPrevented;\n}\n\nmodule.exports = function reportException(window, error, filenameHint) {\n  // This function will give good results on real Error objects with stacks; poor ones otherwise\n\n  const stack = error && error.stack;\n  const lines = stack && stack.split(\"\\n\");\n\n  // Find the first line that matches; important for multi-line messages\n  let pieces;\n  if (lines) {\n    for (let i = 1; i < lines.length && !pieces; ++i) {\n      pieces = lines[i].match(/at (?:(.+)\\s+)?\\(?(?:(.+?):(\\d+):(\\d+)|([^)]+))\\)?/);\n    }\n  }\n\n  const fileName = pieces && pieces[2] || filenameHint || window._document._URL;\n  const lineNumber = pieces && parseInt(pieces[3]) || 0;\n  const columnNumber = pieces && parseInt(pieces[4]) || 0;\n\n  const handled = reportAnError(lineNumber, columnNumber, window, error, error.message, fileName);\n\n  if (!handled) {\n    const jsdomError = new Error(`Uncaught ${util.inspect(error)}`);\n    jsdomError.detail = error;\n\n    window._virtualConsole.emit(\"jsdomError\", jsdomError);\n  }\n};\n"]}