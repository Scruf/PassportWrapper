{"version":3,"sources":["HTMLTemplateElement.js"],"names":[],"mappings":"AAAA;;AAEA,MAAM,cAAc,QAAQ,oBAAR,CAAd;AACN,MAAM,QAAQ,QAAQ,YAAR,CAAR;AACN,MAAM,OAAO,QAAQ,yCAAR,CAAP;;AAEN,MAAM,cAAc,QAAQ,kBAAR,CAAd;AACN,MAAM,OAAO,MAAM,UAAN;;AAEb,SAAS,mBAAT,GAA+B;AAC7B,QAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN,CAD6B;CAA/B;AAGA,oBAAoB,SAApB,GAAgC,OAAO,MAAP,CAAc,YAAY,SAAZ,CAAsB,SAAtB,CAA9C;AACA,oBAAoB,SAApB,CAA8B,WAA9B,GAA4C,mBAA5C;AACA,OAAO,cAAP,CAAsB,oBAAoB,SAApB,EAA+B,SAArD,EAAgE;AAC9D,QAAM;AACJ,WAAO,KAAK,IAAL,EAAW,OAAX,CADH;GAAN;AAGA,cAAY,IAAZ;AACA,gBAAc,IAAd;CALF;;AASA,OAAO,OAAP,GAAiB;AACf,KAAG,GAAH,EAAQ;AACN,WAAO,CAAC,CAAC,GAAD,IAAQ,IAAI,IAAJ,aAAqB,KAAK,cAAL,CAD/B;GAAR;AAGA,SAAO,eAAP,EAAwB,WAAxB,EAAqC;AACnC,QAAI,MAAM,OAAO,MAAP,CAAc,oBAAoB,SAApB,CAApB,CAD+B;AAEnC,SAAK,KAAL,CAAW,GAAX,EAAgB,eAAhB,EAAiC,WAAjC,EAFmC;AAGnC,WAAO,GAAP,CAHmC;GAArC;AAKA,QAAM,GAAN,EAAW,eAAX,EAA4B,WAA5B,EAAyC;AACvC,QAAI,CAAC,WAAD,EAAc,cAAc,EAAd,CAAlB;AACA,gBAAY,OAAZ,GAAsB,GAAtB,CAFuC;;AAIvC,QAAI,IAAJ,IAAY,IAAI,KAAK,cAAL,CAAoB,eAAxB,EAAyC,WAAzC,CAAZ,CAJuC;AAKvC,QAAI,IAAJ,EAAU,MAAM,aAAN,CAAV,GAAiC,GAAjC,CALuC;GAAzC;AAOA,aAAW,mBAAX;AACA,UAAQ;AACN,YAAQ,EAAE,qBAAqB,mBAArB,EAAV;GADF;CAjBF","file":"HTMLTemplateElement-compiled.js","sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Impl = require(\"../elements/HTMLTemplateElement-impl.js\");\n\nconst HTMLElement = require(\"./HTMLElement.js\");\nconst impl = utils.implSymbol;\n\nfunction HTMLTemplateElement() {\n  throw new TypeError(\"Illegal constructor\");\n}\nHTMLTemplateElement.prototype = Object.create(HTMLElement.interface.prototype);\nHTMLTemplateElement.prototype.constructor = HTMLTemplateElement;\nObject.defineProperty(HTMLTemplateElement.prototype, \"content\", {\n  get() {\n    return this[impl].content;\n  },\n  enumerable: true,\n  configurable: true\n});\n\n\nmodule.exports = {\n  is(obj) {\n    return !!obj && obj[impl] instanceof Impl.implementation;\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(HTMLTemplateElement.prototype);\n    this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n\n    obj[impl] = new Impl.implementation(constructorArgs, privateData);\n    obj[impl][utils.wrapperSymbol] = obj;\n  },\n  interface: HTMLTemplateElement,\n  expose: {\n    Window: { HTMLTemplateElement: HTMLTemplateElement }\n  }\n};\n\n"]}