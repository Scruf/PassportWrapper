{"version":3,"sources":["parse.js"],"names":[],"mappings":";;;AAGA,IAAI,aAAa,QAAQ,aAAR,CAAb;;;;;AAKJ,UAAU,OAAO,OAAP,GAAiB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;AACpD,MAAI,MAAM,QAAQ,QAAR,CAAiB,OAAjB,EAA0B,OAA1B,CAAN;;;AAEA,SAAO,QAAQ,QAAR,CAAiB,eAAjB,EAAkC,OAAlC,EAA2C,CAA3C,CAAP,CAHgD;;AAKpD,OAAK,IAAL,GAAY,MAAZ;;;AALoD,SAQpD,CAAQ,MAAR,CAAe,GAAf,EAAoB,IAApB,EARoD;;AAUpD,SAAO,IAAP,CAVoD;CAA3B;;AAa3B,QAAQ,QAAR,GAAmB,UAAS,OAAT,EAAkB,OAAlB,EAA2B;;;AAG5C,MAAI,GAAJ,CAH4C;;AAK5C,MAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,QAAP,CAAgB,OAAhB,CAA/B,EAAyD;AAC3D,UAAM,WAAW,QAAX,CAAoB,OAApB,EAA6B,OAA7B,CAAN,CAD2D;GAA7D,MAEO;AACL,UAAM,OAAN,CADK;GAFP;;AAMA,SAAO,GAAP,CAX4C;CAA3B;;;;;AAiBnB,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc,MAAd,EAAsB;;AAErC,MAAI,CAAC,MAAM,OAAN,CAAc,GAAd,CAAD,EAAqB,MAAM,CAAC,GAAD,CAAN,CAAzB;;;AAFqC,MAKjC,MAAJ,EAAY;AACV,WAAO,QAAP,GAAkB,GAAlB,CADU;GAAZ,MAEO;AACL,aAAS,IAAT,CADK;GAFP;;;AALqC,OAYhC,IAAI,IAAI,CAAJ,EAAO,IAAI,IAAI,MAAJ,EAAY,GAAhC,EAAqC;AACnC,QAAI,OAAO,IAAI,CAAJ,CAAP;;;AAD+B,QAI/B,YAAY,KAAK,MAAL,IAAe,KAAK,IAAL;QAC3B,cAAc,aAAa,UAAU,QAAV,CALI;AAMnC,QAAI,eAAe,gBAAgB,GAAhB,EAAqB;AACtC,kBAAY,MAAZ,CAAmB,YAAY,OAAZ,CAAoB,IAApB,CAAnB,EAA8C,CAA9C,EADsC;AAEtC,UAAI,KAAK,IAAL,EAAW;AACb,aAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,IAAL,CADJ;OAAf;AAGA,UAAI,KAAK,IAAL,EAAW;AACb,aAAK,IAAL,CAAU,IAAV,GAAiB,KAAK,IAAL,CADJ;OAAf;KALF;;AAUA,QAAI,MAAJ,EAAY;AACV,WAAK,IAAL,GAAY,IAAI,IAAI,CAAJ,CAAJ,IAAc,IAAd,CADF;AAEV,WAAK,IAAL,GAAY,IAAI,IAAI,CAAJ,CAAJ,IAAc,IAAd,CAFF;KAAZ,MAGO;AACL,WAAK,IAAL,GAAY,KAAK,IAAL,GAAY,IAAZ,CADP;KAHP;;AAOA,QAAI,UAAU,OAAO,IAAP,KAAgB,MAAhB,EAAwB;AACpC,WAAK,IAAL,GAAY,MAAZ,CADoC;AAEpC,WAAK,MAAL,GAAc,IAAd,CAFoC;KAAtC,MAGO;AACL,WAAK,IAAL,GAAY,IAAZ,CADK;AAEL,WAAK,MAAL,GAAc,MAAd,CAFK;KAHP;GAvBF;;AAgCA,SAAO,MAAP,CA5CqC;CAAtB","file":"parse-compiled.js","sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options) {\n  var dom = exports.evaluate(content, options),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options)[0];\n\n  root.type = 'root';\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nexports.evaluate = function(content, options) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n"]}