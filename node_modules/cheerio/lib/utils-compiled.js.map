{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA,IAAI,QAAQ,QAAQ,SAAR,CAAR;IACA,SAAS,QAAQ,gBAAR,CAAT;;;;;;AAMJ,IAAI,OAAO,EAAE,KAAK,IAAL,EAAW,QAAQ,IAAR,EAAc,OAAO,IAAP,EAAlC;;;;;;;;AAQJ,QAAQ,KAAR,GAAgB,UAAS,IAAT,EAAe;AAC7B,MAAI,KAAK,IAAL,EAAW,OAAO,KAAK,IAAL,CAAtB;AACA,SAAO,KAAK,IAAL,KAAc,KAAd,CAFsB;CAAf;;;;;;;;AAWhB,QAAQ,SAAR,GAAoB,UAAS,GAAT,EAAc;AAChC,SAAO,IAAI,OAAJ,CAAY,cAAZ,EAA4B,UAAS,CAAT,EAAY,CAAZ,EAAe;AAChD,WAAO,EAAE,WAAF,EAAP,CADgD;GAAf,CAAnC,CADgC;CAAd;;;;;;;;AAYpB,QAAQ,OAAR,GAAkB,UAAS,GAAT,EAAc;AAC9B,SAAO,IAAI,OAAJ,CAAY,QAAZ,EAAsB,KAAtB,EAA6B,WAA7B,EAAP,CAD8B;CAAd;;;;;;;;;AAWlB,QAAQ,OAAR,GAAkB,UAAS,OAAT,EAAkB,EAAlB,EAAsB;AACtC,MAAI,IAAI,CAAJ;MAAO,MAAM,QAAQ,MAAR,CADqB;AAEtC,SAAO,IAAI,GAAJ,IAAW,GAAG,IAAH,CAAQ,OAAR,EAAiB,CAAjB,EAAoB,QAAQ,CAAR,CAApB,MAAoC,KAApC,EAA2C,EAAE,CAAF,CAA7D;AACA,SAAO,OAAP,CAHsC;CAAtB;;;;;;;;;AAalB,QAAQ,QAAR,GAAmB,UAAS,GAAT,EAAc,OAAd,EAAuB;AACxC,SAAO,MAAM,OAAO,GAAP,EAAY,OAAZ,CAAN,EAA4B,OAA5B,EAAqC,QAArC,CADiC;CAAvB;;;;;;AAQnB,IAAI,YAAY,0CAAZ;;;;;AAKJ,QAAQ,MAAR,GAAiB,UAAS,GAAT,EAAc;;AAE7B,MAAI,IAAI,MAAJ,CAAW,CAAX,MAAkB,GAAlB,IAAyB,IAAI,MAAJ,CAAW,IAAI,MAAJ,GAAa,CAAb,CAAX,KAA+B,GAA/B,IAAsC,IAAI,MAAJ,IAAc,CAAd,EAAiB,OAAO,IAAP,CAApF;;;AAF6B,MAKzB,QAAQ,UAAU,IAAV,CAAe,GAAf,CAAR,CALyB;AAM7B,SAAO,CAAC,EAAE,SAAS,MAAM,CAAN,CAAT,CAAF,CANqB;CAAd","file":"utils-compiled.js","sourcesContent":["var parse = require('./parse'),\n    render = require('dom-serializer');\n\n/**\n * HTML Tags\n */\n\nvar tags = { tag: true, script: true, style: true };\n\n/**\n * Check if the DOM element is a tag\n *\n * isTag(type) includes <script> and <style> tags\n */\n\nexports.isTag = function(type) {\n  if (type.type) type = type.type;\n  return tags[type] || false;\n};\n\n/**\n * Convert a string to camel case notation.\n * @param  {String} str String to be converted.\n * @return {String}     String in camel case notation.\n */\n\nexports.camelCase = function(str) {\n  return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n    return x.toUpperCase();\n  });\n};\n\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n * @param  {String} str String to be converted.\n * @return {string}     String in \"CSS case\".\n */\nexports.cssCase = function(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n};\n\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\n * by _make.\n */\n\nexports.domEach = function(cheerio, fn) {\n  var i = 0, len = cheerio.length;\n  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;\n  return cheerio;\n};\n\n/**\n * Create a deep copy of the given DOM structure by first rendering it to a\n * string and then parsing the resultant markup.\n *\n * @argument {Object} dom - The htmlparser2-compliant DOM structure\n * @argument {Object} options - The parsing/rendering options\n */\nexports.cloneDom = function(dom, options) {\n  return parse(render(dom, options), options).children;\n};\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n\n/*\n * Check if string is HTML\n */\nexports.isHtml = function(str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};\n"]}